{"version":3,"sources":["webpack:///./node_modules/node-libs-browser/mock/process.js","webpack:///./src/views/Tab1.vue","webpack:///./src/views/Tab1.vue?58c3","webpack:///./node_modules/@firebase/database/dist/index.esm2017.js","webpack:///./src/views/Tab1.vue?25c0","webpack:///./node_modules/path-browserify/index.js"],"names":["exports","nextTick","fn","args","Array","prototype","slice","call","arguments","shift","setTimeout","apply","platform","arch","execPath","title","pid","browser","env","argv","binding","name","Error","path","cwd","chdir","dir","resolve","exit","kill","umask","dlopen","uptime","memoryUsage","uvCounters","features","fullscreen","listaClaves","item","index","key","listaKeys","status","components","IonHeader","IonToolbar","IonTitle","IonContent","IonPage","IonCol","IonGrid","IonRow","db","starCountRef","snapshot","data","val","console","log","cont","forEach","element","this","toJSON","listaCaves","usuario","__exports__","render","version","SDK_VERSION","setSDKVersion","DOMStorageWrapper","domStorage_","prefix_","value","removeItem","prefixedName_","setItem","storedVal","getItem","toString","MemoryStorage","cache_","isInMemoryStorage","createStoragefor","domStorageName","window","domStorage","e","PersistentStorage","SessionStorage","logClient","LUIDGenerator","id","sha1","str","utf8Bytes","update","sha1Bytes","digest","encodeByteArray","buildLogMessage_","varArgs","message","i","length","arg","isArray","logger","firstLog_","enableLogging$1","logger_","persistent","logLevel","VERBOSE","bind","set","remove","get","logWrapper","prefix","error","fatal","warn","warnIfPageIsSecure","location","protocol","indexOf","isInvalidJSONNumber","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","executeWhenDOMReady","document","readyState","called","wrappedFn","body","Math","floor","addEventListener","attachEvent","MIN_NAME","MAX_NAME","nameCompare","a","b","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","obj","ObjectToUniqueKey","keys","k","push","sort","splitStringBySize","segsize","len","dataSegs","c","substring","each","hasOwnProperty","doubleToIEEE754String","v","ebits","fbits","bias","s","f","ln","Infinity","abs","pow","min","LN2","round","bits","reverse","join","hexByteString","hexByte","parseInt","substr","toLowerCase","isChromeExtensionContentScript","test","href","isWindowsStoreApp","Windows","UI","errorForServerCode","code","query","reason","_path","toUpperCase","INTEGER_REGEXP_","RegExp","INTEGER_32_MIN","INTEGER_32_MAX","intVal","exceptionGuard","stack","beingCrawled","userAgent","search","setTimeoutNonBlocking","time","timeout","AppCheckTokenProvider","appName_","appCheckProvider","appCheck","getImmediate","optional","then","forceRefresh","getToken","Promise","reject","listener","_a","addTokenListener","FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth_","onInit","auth","catch","addAuthTokenListener","removeAuthTokenListener","errorMessage","EmulatorTokenProvider","accessToken","OWNER","PROTOCOL_VERSION","VERSION_PARAM","TRANSPORT_SESSION_PARAM","REFERER_PARAM","FORGE_REF","FORGE_DOMAIN_RE","LAST_SESSION_PARAM","APPLICATION_ID_PARAM","APP_CHECK_TOKEN_PARAM","WEBSOCKET","LONG_POLLING","RepoInfo","host","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","_host","_domain","internalHost","newHost","isCacheableHost","toURLString","repoInfoNeedsQueryParam","repoInfo","isCustomHost","repoInfoConnectionURL","type","params","connURL","pairs","StatsCollection","counters_","amount","collections","reporters","statsManagerGetCollection","hashString","statsManagerGetOrCreateReporter","creatorFunction","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","responseNum","callback","requestNum","toProcess","FIREBASE_LONGPOLL_START_PARAM","FIREBASE_LONGPOLL_CLOSE_COMMAND","FIREBASE_LONGPOLL_COMMAND_CB_NAME","FIREBASE_LONGPOLL_DATA_CB_NAME","FIREBASE_LONGPOLL_ID_PARAM","FIREBASE_LONGPOLL_PW_PARAM","FIREBASE_LONGPOLL_SERIAL_PARAM","FIREBASE_LONGPOLL_CALLBACK_ID_PARAM","FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM","FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET","FIREBASE_LONGPOLL_DATA_PARAM","FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM","MAX_URL_DATA_SIZE","SEG_HEADER_SIZE","MAX_PAYLOAD_SIZE","KEEPALIVE_REQUEST_INTERVAL","LP_CONNECT_TIMEOUT","BrowserPollConnection","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","scriptTagHolder","FirebaseIFrameScriptHolder","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","clearTimeout","password","sendNewPolls","closeAfter","pN","handleResponse","urlParams","random","uniqueCallbackIdentifier","hostname","connectURL","addTag","startLongPoll","addDisconnectPingFrame","forceAllow_","forceDisallow_","createElement","close","myDisconnFrame","removeChild","shutdown_","dataStr","incrementCounter","base64data","enqueueSegment","pw","src","style","display","appendChild","commandCB","onMessageCB","outstandingRequests","Set","pendingSegs","currentSerial","myIFrame","createIFrame_","script","currentDomain","domain","iframeContents","doc","open","write","iframe","contentWindow","contentDocument","alive","innerHTML","myID","myPW","newRequest_","size","theURL","curDataString","nextSeg","d","theSeg","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","add","doNewRequest","delete","keepaliveTimeout","readyStateCB","loadCB","doNodeLongPoll","newScript","async","onload","onreadystatechange","rstate","parentNode","onerror","WEBSOCKET_MAX_FRAME_SIZE","WEBSOCKET_KEEPALIVE_INTERVAL","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","device","options","headers","process","proxy","origin","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","navigator","oldAndroidRegex","oldAndroidMatch","match","parseFloat","fullMess","jsonMess","frameCount","isNaN","handleNewFrameCount_","mess","resetKeepAlive","appendFrame_","remainingData","extractFrameCount_","sendString_","String","clearInterval","setInterval","send","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","initTransports_","isWebSocketsAvailable","isSkipPollConnection","previouslyFailed","transports_","transports","transport","ALL_TRANSPORTS","UPGRADE_TIMEOUT","DELAY_BEFORE_SENDING_EXTRA_REQUESTS","BYTES_SENT_HEALTHY_OVERRIDE","BYTES_RECEIVED_HEALTHY_OVERRIDE","MESSAGE_TYPE","MESSAGE_DATA","CONTROL_SHUTDOWN","CONTROL_RESET","CONTROL_ERROR","CONTROL_PONG","SWITCH_ACK","END_TRANSMISSION","PING","SERVER_HELLO","Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","initialTransport","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","markConnectionHealthy","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","dataMsg","msg","t","sendData_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","onSecondaryControl_","proceedWithUpgrade_","start","tryCleanupConnection","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","upgradeTransport","startUpgrade_","closeConnections_","ServerActions","pathString","onComplete","hash","token","stats","EventEmitter","allowedEvents_","listeners_","eventType","listeners","context","validateEventType_","eventData","getInitialEvent","splice","find","et","OnlineMonitor","super","online_","trigger","MAX_PATH_DEPTH","MAX_PATH_LENGTH_BYTES","Path","pathOrString","pieceNum","pieces_","split","copyTo","pieceNum_","newEmptyPath","pathGetFront","pathGetLength","pathPopFront","pathGetBack","pathToUrlEncodedString","encodeURIComponent","pathSlice","begin","pathParent","pieces","pathChild","childPathObj","childPieces","pathIsEmpty","newRelativePath","outerPath","innerPath","outer","inner","pathEquals","other","j","pathContains","ValidationPath","errorPrefix_","parts_","byteLength_","max","validationPathCheckValid","validationPathPush","validationPath","child","validationPathPop","last","pop","validationPathToErrorString","VisibilityMonitor","hidden","visibilityChange","visible_","visible","RECONNECT_MIN_DELAY","RECONNECT_MAX_DELAY_DEFAULT","GET_CONNECT_TIMEOUT","RECONNECT_MAX_DELAY_FOR_ADMINS","RECONNECT_DELAY_MULTIPLIER","RECONNECT_DELAY_RESET_TIMEOUT","SERVER_KILL_INTERRUPT_REASON","INVALID_TOKEN_THRESHOLD","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens","Map","outstandingPuts_","outstandingGets_","outstandingPutCount_","outstandingGetCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","forceTokenRefresh_","invalidAuthTokenCount_","invalidAppCheckTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","getInstance","on","onVisible_","onOnline_","action","onResponse","curReqNum","r","sendRequest","initConnection_","deferred","request","p","q","_queryObject","outstandingGet","undefined","sendGet_","promise","currentHashFn","tag","queryId","_queryIdentifier","has","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","warnOnListenWarnings_","currentListenSpec","removeListen_","warnings","indexSpec","getIndex","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isFirebaseSecret","tryAppCheck","authMethod","requestData","cred","res","onAuthRevoked_","onAppCheckRevoked_","listen","sendUnlisten_","queryObj","sendOnDisconnect_","response","putInternal","sendPut_","queued","result","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","Date","getTime","handleTimestamp_","sendConnectStats_","restoreState_","establishConnection_","scheduleConnect_","online","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectSucceeded","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","onRealtimeDisconnect_","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","all","interrupt","delta","serverTimeOffset","put","map","normalizedPathString","statusCode","explanation","notifyForInvalidToken","replace","queries","values","clientName","reportStats","currentlyOnline","NamedNode","node","Index","compare","oldNode","newNode","oldWrapped","newWrapped","MIN","__EMPTY_NODE","KeyIndex","indexValue","KEY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","cmp","isEmpty","left","right","LLRBNode","color","RED","SortedMap","EMPTY_NODE","count","inorderTraversal","reverseTraversal","min_","maxKey","n","copy","insert","fixUp_","isRed_","moveRedLeft_","removeMin_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","blackDepth","check_","BLACK","LLRBEmptyNode","comparator_","root_","rightParent","minKey","resultGenerator","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","MAX_NODE$2","setMaxNode$1","priorityHashText","priority","validatePriorityNode","priorityNode","isLeafNode","getPriority","__childrenNodeConstructor","nodeFromJSON$1","MAX_NODE$1","LeafNode","value_","priorityNode_","lazyHash_","newPriorityNode","childName","childNode","newChildNode","updatePriority","updateImmediateChild","front","updateChild","exportFormat","getValue","toHash","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","equals","setNodeFromJSON","setMaxNode","PriorityIndex","aPriority","bPriority","indexCmp","compareTo","PRIORITY_INDEX","LOG_2","Base12Num","logBase2","num","bitMask","current_","mask","bits_","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","high","namedNode","middle","buildFrom12Array","base12","root","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","nextBitIsOne","_defaultIndexMap","fallbackObject","IndexMap","indexes_","indexSet_","indexKey","sortedMap","indexDefinition","existingChildren","sawIndexedValue","iter","getIterator","Wrap","newIndex","next","getNext","isDefinedOn","getCompare","indexName","newIndexSet","Object","assign","newIndexes","indexedChildren","existingSnap","newChildren","ChildrenNode","children_","indexMap_","Default","getImmediateChild","getChild","newIndexMap","removeFromIndexes","addToIndexes","newPriority","newImmediateChild","numKeys","allIntegerKeys","forEachChild","array","childHash","idx","resolveIndex_","predecessor","getPredecessorKey","getFirstChildName","getLastChildName","wrappedNode","getIteratorFrom","minPost","startPost","iterator","peek","getReverseIteratorFrom","maxPost","endPost","MAX_NODE","hasIndex","addIndex","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","MaxNode","defineProperties","MAX","USE_HINZE","nodeFromJSON","json","jsonLeaf","childData","children","childrenHavePriority","hinzeJsonObj","childSet","sortedChildSet","PathIndex","indexPath_","snap","aChild","extractChild","bChild","valueNode","ValueIndex","VALUE_INDEX","PUSH_CHARS","lastPushTime","lastRandChars","changeValue","snapshotNode","changeChildAdded","changeChildRemoved","changeChildChanged","oldSnap","changeChildMoved","IndexedFilter","index_","newChild","affectedPath","source","optChangeAccumulator","isIndexed","oldChild","hasChild","trackChildChange","withIndex","newSnap","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","matches","filtered","self","updateFullNode","hasStart","startName","getIndexStartName","makePost","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","LimitedFilter","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","numChildren","getIndexedFilter","fullLimitUpdateChild_","hasNext","inRange","getReverseIterator","indexCompare","foundStartPost","childKey","childSnap","changeAccumulator","oldEventCache","newChildNamedNode","windowBoundary","getFirstChild","getLastChild","oldChildSnap","nextChild","getChildAfterChild","compareNext","remainsInWindow","newEventCache","nextChildInRange","QueryParams","limitSet_","startSet_","startNameSet_","startAfterSet_","endSet_","endNameSet_","endBeforeSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","queryParamsGetNodeFilter","queryParams","hasLimit","queryParamsToRestQueryStringParameters","qs","orderBy","queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","listens_","listenId","getListenId_","thisListen","queryStringParameters","restRequest_","xhr","XMLHttpRequest","responseText","SnapshotHolder","rootNode_","newSnapshotNode","newSparseSnapshotTree","sparseSnapshotTreeRemember","sparseSnapshotTree","clear","sparseSnapshotTreeForEachTree","prefixPath","func","sparseSnapshotTreeForEachChild","tree","StatsListener","collection_","last_","newStats","stat","FIRST_STATS_MIN_TIME","FIRST_STATS_MAX_TIME","REPORT_STATS_INTERVAL","StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","reportedStats","haveStatsToReport","OperationType","newOperationSourceUser","fromUser","fromServer","tagged","newOperationSourceServer","newOperationSourceServerTaggedQuery","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","subtree","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isCompleteForChild","EventGenerator","query_","eventGeneratorGenerateEventsForChanges","eventGenerator","changes","eventCache","eventRegistrations","events","moves","change","indexedValueChanged","eventGeneratorGenerateEventsForType","registrations","filteredChanges","filter","eventGeneratorCompareChanges","materializedChange","eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","prevName","getPredecessorChildName","aWrapped","bWrapped","newViewCache","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","complete","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","getNode","viewCacheGetCompleteServerSnap","emptyChildrenSingleton","EmptyChildren","ImmutableTree","childPath","relativePath","predicate","childExistingPathAndValue","findRootMostMatchingPathAndValue","fullPath","toSet","newTree","setTree","fold_","pathSoFar","accum","findOnPath_","pathToFollow","foreachOnPath_","currentRelativePath","foreach_","CompoundWrite","writeTree_","compoundWriteAddWrite","compoundWrite","rootmost","findRootMostValueAndPath","rootMostPath","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteRemoveWrite","empty","compoundWriteHasCompleteWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","compoundWriteChildCompoundWrite","shadowingNode","compoundWriteIsEmpty","compoundWriteApply","applySubtreeWrite","writeTree","priorityWrite","writeTreeChildWrites","newWriteTreeRef","writeTreeAddOverwrite","writeId","lastWriteId","allWrites","visibleWrites","writeTreeGetWrite","record","writeTreeRemoveWrite","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeRecordContainsPath_","writeTreeResetTree_","writeRecord","writeTreeLayerTree_","writeTreeDefaultFilter_","writes","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","merge","mergeAtPath","layeredCache","subMerge","writeTreeCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","writeTreeCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcCompleteChild","writeTreeShadowingWrite","writeTreeCalcIndexedSlice","completeServerData","toIterate","nodes","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcCompleteEventChildren","writeTreeRefCalcEventCacheAfterServerOverwrite","writeTreeRefShadowingWrite","writeTreeRefCalcIndexedSlice","writeTreeRefCalcCompleteChild","existingServerCache","writeTreeRefChild","ChildChangeAccumulator","changeMap","oldChange","oldType","from","NoCompleteChildSource_","NO_COMPLETE_CHILD_SOURCE","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","newViewProcessor","viewProcessorAssertIndexed","viewProcessor","viewProcessorApplyOperation","oldViewCache","operation","writesCache","completeCache","accumulator","filterServerNode","overwrite","viewProcessorApplyUserOverwrite","isFiltered","viewProcessorApplyServerOverwrite","viewProcessorApplyUserMerge","viewProcessorApplyServerMerge","ackUserWrite","viewProcessorRevertUserWrite","viewProcessorAckUserWrite","viewProcessorListenComplete","getChanges","viewProcessorMaybeAddValueEvent","isLeafOrEmpty","oldCompleteSnap","viewProcessorGenerateEventCacheAfterServerEvent","changePath","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","childChangePath","newEventChild","eventChildUpdate","filtersNodes","changedSnap","oldServerSnap","newServerCache","serverFilter","newServerNode","isCompleteForPath","getCompleteChild","newEventSnap","viewProcessorCacheHasChild","changedChildren","curViewCache","foreach","viewProcessorApplyMerge","viewMergeTree","serverChild","childMergeTree","isUnknownDeepMerge","ackPath","mergePath","serverCachePath","oldServerNode","serverChildren","View","initialViewCache","eventRegistrations_","indexFilter","processor_","initialServerCache","initialEventCache","eventGenerator_","viewGetServerCache","view","viewGetCompleteServerCache","cache","viewIsEmpty","viewAddEventRegistration","eventRegistration","viewRemoveEventRegistration","cancelError","cancelEvents","maybeEvent","createCancelEvent","remaining","existing","hasAnyCallback","concat","viewApplyOperation","viewGenerateEventsForChanges_","viewGetInitialEvents","initialChanges","eventNode","referenceConstructor$1","referenceConstructor","SyncPoint","views","syncPointSetReferenceConstructor","syncPointGetReferenceConstructor","syncPointIsEmpty","syncPoint","syncPointApplyOperation","optCompleteServerCache","syncPointGetView","serverCacheComplete","eventCacheComplete","syncPointAddEventRegistration","syncPointRemoveEventRegistration","removed","hadCompleteView","syncPointHasCompleteView","viewQueryId","entries","_repo","syncPointGetQueryViews","syncPointGetCompleteServerCache","syncPointViewForQuery","syncPointGetCompleteView","syncPointViewExistsForQuery","syncTreeSetReferenceConstructor","syncTreeGetReferenceConstructor","syncTreeNextQueryTag_","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap","queryToTagMap","syncTreeApplyUserOverwrite","syncTree","newData","syncTreeApplyOperationToSyncPoints_","syncTreeAckUserWrite","needToReevaluate","syncTreeApplyServerOverwrite","syncTreeApplyServerMerge","changeTree","fromObject","syncTreeApplyListenComplete","syncTreeApplyTaggedListenComplete","queryKey","syncTreeQueryKeyForTag_","syncTreeParseQueryKey_","queryPath","op","syncTreeApplyTaggedOperation_","syncTreeRemoveEventRegistration","maybeSyncPoint","removedAndEvents","removingDefault","covered","findOnPath","parentSyncPoint","newViews","syncTreeCollectDistinctViewsForSubTree_","newQuery","syncTreeCreateListenerForView_","startListening","syncTreeQueryForListening_","syncTreeTagForQuery_","defaultTag","stopListening","queryToRemove","tagToRemove","syncTreeMakeQueryKey_","syncTreeRemoveTags_","syncTreeApplyTaggedQueryOverwrite","syncTreeApplyTaggedQueryMerge","syncTreeAddEventRegistration","foundAncestorDefaultView","foreachOnPath","pathToSyncPoint","sp","foreachChild","childSyncPoint","viewAlreadyExists","syncTreeGetNextQueryTag_","syncTreeSetupListener_","syncTreeCalcCompleteEventCache","includeHiddenSets","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","operationForChild","childServerCache","childWritesCache","splitIndex","fold","maybeChildSyncPoint","childMap","completeView","_key","childViews","removedQuery","removedQueryKey","removedQueryTag","queriesToStop","childQueries","queryToStop","ExistingValueProvider","DeferredValueProvider","syncTree_","path_","generateWithValues","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","JSON","stringify","unused","existingNode","leaf","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","Tree","parent","childCount","treeSubTree","pathObj","treeGetValue","treeSetValue","treeUpdateParents","treeHasChildren","treeIsEmpty","treeForEachChild","treeForEachDescendant","includeSelf","childrenFirst","treeForEachAncestor","treeGetPath","treeUpdateChild","childEmpty","childExists","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidKey","isValidPathString","isValidRootPathString","validateFirebaseData","errorPrefix","hasDotValue","hasActualChild","validatePathString","fnName","argumentName","validateRootPathString","validateUrl","parsedUrl","EventQueue","eventLists_","recursionDepth_","eventQueueQueueEvents","eventQueue","eventDataList","currList","getPath","eventQueueRaiseEventsAtPath","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","eventQueueRaiseEventsForChangedPath","changedPath","sentAll","eventList","eventListRaise","eventFn","getEventRunner","INTERRUPT_REASON","MAX_TRANSACTION_RETRIES","Repo","forceRestClient_","appCheckProvider_","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","transactionQueueTree_","persistentConnection_","repoStart","repo","appId","authOverride","isMerge","repoOnDataUpdate","repoOnConnectStatus","connectStatus","repoOnServerInfoUpdate","addTokenChangeListener","refreshAuthToken","refreshAppCheckToken","statsReporter_","infoData_","infoSyncTree_","infoEvents","repoUpdateInfo","serverSyncTree_","unlisten","repoServerTime","offsetNode","offset","repoGenerateServerValues","taggedChildren","raw","taggedSnap","repoRerunTransactions","repoRunOnDisconnectEvents","updateSnapshot","repoGetNextWriteId","repoLog","resolvedOnDisconnectTree","resolved","repoAbortTransactions","repoAddEventCallbackForQuery","repoRemoveEventCallbackForQuery","repoInterrupt","repoGetLatestState","excludeSets","repoSendReadyTransactions","repoPruneCompletedTransactionsBelowNode","queue","repoBuildTransactionQueue","allRun","every","transaction","repoSendTransactionQueue","setsToIgnore","txn","currentWriteId","latestState","snapToSend","latestHash","retryCount","currentOutputSnapshotRaw","dataToSend","pathToSend","callbacks","currentOutputSnapshotResolved","unwatcher","abortReason","rootMostTransactionNode","repoGetAncestorTransactionNode","repoRerunTransactionQueue","txnsToRerun","abortTransaction","currentNode","currentInputSnapshot","newDataNode","hasExplicitPriority","oldWriteId","newNodeResolved","applyLocally","transactionNode","transactionQueue","repoAggregateTransactionQueuesForNode","order","nodeQueue","to","repoAbortTransactionsOnNode","lastSent","decodePath","pathStringDecoded","piece","decodeURIComponent","decodeQuery","queryString","results","charAt","segment","kv","parseRepoInfo","dataURL","parseDatabaseURL","scheme","subdomain","port","colonInd","slashInd","questionMarkInd","hostWithoutPort","dotInd","DataEvent","ref","exportVal","CancelEvent","CallbackContext","snapshotCallback","cancelCallback","expDataSnapshot","previousChildName","hasCancelCallback","userCallback","QueryImpl","_orderByCalled","ReferenceImpl","sameRepo","samePath","sameQueryIdentifier","parentPath","DataSnapshot","_node","_index","childRef","_checkNotDeleted","_root","ValueEventRegistration","callbackContext","getEventType","onCancel","onValue","ChildEventRegistration","eventToCheck","cancelCallbackOrListenOptions","onlyOnce","onceCallback","dataSnapshot","container","FIREBASE_DATABASE_EMULATOR_HOST_VAR","repos","useRestClient","repoManagerDatabaseFromApp","app","authProvider","dbUrl","databaseURL","projectId","isEmulator","dbEmulatorHost","authTokenProvider","repoManagerCreateRepo","Database","repoManagerDeleteRepo","appName","appRepos","_repoInternal","_instanceStarted","_rootInternal","apiName","getDatabase","identifier","registerDatabase","variant","instanceIdentifier","getProvider","setMultipleInstances","simpleListen","echo","onEcho","normalizeArray","parts","allowAboveRoot","up","unshift","basename","end","matchedSlash","charCodeAt","xs","resolvedPath","resolvedAbsolute","TypeError","normalize","isAbsolute","trailingSlash","paths","relative","trim","arr","fromParts","toParts","samePartsLength","outputParts","sep","delimiter","dirname","hasRoot","ext","extname","startDot","startPart","preDotState"],"mappings":"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","file":"js/chunk-240ea5ec.7a1e4ffc.js","sourcesContent":["exports.nextTick = function nextTick(fn) {\n    var args = Array.prototype.slice.call(arguments);\n    args.shift();\n    setTimeout(function () {\n        fn.apply(null, args);\n    }, 0);\n};\n\nexports.platform = exports.arch = \nexports.execPath = exports.title = 'browser';\nexports.pid = 1;\nexports.browser = true;\nexports.env = {};\nexports.argv = [];\n\nexports.binding = function (name) {\n\tthrow new Error('No such module. (Possibly not yet loaded)')\n};\n\n(function () {\n    var cwd = '/';\n    var path;\n    exports.cwd = function () { return cwd };\n    exports.chdir = function (dir) {\n        if (!path) path = require('path');\n        cwd = path.resolve(dir, cwd);\n    };\n})();\n\nexports.exit = exports.kill = \nexports.umask = exports.dlopen = \nexports.uptime = exports.memoryUsage = \nexports.uvCounters = function() {};\nexports.features = {};\n","<template>\r\n  <ion-page>\r\n    <ion-header>\r\n      <ion-toolbar>\r\n        <ion-title>Claves feature login</ion-title>\r\n      </ion-toolbar>\r\n    </ion-header>\r\n    <ion-content :fullscreen=\"true\">\r\n      <ion-grid>\r\n        <ion-row>\r\n          <ion-col>\r\n            <div>Clave</div>\r\n          </ion-col>\r\n          <ion-col>\r\n            <div>Status</div>\r\n          </ion-col>\r\n        </ion-row>\r\n         <ion-row v-for=\"(item, index) in listaClaves\" :key=\"index\">\r\n          <ion-col>\r\n            <div>{{listaKeys[index]}}</div>\r\n          </ion-col>\r\n          <ion-col>\r\n            <div>{{item.status}}</div>\r\n          </ion-col>\r\n        </ion-row>\r\n      </ion-grid>\r\n    </ion-content>\r\n  </ion-page>\r\n</template>\r\n\r\n<script>\r\nimport {\r\n  IonPage,\r\n  IonHeader,\r\n  IonToolbar,\r\n  IonTitle,\r\n  IonContent,\r\n  IonCol,\r\n  IonGrid,\r\n  IonRow,\r\n} from \"@ionic/vue\";\r\nimport { getDatabase, ref, onValue } from \"firebase/database\";\r\n\r\nexport default {\r\n  name: \"Tab1\",\r\n  components: {\r\n    IonHeader,\r\n    IonToolbar,\r\n    IonTitle,\r\n    IonContent,\r\n    IonPage,\r\n    IonCol,\r\n    IonGrid,\r\n    IonRow,\r\n  },\r\n  mounted() {\r\n    const db = getDatabase();\r\n    const starCountRef = ref(db, \"claves/\");\r\n    onValue(starCountRef, (snapshot) => {\r\n      const data = snapshot.val();\r\n      console.log(data);\r\n     var cont = 0 \r\n      snapshot.forEach(element => {\r\n        this.listaKeys[cont]=element.key\r\n        this.listaClaves[cont] = element.toJSON()\r\n        cont++\r\n      });\r\n    });\r\n    console.log(\"lista de claves\", this.listaCaves)\r\n  },\r\n  data(){ return{\r\n        listaClaves: [{status:\"\", usuario:\"\"}],\r\n        listaKeys:[]\r\n\r\n  }}\r\n};\r\n</script>\r\n<style>\r\nion-col > div {\r\n  background-color: #f7f7f7;\r\n  border: solid 1px #ddd;\r\n  padding: 10px;\r\n}\r\n</style>","import { render } from \"./Tab1.vue?vue&type=template&id=abddfd5e\"\nimport script from \"./Tab1.vue?vue&type=script&lang=js\"\nexport * from \"./Tab1.vue?vue&type=script&lang=js\"\n\nimport \"./Tab1.vue?vue&type=style&index=0&id=abddfd5e&lang=css\"\n\nimport exportComponent from \"C:\\\\Users\\\\ralex\\\\Desktop\\\\MovilAndroidIos\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { getApp, _getProvider, SDK_VERSION as SDK_VERSION$1, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { stringify, jsonEval, contains, assert, base64, stringToByteArray, Sha1, isNodeSdk, deepCopy, base64Encode, isMobileCordova, stringLength, Deferred, safeGet, isAdmin, isValidFormat, isEmpty, isReactNative, assertionError, map, querystring, errorPrefix, getModularInstance, createMockUserToken } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\n\nconst name = \"@firebase/database\";\nconst version = \"0.12.8\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** The semver (www.semver.org) version of the SDK. */\r\nlet SDK_VERSION = '';\r\n/**\r\n * SDK_VERSION should be set before any database instance is created\r\n * @internal\r\n */\r\nfunction setSDKVersion(version) {\r\n    SDK_VERSION = version;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n */\r\nclass DOMStorageWrapper {\r\n    /**\r\n     * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\r\n     */\r\n    constructor(domStorage_) {\r\n        this.domStorage_ = domStorage_;\r\n        // Use a prefix to avoid collisions with other stuff saved by the app.\r\n        this.prefix_ = 'firebase:';\r\n    }\r\n    /**\r\n     * @param key - The key to save the value under\r\n     * @param value - The value being stored, or null to remove the key.\r\n     */\r\n    set(key, value) {\r\n        if (value == null) {\r\n            this.domStorage_.removeItem(this.prefixedName_(key));\r\n        }\r\n        else {\r\n            this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\r\n        }\r\n    }\r\n    /**\r\n     * @returns The value that was stored under this key, or null\r\n     */\r\n    get(key) {\r\n        const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\r\n        if (storedVal == null) {\r\n            return null;\r\n        }\r\n        else {\r\n            return jsonEval(storedVal);\r\n        }\r\n    }\r\n    remove(key) {\r\n        this.domStorage_.removeItem(this.prefixedName_(key));\r\n    }\r\n    prefixedName_(name) {\r\n        return this.prefix_ + name;\r\n    }\r\n    toString() {\r\n        return this.domStorage_.toString();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n */\r\nclass MemoryStorage {\r\n    constructor() {\r\n        this.cache_ = {};\r\n        this.isInMemoryStorage = true;\r\n    }\r\n    set(key, value) {\r\n        if (value == null) {\r\n            delete this.cache_[key];\r\n        }\r\n        else {\r\n            this.cache_[key] = value;\r\n        }\r\n    }\r\n    get(key) {\r\n        if (contains(this.cache_, key)) {\r\n            return this.cache_[key];\r\n        }\r\n        return null;\r\n    }\r\n    remove(key) {\r\n        delete this.cache_[key];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param domStorageName - Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @returns Turning off type information until a common interface is defined.\r\n */\r\nconst createStoragefor = function (domStorageName) {\r\n    try {\r\n        // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\r\n        // so it must be inside the try/catch.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window[domStorageName] !== 'undefined') {\r\n            // Need to test cache. Just because it's here doesn't mean it works\r\n            const domStorage = window[domStorageName];\r\n            domStorage.setItem('firebase:sentinel', 'cache');\r\n            domStorage.removeItem('firebase:sentinel');\r\n            return new DOMStorageWrapper(domStorage);\r\n        }\r\n    }\r\n    catch (e) { }\r\n    // Failed to create wrapper.  Just return in-memory storage.\r\n    // TODO: log?\r\n    return new MemoryStorage();\r\n};\r\n/** A storage object that lasts across sessions */\r\nconst PersistentStorage = createStoragefor('localStorage');\r\n/** A storage object that only lasts one session */\r\nconst SessionStorage = createStoragefor('sessionStorage');\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logClient = new Logger('@firebase/database');\r\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n */\r\nconst LUIDGenerator = (function () {\r\n    let id = 1;\r\n    return function () {\r\n        return id++;\r\n    };\r\n})();\r\n/**\r\n * Sha1 hash of the input string\r\n * @param str - The string to hash\r\n * @returns {!string} The resulting hash\r\n */\r\nconst sha1 = function (str) {\r\n    const utf8Bytes = stringToByteArray(str);\r\n    const sha1 = new Sha1();\r\n    sha1.update(utf8Bytes);\r\n    const sha1Bytes = sha1.digest();\r\n    return base64.encodeByteArray(sha1Bytes);\r\n};\r\nconst buildLogMessage_ = function (...varArgs) {\r\n    let message = '';\r\n    for (let i = 0; i < varArgs.length; i++) {\r\n        const arg = varArgs[i];\r\n        if (Array.isArray(arg) ||\r\n            (arg &&\r\n                typeof arg === 'object' &&\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                typeof arg.length === 'number')) {\r\n            message += buildLogMessage_.apply(null, arg);\r\n        }\r\n        else if (typeof arg === 'object') {\r\n            message += stringify(arg);\r\n        }\r\n        else {\r\n            message += arg;\r\n        }\r\n        message += ' ';\r\n    }\r\n    return message;\r\n};\r\n/**\r\n * Use this for all debug messages in Firebase.\r\n */\r\nlet logger = null;\r\n/**\r\n * Flag to check for log availability on first log message\r\n */\r\nlet firstLog_ = true;\r\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param logger_ - A flag to turn on logging, or a custom logger\r\n * @param persistent - Whether or not to persist logging settings across refreshes\r\n */\r\nconst enableLogging$1 = function (logger_, persistent) {\r\n    assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\r\n    if (logger_ === true) {\r\n        logClient.logLevel = LogLevel.VERBOSE;\r\n        logger = logClient.log.bind(logClient);\r\n        if (persistent) {\r\n            SessionStorage.set('logging_enabled', true);\r\n        }\r\n    }\r\n    else if (typeof logger_ === 'function') {\r\n        logger = logger_;\r\n    }\r\n    else {\r\n        logger = null;\r\n        SessionStorage.remove('logging_enabled');\r\n    }\r\n};\r\nconst log = function (...varArgs) {\r\n    if (firstLog_ === true) {\r\n        firstLog_ = false;\r\n        if (logger === null && SessionStorage.get('logging_enabled') === true) {\r\n            enableLogging$1(true);\r\n        }\r\n    }\r\n    if (logger) {\r\n        const message = buildLogMessage_.apply(null, varArgs);\r\n        logger(message);\r\n    }\r\n};\r\nconst logWrapper = function (prefix) {\r\n    return function (...varArgs) {\r\n        log(prefix, ...varArgs);\r\n    };\r\n};\r\nconst error = function (...varArgs) {\r\n    const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\r\n    logClient.error(message);\r\n};\r\nconst fatal = function (...varArgs) {\r\n    const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\r\n    logClient.error(message);\r\n    throw new Error(message);\r\n};\r\nconst warn = function (...varArgs) {\r\n    const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\r\n    logClient.warn(message);\r\n};\r\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\r\nconst warnIfPageIsSecure = function () {\r\n    // Be very careful accessing browser globals. Who knows what may or may not exist.\r\n    if (typeof window !== 'undefined' &&\r\n        window.location &&\r\n        window.location.protocol &&\r\n        window.location.protocol.indexOf('https:') !== -1) {\r\n        warn('Insecure Firebase access from a secure page. ' +\r\n            'Please use https in calls to new Firebase().');\r\n    }\r\n};\r\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n */\r\nconst isInvalidJSONNumber = function (data) {\r\n    return (typeof data === 'number' &&\r\n        (data !== data || // NaN\r\n            data === Number.POSITIVE_INFINITY ||\r\n            data === Number.NEGATIVE_INFINITY));\r\n};\r\nconst executeWhenDOMReady = function (fn) {\r\n    if (isNodeSdk() || document.readyState === 'complete') {\r\n        fn();\r\n    }\r\n    else {\r\n        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\r\n        // fire before onload), but fall back to onload.\r\n        let called = false;\r\n        const wrappedFn = function () {\r\n            if (!document.body) {\r\n                setTimeout(wrappedFn, Math.floor(10));\r\n                return;\r\n            }\r\n            if (!called) {\r\n                called = true;\r\n                fn();\r\n            }\r\n        };\r\n        if (document.addEventListener) {\r\n            document.addEventListener('DOMContentLoaded', wrappedFn, false);\r\n            // fallback to onload.\r\n            window.addEventListener('load', wrappedFn, false);\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (document.attachEvent) {\r\n            // IE.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            document.attachEvent('onreadystatechange', () => {\r\n                if (document.readyState === 'complete') {\r\n                    wrappedFn();\r\n                }\r\n            });\r\n            // fallback to onload.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            window.attachEvent('onload', wrappedFn);\r\n            // jQuery has an extra hack for IE that we could employ (based on\r\n            // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\r\n            // I'm hoping we don't need it.\r\n        }\r\n    }\r\n};\r\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n */\r\nconst MIN_NAME = '[MIN_NAME]';\r\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n */\r\nconst MAX_NAME = '[MAX_NAME]';\r\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n */\r\nconst nameCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a === MIN_NAME || b === MAX_NAME) {\r\n        return -1;\r\n    }\r\n    else if (b === MIN_NAME || a === MAX_NAME) {\r\n        return 1;\r\n    }\r\n    else {\r\n        const aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);\r\n        if (aAsInt !== null) {\r\n            if (bAsInt !== null) {\r\n                return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (bAsInt !== null) {\r\n            return 1;\r\n        }\r\n        else {\r\n            return a < b ? -1 : 1;\r\n        }\r\n    }\r\n};\r\n/**\r\n * @returns {!number} comparison result.\r\n */\r\nconst stringCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a < b) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return 1;\r\n    }\r\n};\r\nconst requireKey = function (key, obj) {\r\n    if (obj && key in obj) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        throw new Error('Missing required key (' + key + ') in object: ' + stringify(obj));\r\n    }\r\n};\r\nconst ObjectToUniqueKey = function (obj) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return stringify(obj);\r\n    }\r\n    const keys = [];\r\n    // eslint-disable-next-line guard-for-in\r\n    for (const k in obj) {\r\n        keys.push(k);\r\n    }\r\n    // Export as json, but with the keys sorted.\r\n    keys.sort();\r\n    let key = '{';\r\n    for (let i = 0; i < keys.length; i++) {\r\n        if (i !== 0) {\r\n            key += ',';\r\n        }\r\n        key += stringify(keys[i]);\r\n        key += ':';\r\n        key += ObjectToUniqueKey(obj[keys[i]]);\r\n    }\r\n    key += '}';\r\n    return key;\r\n};\r\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param str - The string\r\n * @param segsize - The maximum number of chars in the string.\r\n * @returns The string, split into appropriately-sized chunks\r\n */\r\nconst splitStringBySize = function (str, segsize) {\r\n    const len = str.length;\r\n    if (len <= segsize) {\r\n        return [str];\r\n    }\r\n    const dataSegs = [];\r\n    for (let c = 0; c < len; c += segsize) {\r\n        if (c + segsize > len) {\r\n            dataSegs.push(str.substring(c, len));\r\n        }\r\n        else {\r\n            dataSegs.push(str.substring(c, c + segsize));\r\n        }\r\n    }\r\n    return dataSegs;\r\n};\r\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param obj - The object or array to iterate over\r\n * @param fn - The function to apply\r\n */\r\nfunction each(obj, fn) {\r\n    for (const key in obj) {\r\n        if (obj.hasOwnProperty(key)) {\r\n            fn(key, obj[key]);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param v - A double\r\n *\r\n */\r\nconst doubleToIEEE754String = function (v) {\r\n    assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\r\n    const ebits = 11, fbits = 52;\r\n    const bias = (1 << (ebits - 1)) - 1;\r\n    let s, e, f, ln, i;\r\n    // Compute sign, exponent, fraction\r\n    // Skip NaN / Infinity handling --MJL.\r\n    if (v === 0) {\r\n        e = 0;\r\n        f = 0;\r\n        s = 1 / v === -Infinity ? 1 : 0;\r\n    }\r\n    else {\r\n        s = v < 0;\r\n        v = Math.abs(v);\r\n        if (v >= Math.pow(2, 1 - bias)) {\r\n            // Normalized\r\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\r\n            e = ln + bias;\r\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\r\n        }\r\n        else {\r\n            // Denormalized\r\n            e = 0;\r\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\r\n        }\r\n    }\r\n    // Pack sign, exponent, fraction\r\n    const bits = [];\r\n    for (i = fbits; i; i -= 1) {\r\n        bits.push(f % 2 ? 1 : 0);\r\n        f = Math.floor(f / 2);\r\n    }\r\n    for (i = ebits; i; i -= 1) {\r\n        bits.push(e % 2 ? 1 : 0);\r\n        e = Math.floor(e / 2);\r\n    }\r\n    bits.push(s ? 1 : 0);\r\n    bits.reverse();\r\n    const str = bits.join('');\r\n    // Return the data as a hex string. --MJL\r\n    let hexByteString = '';\r\n    for (i = 0; i < 64; i += 8) {\r\n        let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\r\n        if (hexByte.length === 1) {\r\n            hexByte = '0' + hexByte;\r\n        }\r\n        hexByteString = hexByteString + hexByte;\r\n    }\r\n    return hexByteString.toLowerCase();\r\n};\r\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n */\r\nconst isChromeExtensionContentScript = function () {\r\n    return !!(typeof window === 'object' &&\r\n        window['chrome'] &&\r\n        window['chrome']['extension'] &&\r\n        !/^chrome/.test(window.location.href));\r\n};\r\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n */\r\nconst isWindowsStoreApp = function () {\r\n    // Check for the presence of a couple WinRT globals\r\n    return typeof Windows === 'object' && typeof Windows.UI === 'object';\r\n};\r\n/**\r\n * Converts a server error code to a Javascript Error\r\n */\r\nfunction errorForServerCode(code, query) {\r\n    let reason = 'Unknown Error';\r\n    if (code === 'too_big') {\r\n        reason =\r\n            'The data requested exceeds the maximum size ' +\r\n                'that can be accessed with a single request.';\r\n    }\r\n    else if (code === 'permission_denied') {\r\n        reason = \"Client doesn't have permission to access the desired data.\";\r\n    }\r\n    else if (code === 'unavailable') {\r\n        reason = 'The service is unavailable';\r\n    }\r\n    const error = new Error(code + ' at ' + query._path.toString() + ': ' + reason);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    error.code = code.toUpperCase();\r\n    return error;\r\n}\r\n/**\r\n * Used to test for integer-looking strings\r\n */\r\nconst INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\r\n/**\r\n * For use in keys, the minimum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MIN = -2147483648;\r\n/**\r\n * For use in kyes, the maximum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MAX = 2147483647;\r\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n */\r\nconst tryParseInt = function (str) {\r\n    if (INTEGER_REGEXP_.test(str)) {\r\n        const intVal = Number(str);\r\n        if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\r\n            return intVal;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param fn - The code to guard.\r\n */\r\nconst exceptionGuard = function (fn) {\r\n    try {\r\n        fn();\r\n    }\r\n    catch (e) {\r\n        // Re-throw exception when it's safe.\r\n        setTimeout(() => {\r\n            // It used to be that \"throw e\" would result in a good console error with\r\n            // relevant context, but as of Chrome 39, you just get the firebase.js\r\n            // file/line number where we re-throw it, which is useless. So we log\r\n            // e.stack explicitly.\r\n            const stack = e.stack || '';\r\n            warn('Exception was thrown by user callback.', stack);\r\n            throw e;\r\n        }, Math.floor(0));\r\n    }\r\n};\r\n/**\r\n * @returns {boolean} true if we think we're currently being crawled.\r\n */\r\nconst beingCrawled = function () {\r\n    const userAgent = (typeof window === 'object' &&\r\n        window['navigator'] &&\r\n        window['navigator']['userAgent']) ||\r\n        '';\r\n    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\r\n    // believe to support JavaScript/AJAX rendering.\r\n    // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\r\n    // would have seen the page\" is flaky if we don't treat it as a crawler.\r\n    return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);\r\n};\r\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param fn - Function to run.\r\n * @param time - Milliseconds to wait before running.\r\n * @returns The setTimeout() return value.\r\n */\r\nconst setTimeoutNonBlocking = function (fn, time) {\r\n    const timeout = setTimeout(fn, time);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    if (typeof timeout === 'object' && timeout['unref']) {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        timeout['unref']();\r\n    }\r\n    return timeout;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around AppCheck's token fetching capabilities.\r\n */\r\nclass AppCheckTokenProvider {\r\n    constructor(appName_, appCheckProvider) {\r\n        this.appName_ = appName_;\r\n        this.appCheckProvider = appCheckProvider;\r\n        this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({ optional: true });\r\n        if (!this.appCheck) {\r\n            appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then(appCheck => (this.appCheck = appCheck));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.appCheck) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAppCheck. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // AppCheck and ensures that all requests are authenticated if a token\r\n                // becomes available before the timoeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.appCheck) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.appCheck.getToken(forceRefresh);\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        var _a;\r\n        (_a = this.appCheckProvider) === null || _a === void 0 ? void 0 : _a.get().then(appCheck => appCheck.addTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        warn(`Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\r\n            'are invalid. This usually indicates your app was not initialized correctly.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\r\nclass FirebaseAuthTokenProvider {\r\n    constructor(appName_, firebaseOptions_, authProvider_) {\r\n        this.appName_ = appName_;\r\n        this.firebaseOptions_ = firebaseOptions_;\r\n        this.authProvider_ = authProvider_;\r\n        this.auth_ = null;\r\n        this.auth_ = authProvider_.getImmediate({ optional: true });\r\n        if (!this.auth_) {\r\n            authProvider_.onInit(auth => (this.auth_ = auth));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.auth_) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAuth. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // Auth and ensures that all requests are authenticated if a token\r\n                // becomes available before the timoeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.auth_) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.auth_.getToken(forceRefresh).catch(error => {\r\n            // TODO: Need to figure out all the cases this is raised and whether\r\n            // this makes sense.\r\n            if (error && error.code === 'auth/token-not-initialized') {\r\n                log('Got auth/token-not-initialized error.  Treating as null token.');\r\n                return null;\r\n            }\r\n            else {\r\n                return Promise.reject(error);\r\n            }\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // TODO: We might want to wrap the listener and call it with no args to\r\n        // avoid a leaky abstraction, but that makes removing the listener harder.\r\n        if (this.auth_) {\r\n            this.auth_.addAuthTokenListener(listener);\r\n        }\r\n        else {\r\n            this.authProvider_\r\n                .get()\r\n                .then(auth => auth.addAuthTokenListener(listener));\r\n        }\r\n    }\r\n    removeTokenChangeListener(listener) {\r\n        this.authProvider_\r\n            .get()\r\n            .then(auth => auth.removeAuthTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        let errorMessage = 'Provided authentication credentials for the app named \"' +\r\n            this.appName_ +\r\n            '\" are invalid. This usually indicates your app was not ' +\r\n            'initialized correctly. ';\r\n        if ('credential' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"credential\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else if ('serviceAccount' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else {\r\n            errorMessage +=\r\n                'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\r\n                    'initializeApp() match the values provided for your app at ' +\r\n                    'https://console.firebase.google.com/.';\r\n        }\r\n        warn(errorMessage);\r\n    }\r\n}\r\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\r\nclass EmulatorTokenProvider {\r\n    constructor(accessToken) {\r\n        this.accessToken = accessToken;\r\n    }\r\n    getToken(forceRefresh) {\r\n        return Promise.resolve({\r\n            accessToken: this.accessToken\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // Invoke the listener immediately to match the behavior in Firebase Auth\r\n        // (see packages/auth/src/auth.js#L1807)\r\n        listener(this.accessToken);\r\n    }\r\n    removeTokenChangeListener(listener) { }\r\n    notifyForInvalidToken() { }\r\n}\r\n/** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\r\nEmulatorTokenProvider.OWNER = 'owner';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PROTOCOL_VERSION = '5';\r\nconst VERSION_PARAM = 'v';\r\nconst TRANSPORT_SESSION_PARAM = 's';\r\nconst REFERER_PARAM = 'r';\r\nconst FORGE_REF = 'f';\r\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\r\n// firebase.corp.google.com\r\nconst FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\r\nconst LAST_SESSION_PARAM = 'ls';\r\nconst APPLICATION_ID_PARAM = 'p';\r\nconst APP_CHECK_TOKEN_PARAM = 'ac';\r\nconst WEBSOCKET = 'websocket';\r\nconst LONG_POLLING = 'long_polling';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A class that holds metadata about a Repo object\r\n */\r\nclass RepoInfo {\r\n    /**\r\n     * @param host - Hostname portion of the url for the repo\r\n     * @param secure - Whether or not this repo is accessed over ssl\r\n     * @param namespace - The namespace represented by the repo\r\n     * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\r\n     * @param nodeAdmin - Whether this instance uses Admin SDK credentials\r\n     * @param persistenceKey - Override the default session persistence storage key\r\n     */\r\n    constructor(host, secure, namespace, webSocketOnly, nodeAdmin = false, persistenceKey = '', includeNamespaceInQueryParams = false) {\r\n        this.secure = secure;\r\n        this.namespace = namespace;\r\n        this.webSocketOnly = webSocketOnly;\r\n        this.nodeAdmin = nodeAdmin;\r\n        this.persistenceKey = persistenceKey;\r\n        this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\r\n        this._host = host.toLowerCase();\r\n        this._domain = this._host.substr(this._host.indexOf('.') + 1);\r\n        this.internalHost =\r\n            PersistentStorage.get('host:' + host) || this._host;\r\n    }\r\n    isCacheableHost() {\r\n        return this.internalHost.substr(0, 2) === 's-';\r\n    }\r\n    isCustomHost() {\r\n        return (this._domain !== 'firebaseio.com' &&\r\n            this._domain !== 'firebaseio-demo.com');\r\n    }\r\n    get host() {\r\n        return this._host;\r\n    }\r\n    set host(newHost) {\r\n        if (newHost !== this.internalHost) {\r\n            this.internalHost = newHost;\r\n            if (this.isCacheableHost()) {\r\n                PersistentStorage.set('host:' + this._host, this.internalHost);\r\n            }\r\n        }\r\n    }\r\n    toString() {\r\n        let str = this.toURLString();\r\n        if (this.persistenceKey) {\r\n            str += '<' + this.persistenceKey + '>';\r\n        }\r\n        return str;\r\n    }\r\n    toURLString() {\r\n        const protocol = this.secure ? 'https://' : 'http://';\r\n        const query = this.includeNamespaceInQueryParams\r\n            ? `?ns=${this.namespace}`\r\n            : '';\r\n        return `${protocol}${this.host}/${query}`;\r\n    }\r\n}\r\nfunction repoInfoNeedsQueryParam(repoInfo) {\r\n    return (repoInfo.host !== repoInfo.internalHost ||\r\n        repoInfo.isCustomHost() ||\r\n        repoInfo.includeNamespaceInQueryParams);\r\n}\r\n/**\r\n * Returns the websocket URL for this repo\r\n * @param repoInfo - RepoInfo object\r\n * @param type - of connection\r\n * @param params - list\r\n * @returns The URL for this repo\r\n */\r\nfunction repoInfoConnectionURL(repoInfo, type, params) {\r\n    assert(typeof type === 'string', 'typeof type must == string');\r\n    assert(typeof params === 'object', 'typeof params must == object');\r\n    let connURL;\r\n    if (type === WEBSOCKET) {\r\n        connURL =\r\n            (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\r\n    }\r\n    else if (type === LONG_POLLING) {\r\n        connURL =\r\n            (repoInfo.secure ? 'https://' : 'http://') +\r\n                repoInfo.internalHost +\r\n                '/.lp?';\r\n    }\r\n    else {\r\n        throw new Error('Unknown connection type: ' + type);\r\n    }\r\n    if (repoInfoNeedsQueryParam(repoInfo)) {\r\n        params['ns'] = repoInfo.namespace;\r\n    }\r\n    const pairs = [];\r\n    each(params, (key, value) => {\r\n        pairs.push(key + '=' + value);\r\n    });\r\n    return connURL + pairs.join('&');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Tracks a collection of stats.\r\n */\r\nclass StatsCollection {\r\n    constructor() {\r\n        this.counters_ = {};\r\n    }\r\n    incrementCounter(name, amount = 1) {\r\n        if (!contains(this.counters_, name)) {\r\n            this.counters_[name] = 0;\r\n        }\r\n        this.counters_[name] += amount;\r\n    }\r\n    get() {\r\n        return deepCopy(this.counters_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst collections = {};\r\nconst reporters = {};\r\nfunction statsManagerGetCollection(repoInfo) {\r\n    const hashString = repoInfo.toString();\r\n    if (!collections[hashString]) {\r\n        collections[hashString] = new StatsCollection();\r\n    }\r\n    return collections[hashString];\r\n}\r\nfunction statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {\r\n    const hashString = repoInfo.toString();\r\n    if (!reporters[hashString]) {\r\n        reporters[hashString] = creatorFunction();\r\n    }\r\n    return reporters[hashString];\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n */\r\nclass PacketReceiver {\r\n    /**\r\n     * @param onMessage_\r\n     */\r\n    constructor(onMessage_) {\r\n        this.onMessage_ = onMessage_;\r\n        this.pendingResponses = [];\r\n        this.currentResponseNum = 0;\r\n        this.closeAfterResponse = -1;\r\n        this.onClose = null;\r\n    }\r\n    closeAfter(responseNum, callback) {\r\n        this.closeAfterResponse = responseNum;\r\n        this.onClose = callback;\r\n        if (this.closeAfterResponse < this.currentResponseNum) {\r\n            this.onClose();\r\n            this.onClose = null;\r\n        }\r\n    }\r\n    /**\r\n     * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n     * browsers will respond in the same order as the requests we sent\r\n     */\r\n    handleResponse(requestNum, data) {\r\n        this.pendingResponses[requestNum] = data;\r\n        while (this.pendingResponses[this.currentResponseNum]) {\r\n            const toProcess = this.pendingResponses[this.currentResponseNum];\r\n            delete this.pendingResponses[this.currentResponseNum];\r\n            for (let i = 0; i < toProcess.length; ++i) {\r\n                if (toProcess[i]) {\r\n                    exceptionGuard(() => {\r\n                        this.onMessage_(toProcess[i]);\r\n                    });\r\n                }\r\n            }\r\n            if (this.currentResponseNum === this.closeAfterResponse) {\r\n                if (this.onClose) {\r\n                    this.onClose();\r\n                    this.onClose = null;\r\n                }\r\n                break;\r\n            }\r\n            this.currentResponseNum++;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// URL query parameters associated with longpolling\r\nconst FIREBASE_LONGPOLL_START_PARAM = 'start';\r\nconst FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\r\nconst FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\r\nconst FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\r\nconst FIREBASE_LONGPOLL_ID_PARAM = 'id';\r\nconst FIREBASE_LONGPOLL_PW_PARAM = 'pw';\r\nconst FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\r\nconst FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\r\nconst FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\r\nconst FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\r\nconst FIREBASE_LONGPOLL_DATA_PARAM = 'd';\r\nconst FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\r\n//Data size constants.\r\n//TODO: Perf: the maximum length actually differs from browser to browser.\r\n// We should check what browser we're on and set accordingly.\r\nconst MAX_URL_DATA_SIZE = 1870;\r\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\r\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\r\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n */\r\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\r\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n */\r\nconst LP_CONNECT_TIMEOUT = 30000;\r\n/**\r\n * This class manages a single long-polling connection.\r\n */\r\nclass BrowserPollConnection {\r\n    /**\r\n     * @param connId An identifier for this connection, used for logging\r\n     * @param repoInfo The info for the endpoint to send data to.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The AppCheck token for this client.\r\n     * @param authToken The AuthToken to use for this connection.\r\n     * @param transportSessionId Optional transportSessionid if we are\r\n     * reconnecting for an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if the PersistentConnection has\r\n     * already created a connection previously\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.repoInfo = repoInfo;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.transportSessionId = transportSessionId;\r\n        this.lastSessionId = lastSessionId;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.everConnected_ = false;\r\n        this.log_ = logWrapper(connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.urlFn = (params) => {\r\n            // Always add the token if we have one.\r\n            if (this.appCheckToken) {\r\n                params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\r\n        };\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.curSegmentNum = 0;\r\n        this.onDisconnect_ = onDisconnect;\r\n        this.myPacketOrderer = new PacketReceiver(onMessage);\r\n        this.isClosed_ = false;\r\n        this.connectTimeoutTimer_ = setTimeout(() => {\r\n            this.log_('Timed out trying to connect.');\r\n            // Make sure we clear the host cache\r\n            this.onClosed_();\r\n            this.connectTimeoutTimer_ = null;\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(LP_CONNECT_TIMEOUT));\r\n        // Ensure we delay the creation of the iframe until the DOM is loaded.\r\n        executeWhenDOMReady(() => {\r\n            if (this.isClosed_) {\r\n                return;\r\n            }\r\n            //Set up a callback that gets triggered once a connection is set up.\r\n            this.scriptTagHolder = new FirebaseIFrameScriptHolder((...args) => {\r\n                const [command, arg1, arg2, arg3, arg4] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                if (!this.scriptTagHolder) {\r\n                    return; // we closed the connection.\r\n                }\r\n                if (this.connectTimeoutTimer_) {\r\n                    clearTimeout(this.connectTimeoutTimer_);\r\n                    this.connectTimeoutTimer_ = null;\r\n                }\r\n                this.everConnected_ = true;\r\n                if (command === FIREBASE_LONGPOLL_START_PARAM) {\r\n                    this.id = arg1;\r\n                    this.password = arg2;\r\n                }\r\n                else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\r\n                    // Don't clear the host cache. We got a response from the server, so we know it's reachable\r\n                    if (arg1) {\r\n                        // We aren't expecting any more data (other than what the server's already in the process of sending us\r\n                        // through our already open polls), so don't send any more.\r\n                        this.scriptTagHolder.sendNewPolls = false;\r\n                        // arg1 in this case is the last response number sent by the server. We should try to receive\r\n                        // all of the responses up to this one before closing\r\n                        this.myPacketOrderer.closeAfter(arg1, () => {\r\n                            this.onClosed_();\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.onClosed_();\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error('Unrecognized command received: ' + command);\r\n                }\r\n            }, (...args) => {\r\n                const [pN, data] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                this.myPacketOrderer.handleResponse(pN, data);\r\n            }, () => {\r\n                this.onClosed_();\r\n            }, this.urlFn);\r\n            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\r\n            //from cache.\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\r\n            if (this.scriptTagHolder.uniqueCallbackIdentifier) {\r\n                urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\r\n                    this.scriptTagHolder.uniqueCallbackIdentifier;\r\n            }\r\n            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n            if (this.transportSessionId) {\r\n                urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\r\n            }\r\n            if (this.lastSessionId) {\r\n                urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\r\n            }\r\n            if (this.applicationId) {\r\n                urlParams[APPLICATION_ID_PARAM] = this.applicationId;\r\n            }\r\n            if (this.appCheckToken) {\r\n                urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            if (typeof location !== 'undefined' &&\r\n                location.hostname &&\r\n                FORGE_DOMAIN_RE.test(location.hostname)) {\r\n                urlParams[REFERER_PARAM] = FORGE_REF;\r\n            }\r\n            const connectURL = this.urlFn(urlParams);\r\n            this.log_('Connecting via long-poll to ' + connectURL);\r\n            this.scriptTagHolder.addTag(connectURL, () => {\r\n                /* do nothing */\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Call this when a handshake has completed successfully and we want to consider the connection established\r\n     */\r\n    start() {\r\n        this.scriptTagHolder.startLongPoll(this.id, this.password);\r\n        this.addDisconnectPingFrame(this.id, this.password);\r\n    }\r\n    /**\r\n     * Forces long polling to be considered as a potential transport\r\n     */\r\n    static forceAllow() {\r\n        BrowserPollConnection.forceAllow_ = true;\r\n    }\r\n    /**\r\n     * Forces longpolling to not be considered as a potential transport\r\n     */\r\n    static forceDisallow() {\r\n        BrowserPollConnection.forceDisallow_ = true;\r\n    }\r\n    // Static method, use string literal so it can be accessed in a generic way\r\n    static isAvailable() {\r\n        if (isNodeSdk()) {\r\n            return false;\r\n        }\r\n        else if (BrowserPollConnection.forceAllow_) {\r\n            return true;\r\n        }\r\n        else {\r\n            // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\r\n            // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\r\n            return (!BrowserPollConnection.forceDisallow_ &&\r\n                typeof document !== 'undefined' &&\r\n                document.createElement != null &&\r\n                !isChromeExtensionContentScript() &&\r\n                !isWindowsStoreApp());\r\n        }\r\n    }\r\n    /**\r\n     * No-op for polling\r\n     */\r\n    markConnectionHealthy() { }\r\n    /**\r\n     * Stops polling and cleans up the iframe\r\n     */\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.scriptTagHolder) {\r\n            this.scriptTagHolder.close();\r\n            this.scriptTagHolder = null;\r\n        }\r\n        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\r\n        if (this.myDisconnFrame) {\r\n            document.body.removeChild(this.myDisconnFrame);\r\n            this.myDisconnFrame = null;\r\n        }\r\n        if (this.connectTimeoutTimer_) {\r\n            clearTimeout(this.connectTimeoutTimer_);\r\n            this.connectTimeoutTimer_ = null;\r\n        }\r\n    }\r\n    /**\r\n     * Triggered when this transport is closed\r\n     */\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is closing itself');\r\n            this.shutdown_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_(this.everConnected_);\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n     * that we've left.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is being closed.');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n     * broken into chunks (since URLs have a small maximum length).\r\n     * @param data - The JSON data to transmit.\r\n     */\r\n    send(data) {\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //first, lets get the base64-encoded data\r\n        const base64data = base64Encode(dataStr);\r\n        //We can only fit a certain amount in each URL, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\r\n        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\r\n        //of segments so that we can reassemble the packet on the server.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\r\n            this.curSegmentNum++;\r\n        }\r\n    }\r\n    /**\r\n     * This is how we notify the server that we're leaving.\r\n     * We aren't able to send requests with DHTML on a window close event, but we can\r\n     * trigger XHR requests in some browsers (everything but Opera basically).\r\n     */\r\n    addDisconnectPingFrame(id, pw) {\r\n        if (isNodeSdk()) {\r\n            return;\r\n        }\r\n        this.myDisconnFrame = document.createElement('iframe');\r\n        const urlParams = {};\r\n        urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\r\n        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\r\n        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\r\n        this.myDisconnFrame.src = this.urlFn(urlParams);\r\n        this.myDisconnFrame.style.display = 'none';\r\n        document.body.appendChild(this.myDisconnFrame);\r\n    }\r\n    /**\r\n     * Used to track the bytes received by this client\r\n     */\r\n    incrementIncomingBytes_(args) {\r\n        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\r\n        const bytesReceived = stringify(args).length;\r\n        this.bytesReceived += bytesReceived;\r\n        this.stats_.incrementCounter('bytes_received', bytesReceived);\r\n    }\r\n}\r\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n *********************************************************************************************/\r\nclass FirebaseIFrameScriptHolder {\r\n    /**\r\n     * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n     * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n     * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n     * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n     */\r\n    constructor(commandCB, onMessageCB, onDisconnect, urlFn) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.urlFn = urlFn;\r\n        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\r\n        //problems in some browsers.\r\n        this.outstandingRequests = new Set();\r\n        //A queue of the pending segments waiting for transmission to the server.\r\n        this.pendingSegs = [];\r\n        //A serial number. We use this for two things:\r\n        // 1) A way to ensure the browser doesn't cache responses to polls\r\n        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\r\n        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\r\n        //    JSONP code in the order it was added to the iframe.\r\n        this.currentSerial = Math.floor(Math.random() * 100000000);\r\n        // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\r\n        // incoming data from the server that we're waiting for).\r\n        this.sendNewPolls = true;\r\n        if (!isNodeSdk()) {\r\n            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\r\n            //iframes where we put the long-polling script tags. We have two callbacks:\r\n            //   1) Command Callback - Triggered for control issues, like starting a connection.\r\n            //   2) Message Callback - Triggered when new data arrives.\r\n            this.uniqueCallbackIdentifier = LUIDGenerator();\r\n            window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\r\n            window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\r\n                onMessageCB;\r\n            //Create an iframe for us to add script tags to.\r\n            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\r\n            // Set the iframe's contents.\r\n            let script = '';\r\n            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\r\n            // for ie9, but ie8 needs to do it again in the document itself.\r\n            if (this.myIFrame.src &&\r\n                this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\r\n                const currentDomain = document.domain;\r\n                script = '<script>document.domain=\"' + currentDomain + '\";</script>';\r\n            }\r\n            const iframeContents = '<html><body>' + script + '</body></html>';\r\n            try {\r\n                this.myIFrame.doc.open();\r\n                this.myIFrame.doc.write(iframeContents);\r\n                this.myIFrame.doc.close();\r\n            }\r\n            catch (e) {\r\n                log('frame writing exception');\r\n                if (e.stack) {\r\n                    log(e.stack);\r\n                }\r\n                log(e);\r\n            }\r\n        }\r\n        else {\r\n            this.commandCB = commandCB;\r\n            this.onMessageCB = onMessageCB;\r\n        }\r\n    }\r\n    /**\r\n     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n     * actually use.\r\n     */\r\n    static createIFrame_() {\r\n        const iframe = document.createElement('iframe');\r\n        iframe.style.display = 'none';\r\n        // This is necessary in order to initialize the document inside the iframe\r\n        if (document.body) {\r\n            document.body.appendChild(iframe);\r\n            try {\r\n                // If document.domain has been modified in IE, this will throw an error, and we need to set the\r\n                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\r\n                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\r\n                const a = iframe.contentWindow.document;\r\n                if (!a) {\r\n                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\r\n                    log('No IE domain setting required');\r\n                }\r\n            }\r\n            catch (e) {\r\n                const domain = document.domain;\r\n                iframe.src =\r\n                    \"javascript:void((function(){document.open();document.domain='\" +\r\n                        domain +\r\n                        \"';document.close();})())\";\r\n            }\r\n        }\r\n        else {\r\n            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\r\n            // never gets hit.\r\n            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\r\n        }\r\n        // Get the document of the iframe in a browser-specific way.\r\n        if (iframe.contentDocument) {\r\n            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\r\n        }\r\n        else if (iframe.contentWindow) {\r\n            iframe.doc = iframe.contentWindow.document; // Internet Explorer\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (iframe.document) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            iframe.doc = iframe.document; //others?\r\n        }\r\n        return iframe;\r\n    }\r\n    /**\r\n     * Cancel all outstanding queries and remove the frame.\r\n     */\r\n    close() {\r\n        //Mark this iframe as dead, so no new requests are sent.\r\n        this.alive = false;\r\n        if (this.myIFrame) {\r\n            //We have to actually remove all of the html inside this iframe before removing it from the\r\n            //window, or IE will continue loading and executing the script tags we've already added, which\r\n            //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\r\n            this.myIFrame.doc.body.innerHTML = '';\r\n            setTimeout(() => {\r\n                if (this.myIFrame !== null) {\r\n                    document.body.removeChild(this.myIFrame);\r\n                    this.myIFrame = null;\r\n                }\r\n            }, Math.floor(0));\r\n        }\r\n        // Protect from being called recursively.\r\n        const onDisconnect = this.onDisconnect;\r\n        if (onDisconnect) {\r\n            this.onDisconnect = null;\r\n            onDisconnect();\r\n        }\r\n    }\r\n    /**\r\n     * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n     * @param id - The ID of this connection\r\n     * @param pw - The password for this connection\r\n     */\r\n    startLongPoll(id, pw) {\r\n        this.myID = id;\r\n        this.myPW = pw;\r\n        this.alive = true;\r\n        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\r\n        while (this.newRequest_()) { }\r\n    }\r\n    /**\r\n     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n     * too many outstanding requests and we are still alive.\r\n     *\r\n     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n     * needed.\r\n     */\r\n    newRequest_() {\r\n        // We keep one outstanding request open all the time to receive data, but if we need to send data\r\n        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\r\n        // close the old request.\r\n        if (this.alive &&\r\n            this.sendNewPolls &&\r\n            this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\r\n            //construct our url\r\n            this.currentSerial++;\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\r\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\r\n            let theURL = this.urlFn(urlParams);\r\n            //Now add as much data as we can.\r\n            let curDataString = '';\r\n            let i = 0;\r\n            while (this.pendingSegs.length > 0) {\r\n                //first, lets see if the next segment will fit.\r\n                const nextSeg = this.pendingSegs[0];\r\n                if (nextSeg.d.length +\r\n                    SEG_HEADER_SIZE +\r\n                    curDataString.length <=\r\n                    MAX_URL_DATA_SIZE) {\r\n                    //great, the segment will fit. Lets append it.\r\n                    const theSeg = this.pendingSegs.shift();\r\n                    curDataString =\r\n                        curDataString +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.seg +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.ts +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_DATA_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.d;\r\n                    i++;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            theURL = theURL + curDataString;\r\n            this.addLongPollTag_(theURL, this.currentSerial);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * Queue a packet for transmission to the server.\r\n     * @param segnum - A sequential id for this packet segment used for reassembly\r\n     * @param totalsegs - The total number of segments in this packet\r\n     * @param data - The data for this segment.\r\n     */\r\n    enqueueSegment(segnum, totalsegs, data) {\r\n        //add this to the queue of segments to send.\r\n        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\r\n        //send the data immediately if there isn't already data being transmitted, unless\r\n        //startLongPoll hasn't been called yet.\r\n        if (this.alive) {\r\n            this.newRequest_();\r\n        }\r\n    }\r\n    /**\r\n     * Add a script tag for a regular long-poll request.\r\n     * @param url - The URL of the script tag.\r\n     * @param serial - The serial number of the request.\r\n     */\r\n    addLongPollTag_(url, serial) {\r\n        //remember that we sent this request.\r\n        this.outstandingRequests.add(serial);\r\n        const doNewRequest = () => {\r\n            this.outstandingRequests.delete(serial);\r\n            this.newRequest_();\r\n        };\r\n        // If this request doesn't return on its own accord (by the server sending us some data), we'll\r\n        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\r\n        const keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\r\n        const readyStateCB = () => {\r\n            // Request completed.  Cancel the keepalive.\r\n            clearTimeout(keepaliveTimeout);\r\n            // Trigger a new request so we can continue receiving data.\r\n            doNewRequest();\r\n        };\r\n        this.addTag(url, readyStateCB);\r\n    }\r\n    /**\r\n     * Add an arbitrary script tag to the iframe.\r\n     * @param url - The URL for the script tag source.\r\n     * @param loadCB - A callback to be triggered once the script has loaded.\r\n     */\r\n    addTag(url, loadCB) {\r\n        if (isNodeSdk()) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            this.doNodeLongPoll(url, loadCB);\r\n        }\r\n        else {\r\n            setTimeout(() => {\r\n                try {\r\n                    // if we're already closed, don't add this poll\r\n                    if (!this.sendNewPolls) {\r\n                        return;\r\n                    }\r\n                    const newScript = this.myIFrame.doc.createElement('script');\r\n                    newScript.type = 'text/javascript';\r\n                    newScript.async = true;\r\n                    newScript.src = url;\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    newScript.onload = newScript.onreadystatechange =\r\n                        function () {\r\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                            const rstate = newScript.readyState;\r\n                            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\r\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                                newScript.onload = newScript.onreadystatechange = null;\r\n                                if (newScript.parentNode) {\r\n                                    newScript.parentNode.removeChild(newScript);\r\n                                }\r\n                                loadCB();\r\n                            }\r\n                        };\r\n                    newScript.onerror = () => {\r\n                        log('Long-poll script failed to load: ' + url);\r\n                        this.sendNewPolls = false;\r\n                        this.close();\r\n                    };\r\n                    this.myIFrame.doc.body.appendChild(newScript);\r\n                }\r\n                catch (e) {\r\n                    // TODO: we should make this error visible somehow\r\n                }\r\n            }, Math.floor(1));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\r\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\r\nlet WebSocketImpl = null;\r\nif (typeof MozWebSocket !== 'undefined') {\r\n    WebSocketImpl = MozWebSocket;\r\n}\r\nelse if (typeof WebSocket !== 'undefined') {\r\n    WebSocketImpl = WebSocket;\r\n}\r\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n */\r\nclass WebSocketConnection {\r\n    /**\r\n     * @param connId identifier for this transport\r\n     * @param repoInfo The info for the websocket endpoint.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The App Check Token for this client.\r\n     * @param authToken The Auth Token for this client.\r\n     * @param transportSessionId Optional transportSessionId if this is connecting\r\n     * to an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if there was a previous\r\n     * connection\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.keepaliveTimer = null;\r\n        this.frames = null;\r\n        this.totalFrames = 0;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.log_ = logWrapper(this.connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken);\r\n        this.nodeAdmin = repoInfo.nodeAdmin;\r\n    }\r\n    /**\r\n     * @param repoInfo - The info for the websocket endpoint.\r\n     * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param lastSessionId - Optional lastSessionId if there was a previous connection\r\n     * @returns connection url\r\n     */\r\n    static connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken) {\r\n        const urlParams = {};\r\n        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n        if (!isNodeSdk() &&\r\n            typeof location !== 'undefined' &&\r\n            location.hostname &&\r\n            FORGE_DOMAIN_RE.test(location.hostname)) {\r\n            urlParams[REFERER_PARAM] = FORGE_REF;\r\n        }\r\n        if (transportSessionId) {\r\n            urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\r\n        }\r\n        if (lastSessionId) {\r\n            urlParams[LAST_SESSION_PARAM] = lastSessionId;\r\n        }\r\n        if (appCheckToken) {\r\n            urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\r\n        }\r\n        return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.onMessage = onMessage;\r\n        this.log_('Websocket connecting to ' + this.connURL);\r\n        this.everConnected_ = false;\r\n        // Assume failure until proven otherwise.\r\n        PersistentStorage.set('previous_websocket_failure', true);\r\n        try {\r\n            if (isNodeSdk()) {\r\n                const device = this.nodeAdmin ? 'AdminNode' : 'Node';\r\n                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\r\n                const options = {\r\n                    headers: {\r\n                        'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\r\n                        'X-Firebase-GMPID': this.applicationId || ''\r\n                    }\r\n                };\r\n                // If using Node with admin creds, AppCheck-related checks are unnecessary.\r\n                // Note that we send the credentials here even if they aren't admin credentials, which is\r\n                // not a problem.\r\n                // Note that this header is just used to bypass appcheck, and the token should still be sent\r\n                // through the websocket connection once it is established.\r\n                if (this.authToken) {\r\n                    options.headers['Authorization'] = `Bearer ${this.authToken}`;\r\n                }\r\n                if (this.appCheckToken) {\r\n                    options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\r\n                }\r\n                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\r\n                const env = process['env'];\r\n                const proxy = this.connURL.indexOf('wss://') === 0\r\n                    ? env['HTTPS_PROXY'] || env['https_proxy']\r\n                    : env['HTTP_PROXY'] || env['http_proxy'];\r\n                if (proxy) {\r\n                    options['proxy'] = { origin: proxy };\r\n                }\r\n                this.mySock = new WebSocketImpl(this.connURL, [], options);\r\n            }\r\n            else {\r\n                const options = {\r\n                    headers: {\r\n                        'X-Firebase-GMPID': this.applicationId || '',\r\n                        'X-Firebase-AppCheck': this.appCheckToken || ''\r\n                    }\r\n                };\r\n                this.mySock = new WebSocketImpl(this.connURL, [], options);\r\n            }\r\n        }\r\n        catch (e) {\r\n            this.log_('Error instantiating WebSocket.');\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n            return;\r\n        }\r\n        this.mySock.onopen = () => {\r\n            this.log_('Websocket connected.');\r\n            this.everConnected_ = true;\r\n        };\r\n        this.mySock.onclose = () => {\r\n            this.log_('Websocket connection was disconnected.');\r\n            this.mySock = null;\r\n            this.onClosed_();\r\n        };\r\n        this.mySock.onmessage = m => {\r\n            this.handleIncomingFrame(m);\r\n        };\r\n        this.mySock.onerror = e => {\r\n            this.log_('WebSocket error.  Closing connection.');\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n        };\r\n    }\r\n    /**\r\n     * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n     */\r\n    start() { }\r\n    static forceDisallow() {\r\n        WebSocketConnection.forceDisallow_ = true;\r\n    }\r\n    static isAvailable() {\r\n        let isOldAndroid = false;\r\n        if (typeof navigator !== 'undefined' && navigator.userAgent) {\r\n            const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\r\n            const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\r\n            if (oldAndroidMatch && oldAndroidMatch.length > 1) {\r\n                if (parseFloat(oldAndroidMatch[1]) < 4.4) {\r\n                    isOldAndroid = true;\r\n                }\r\n            }\r\n        }\r\n        return (!isOldAndroid &&\r\n            WebSocketImpl !== null &&\r\n            !WebSocketConnection.forceDisallow_);\r\n    }\r\n    /**\r\n     * Returns true if we previously failed to connect with this transport.\r\n     */\r\n    static previouslyFailed() {\r\n        // If our persistent storage is actually only in-memory storage,\r\n        // we default to assuming that it previously failed to be safe.\r\n        return (PersistentStorage.isInMemoryStorage ||\r\n            PersistentStorage.get('previous_websocket_failure') === true);\r\n    }\r\n    markConnectionHealthy() {\r\n        PersistentStorage.remove('previous_websocket_failure');\r\n    }\r\n    appendFrame_(data) {\r\n        this.frames.push(data);\r\n        if (this.frames.length === this.totalFrames) {\r\n            const fullMess = this.frames.join('');\r\n            this.frames = null;\r\n            const jsonMess = jsonEval(fullMess);\r\n            //handle the message\r\n            this.onMessage(jsonMess);\r\n        }\r\n    }\r\n    /**\r\n     * @param frameCount - The number of frames we are expecting from the server\r\n     */\r\n    handleNewFrameCount_(frameCount) {\r\n        this.totalFrames = frameCount;\r\n        this.frames = [];\r\n    }\r\n    /**\r\n     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n     * @returns Any remaining data to be process, or null if there is none\r\n     */\r\n    extractFrameCount_(data) {\r\n        assert(this.frames === null, 'We already have a frame buffer');\r\n        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\r\n        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\r\n        if (data.length <= 6) {\r\n            const frameCount = Number(data);\r\n            if (!isNaN(frameCount)) {\r\n                this.handleNewFrameCount_(frameCount);\r\n                return null;\r\n            }\r\n        }\r\n        this.handleNewFrameCount_(1);\r\n        return data;\r\n    }\r\n    /**\r\n     * Process a websocket frame that has arrived from the server.\r\n     * @param mess - The frame data\r\n     */\r\n    handleIncomingFrame(mess) {\r\n        if (this.mySock === null) {\r\n            return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\r\n        }\r\n        const data = mess['data'];\r\n        this.bytesReceived += data.length;\r\n        this.stats_.incrementCounter('bytes_received', data.length);\r\n        this.resetKeepAlive();\r\n        if (this.frames !== null) {\r\n            // we're buffering\r\n            this.appendFrame_(data);\r\n        }\r\n        else {\r\n            // try to parse out a frame count, otherwise, assume 1 and process it\r\n            const remainingData = this.extractFrameCount_(data);\r\n            if (remainingData !== null) {\r\n                this.appendFrame_(remainingData);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Send a message to the server\r\n     * @param data - The JSON object to transmit\r\n     */\r\n    send(data) {\r\n        this.resetKeepAlive();\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //We can only fit a certain amount in each websocket frame, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\r\n        //Send the length header\r\n        if (dataSegs.length > 1) {\r\n            this.sendString_(String(dataSegs.length));\r\n        }\r\n        //Send the actual data in segments.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.sendString_(dataSegs[i]);\r\n        }\r\n    }\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.keepaliveTimer) {\r\n            clearInterval(this.keepaliveTimer);\r\n            this.keepaliveTimer = null;\r\n        }\r\n        if (this.mySock) {\r\n            this.mySock.close();\r\n            this.mySock = null;\r\n        }\r\n    }\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is closing itself');\r\n            this.shutdown_();\r\n            // since this is an internal close, trigger the close listener\r\n            if (this.onDisconnect) {\r\n                this.onDisconnect(this.everConnected_);\r\n                this.onDisconnect = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler.\r\n     * Close the websocket and kill the connection.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is being closed');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n     * the last activity.\r\n     */\r\n    resetKeepAlive() {\r\n        clearInterval(this.keepaliveTimer);\r\n        this.keepaliveTimer = setInterval(() => {\r\n            //If there has been no websocket activity for a while, send a no-op\r\n            if (this.mySock) {\r\n                this.sendString_('0');\r\n            }\r\n            this.resetKeepAlive();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\r\n    }\r\n    /**\r\n     * Send a string over the websocket.\r\n     *\r\n     * @param str - String to send.\r\n     */\r\n    sendString_(str) {\r\n        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\r\n        // calls for some unknown reason.  We treat these as an error and disconnect.\r\n        // See https://app.asana.com/0/58926111402292/68021340250410\r\n        try {\r\n            this.mySock.send(str);\r\n        }\r\n        catch (e) {\r\n            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\r\n            setTimeout(this.onClosed_.bind(this), 0);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Number of response before we consider the connection \"healthy.\"\r\n */\r\nWebSocketConnection.responsesRequiredToBeHealthy = 2;\r\n/**\r\n * Time to wait for the connection te become healthy before giving up.\r\n */\r\nWebSocketConnection.healthyTimeout = 30000;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n */\r\nclass TransportManager {\r\n    /**\r\n     * @param repoInfo - Metadata around the namespace we're connecting to\r\n     */\r\n    constructor(repoInfo) {\r\n        this.initTransports_(repoInfo);\r\n    }\r\n    static get ALL_TRANSPORTS() {\r\n        return [BrowserPollConnection, WebSocketConnection];\r\n    }\r\n    initTransports_(repoInfo) {\r\n        const isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\r\n        let isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\r\n        if (repoInfo.webSocketOnly) {\r\n            if (!isWebSocketsAvailable) {\r\n                warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\r\n            }\r\n            isSkipPollConnection = true;\r\n        }\r\n        if (isSkipPollConnection) {\r\n            this.transports_ = [WebSocketConnection];\r\n        }\r\n        else {\r\n            const transports = (this.transports_ = []);\r\n            for (const transport of TransportManager.ALL_TRANSPORTS) {\r\n                if (transport && transport['isAvailable']()) {\r\n                    transports.push(transport);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the initial transport to use\r\n     */\r\n    initialTransport() {\r\n        if (this.transports_.length > 0) {\r\n            return this.transports_[0];\r\n        }\r\n        else {\r\n            throw new Error('No transports available');\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the next transport, or null\r\n     */\r\n    upgradeTransport() {\r\n        if (this.transports_.length > 1) {\r\n            return this.transports_[1];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Abort upgrade attempt if it takes longer than 60s.\r\nconst UPGRADE_TIMEOUT = 60000;\r\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\r\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\r\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\r\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\r\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\r\n// but we've sent/received enough bytes, we don't cancel the connection.\r\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\r\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\r\nconst MESSAGE_TYPE = 't';\r\nconst MESSAGE_DATA = 'd';\r\nconst CONTROL_SHUTDOWN = 's';\r\nconst CONTROL_RESET = 'r';\r\nconst CONTROL_ERROR = 'e';\r\nconst CONTROL_PONG = 'o';\r\nconst SWITCH_ACK = 'a';\r\nconst END_TRANSMISSION = 'n';\r\nconst PING = 'p';\r\nconst SERVER_HELLO = 'h';\r\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n */\r\nclass Connection {\r\n    /**\r\n     * @param id - an id for this connection\r\n     * @param repoInfo_ - the info for the endpoint to connect to\r\n     * @param applicationId_ - the Firebase App ID for this project\r\n     * @param appCheckToken_ - The App Check Token for this device.\r\n     * @param authToken_ - The auth token for this session.\r\n     * @param onMessage_ - the callback to be triggered when a server-push message arrives\r\n     * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n     * @param onDisconnect_ - the callback to be triggered when a connection was lost\r\n     * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n     * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n     */\r\n    constructor(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\r\n        this.id = id;\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.appCheckToken_ = appCheckToken_;\r\n        this.authToken_ = authToken_;\r\n        this.onMessage_ = onMessage_;\r\n        this.onReady_ = onReady_;\r\n        this.onDisconnect_ = onDisconnect_;\r\n        this.onKill_ = onKill_;\r\n        this.lastSessionId = lastSessionId;\r\n        this.connectionCount = 0;\r\n        this.pendingDataMessages = [];\r\n        this.state_ = 0 /* CONNECTING */;\r\n        this.log_ = logWrapper('c:' + this.id + ':');\r\n        this.transportManager_ = new TransportManager(repoInfo_);\r\n        this.log_('Connection created');\r\n        this.start_();\r\n    }\r\n    /**\r\n     * Starts a connection attempt\r\n     */\r\n    start_() {\r\n        const conn = this.transportManager_.initialTransport();\r\n        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessageReceived = this.connReceiver_(this.conn_);\r\n        const onConnectionLost = this.disconnReceiver_(this.conn_);\r\n        this.tx_ = this.conn_;\r\n        this.rx_ = this.conn_;\r\n        this.secondaryConn_ = null;\r\n        this.isHealthy_ = false;\r\n        /*\r\n         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n         * still have the context of your originating frame.\r\n         */\r\n        setTimeout(() => {\r\n            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\r\n            this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\r\n        }, Math.floor(0));\r\n        const healthyTimeoutMS = conn['healthyTimeout'] || 0;\r\n        if (healthyTimeoutMS > 0) {\r\n            this.healthyTimeout_ = setTimeoutNonBlocking(() => {\r\n                this.healthyTimeout_ = null;\r\n                if (!this.isHealthy_) {\r\n                    if (this.conn_ &&\r\n                        this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has received ' +\r\n                            this.conn_.bytesReceived +\r\n                            ' bytes.  Marking connection healthy.');\r\n                        this.isHealthy_ = true;\r\n                        this.conn_.markConnectionHealthy();\r\n                    }\r\n                    else if (this.conn_ &&\r\n                        this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has sent ' +\r\n                            this.conn_.bytesSent +\r\n                            ' bytes.  Leaving connection alive.');\r\n                        // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\r\n                        // the server.\r\n                    }\r\n                    else {\r\n                        this.log_('Closing unhealthy connection after timeout.');\r\n                        this.close();\r\n                    }\r\n                }\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            }, Math.floor(healthyTimeoutMS));\r\n        }\r\n    }\r\n    nextTransportId_() {\r\n        return 'c:' + this.id + ':' + this.connectionCount++;\r\n    }\r\n    disconnReceiver_(conn) {\r\n        return everConnected => {\r\n            if (conn === this.conn_) {\r\n                this.onConnectionLost_(everConnected);\r\n            }\r\n            else if (conn === this.secondaryConn_) {\r\n                this.log_('Secondary connection lost.');\r\n                this.onSecondaryConnectionLost_();\r\n            }\r\n            else {\r\n                this.log_('closing an old connection');\r\n            }\r\n        };\r\n    }\r\n    connReceiver_(conn) {\r\n        return (message) => {\r\n            if (this.state_ !== 2 /* DISCONNECTED */) {\r\n                if (conn === this.rx_) {\r\n                    this.onPrimaryMessageReceived_(message);\r\n                }\r\n                else if (conn === this.secondaryConn_) {\r\n                    this.onSecondaryMessageReceived_(message);\r\n                }\r\n                else {\r\n                    this.log_('message on old connection');\r\n                }\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * @param dataMsg - An arbitrary data message to be sent to the server\r\n     */\r\n    sendRequest(dataMsg) {\r\n        // wrap in a data message envelope and send it on\r\n        const msg = { t: 'd', d: dataMsg };\r\n        this.sendData_(msg);\r\n    }\r\n    tryCleanupConnection() {\r\n        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\r\n            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\r\n            this.conn_ = this.secondaryConn_;\r\n            this.secondaryConn_ = null;\r\n            // the server will shutdown the old connection\r\n        }\r\n    }\r\n    onSecondaryControl_(controlData) {\r\n        if (MESSAGE_TYPE in controlData) {\r\n            const cmd = controlData[MESSAGE_TYPE];\r\n            if (cmd === SWITCH_ACK) {\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // Most likely the session wasn't valid. Abandon the switch attempt\r\n                this.log_('Got a reset on secondary, closing it');\r\n                this.secondaryConn_.close();\r\n                // If we were already using this connection for something, than we need to fully close\r\n                if (this.tx_ === this.secondaryConn_ ||\r\n                    this.rx_ === this.secondaryConn_) {\r\n                    this.close();\r\n                }\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on secondary.');\r\n                this.secondaryResponsesRequired_--;\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n        }\r\n    }\r\n    onSecondaryMessageReceived_(parsedData) {\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onSecondaryControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            // got a data message, but we're still second connection. Need to buffer it up\r\n            this.pendingDataMessages.push(data);\r\n        }\r\n        else {\r\n            throw new Error('Unknown protocol layer: ' + layer);\r\n        }\r\n    }\r\n    upgradeIfSecondaryHealthy_() {\r\n        if (this.secondaryResponsesRequired_ <= 0) {\r\n            this.log_('Secondary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n            this.secondaryConn_.markConnectionHealthy();\r\n            this.proceedWithUpgrade_();\r\n        }\r\n        else {\r\n            // Send a ping to make sure the connection is healthy.\r\n            this.log_('sending ping on secondary.');\r\n            this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    proceedWithUpgrade_() {\r\n        // tell this connection to consider itself open\r\n        this.secondaryConn_.start();\r\n        // send ack\r\n        this.log_('sending client ack on secondary');\r\n        this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\r\n        // send end packet on primary transport, switch to sending on this one\r\n        // can receive on this one, buffer responses until end received on primary transport\r\n        this.log_('Ending transmission on primary');\r\n        this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\r\n        this.tx_ = this.secondaryConn_;\r\n        this.tryCleanupConnection();\r\n    }\r\n    onPrimaryMessageReceived_(parsedData) {\r\n        // Must refer to parsedData properties in quotes, so closure doesn't touch them.\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            this.onDataMessage_(data);\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        this.onPrimaryResponse_();\r\n        // We don't do anything with data messages, just kick them up a level\r\n        this.onMessage_(message);\r\n    }\r\n    onPrimaryResponse_() {\r\n        if (!this.isHealthy_) {\r\n            this.primaryResponsesRequired_--;\r\n            if (this.primaryResponsesRequired_ <= 0) {\r\n                this.log_('Primary connection is healthy.');\r\n                this.isHealthy_ = true;\r\n                this.conn_.markConnectionHealthy();\r\n            }\r\n        }\r\n    }\r\n    onControl_(controlData) {\r\n        const cmd = requireKey(MESSAGE_TYPE, controlData);\r\n        if (MESSAGE_DATA in controlData) {\r\n            const payload = controlData[MESSAGE_DATA];\r\n            if (cmd === SERVER_HELLO) {\r\n                this.onHandshake_(payload);\r\n            }\r\n            else if (cmd === END_TRANSMISSION) {\r\n                this.log_('recvd end transmission on primary');\r\n                this.rx_ = this.secondaryConn_;\r\n                for (let i = 0; i < this.pendingDataMessages.length; ++i) {\r\n                    this.onDataMessage_(this.pendingDataMessages[i]);\r\n                }\r\n                this.pendingDataMessages = [];\r\n                this.tryCleanupConnection();\r\n            }\r\n            else if (cmd === CONTROL_SHUTDOWN) {\r\n                // This was previously the 'onKill' callback passed to the lower-level connection\r\n                // payload in this case is the reason for the shutdown. Generally a human-readable error\r\n                this.onConnectionShutdown_(payload);\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // payload in this case is the host we should contact\r\n                this.onReset_(payload);\r\n            }\r\n            else if (cmd === CONTROL_ERROR) {\r\n                error('Server Error: ' + payload);\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on primary.');\r\n                this.onPrimaryResponse_();\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }\r\n            else {\r\n                error('Unknown control packet command: ' + cmd);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param handshake - The handshake data returned from the server\r\n     */\r\n    onHandshake_(handshake) {\r\n        const timestamp = handshake.ts;\r\n        const version = handshake.v;\r\n        const host = handshake.h;\r\n        this.sessionId = handshake.s;\r\n        this.repoInfo_.host = host;\r\n        // if we've already closed the connection, then don't bother trying to progress further\r\n        if (this.state_ === 0 /* CONNECTING */) {\r\n            this.conn_.start();\r\n            this.onConnectionEstablished_(this.conn_, timestamp);\r\n            if (PROTOCOL_VERSION !== version) {\r\n                warn('Protocol version mismatch detected');\r\n            }\r\n            // TODO: do we want to upgrade? when? maybe a delay?\r\n            this.tryStartUpgrade_();\r\n        }\r\n    }\r\n    tryStartUpgrade_() {\r\n        const conn = this.transportManager_.upgradeTransport();\r\n        if (conn) {\r\n            this.startUpgrade_(conn);\r\n        }\r\n    }\r\n    startUpgrade_(conn) {\r\n        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.secondaryResponsesRequired_ =\r\n            conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessage = this.connReceiver_(this.secondaryConn_);\r\n        const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\r\n        this.secondaryConn_.open(onMessage, onDisconnect);\r\n        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\r\n        setTimeoutNonBlocking(() => {\r\n            if (this.secondaryConn_) {\r\n                this.log_('Timed out trying to upgrade.');\r\n                this.secondaryConn_.close();\r\n            }\r\n        }, Math.floor(UPGRADE_TIMEOUT));\r\n    }\r\n    onReset_(host) {\r\n        this.log_('Reset packet received.  New host: ' + host);\r\n        this.repoInfo_.host = host;\r\n        // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\r\n        // We don't currently support resets after the connection has already been established\r\n        if (this.state_ === 1 /* CONNECTED */) {\r\n            this.close();\r\n        }\r\n        else {\r\n            // Close whatever connections we have open and start again.\r\n            this.closeConnections_();\r\n            this.start_();\r\n        }\r\n    }\r\n    onConnectionEstablished_(conn, timestamp) {\r\n        this.log_('Realtime connection established.');\r\n        this.conn_ = conn;\r\n        this.state_ = 1 /* CONNECTED */;\r\n        if (this.onReady_) {\r\n            this.onReady_(timestamp, this.sessionId);\r\n            this.onReady_ = null;\r\n        }\r\n        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\r\n        // send some pings.\r\n        if (this.primaryResponsesRequired_ === 0) {\r\n            this.log_('Primary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n        }\r\n        else {\r\n            setTimeoutNonBlocking(() => {\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\r\n        }\r\n    }\r\n    sendPingOnPrimaryIfNecessary_() {\r\n        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\r\n        if (!this.isHealthy_ && this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('sending ping on primary.');\r\n            this.sendData_({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    onSecondaryConnectionLost_() {\r\n        const conn = this.secondaryConn_;\r\n        this.secondaryConn_ = null;\r\n        if (this.tx_ === conn || this.rx_ === conn) {\r\n            // we are relying on this connection already in some capacity. Therefore, a failure is real\r\n            this.close();\r\n        }\r\n    }\r\n    /**\r\n     * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\r\n     * we should flush the host cache\r\n     */\r\n    onConnectionLost_(everConnected) {\r\n        this.conn_ = null;\r\n        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\r\n        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\r\n        if (!everConnected && this.state_ === 0 /* CONNECTING */) {\r\n            this.log_('Realtime connection failed.');\r\n            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\r\n            if (this.repoInfo_.isCacheableHost()) {\r\n                PersistentStorage.remove('host:' + this.repoInfo_.host);\r\n                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\r\n                this.repoInfo_.internalHost = this.repoInfo_.host;\r\n            }\r\n        }\r\n        else if (this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('Realtime connection lost.');\r\n        }\r\n        this.close();\r\n    }\r\n    onConnectionShutdown_(reason) {\r\n        this.log_('Connection shutdown command received. Shutting down...');\r\n        if (this.onKill_) {\r\n            this.onKill_(reason);\r\n            this.onKill_ = null;\r\n        }\r\n        // We intentionally don't want to fire onDisconnect (kill is a different case),\r\n        // so clear the callback.\r\n        this.onDisconnect_ = null;\r\n        this.close();\r\n    }\r\n    sendData_(data) {\r\n        if (this.state_ !== 1 /* CONNECTED */) {\r\n            throw 'Connection is not connected';\r\n        }\r\n        else {\r\n            this.tx_.send(data);\r\n        }\r\n    }\r\n    /**\r\n     * Cleans up this connection, calling the appropriate callbacks\r\n     */\r\n    close() {\r\n        if (this.state_ !== 2 /* DISCONNECTED */) {\r\n            this.log_('Closing realtime connection.');\r\n            this.state_ = 2 /* DISCONNECTED */;\r\n            this.closeConnections_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_();\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    closeConnections_() {\r\n        this.log_('Shutting down all connections');\r\n        if (this.conn_) {\r\n            this.conn_.close();\r\n            this.conn_ = null;\r\n        }\r\n        if (this.secondaryConn_) {\r\n            this.secondaryConn_.close();\r\n            this.secondaryConn_ = null;\r\n        }\r\n        if (this.healthyTimeout_) {\r\n            clearTimeout(this.healthyTimeout_);\r\n            this.healthyTimeout_ = null;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\r\nclass ServerActions {\r\n    put(pathString, data, onComplete, hash) { }\r\n    merge(pathString, data, onComplete, hash) { }\r\n    /**\r\n     * Refreshes the auth token for the current connection.\r\n     * @param token - The authentication token\r\n     */\r\n    refreshAuthToken(token) { }\r\n    /**\r\n     * Refreshes the app check token for the current connection.\r\n     * @param token The app check token\r\n     */\r\n    refreshAppCheckToken(token) { }\r\n    onDisconnectPut(pathString, data, onComplete) { }\r\n    onDisconnectMerge(pathString, data, onComplete) { }\r\n    onDisconnectCancel(pathString, onComplete) { }\r\n    reportStats(stats) { }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\r\nclass EventEmitter {\r\n    constructor(allowedEvents_) {\r\n        this.allowedEvents_ = allowedEvents_;\r\n        this.listeners_ = {};\r\n        assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\r\n    }\r\n    /**\r\n     * To be called by derived classes to trigger events.\r\n     */\r\n    trigger(eventType, ...varArgs) {\r\n        if (Array.isArray(this.listeners_[eventType])) {\r\n            // Clone the list, since callbacks could add/remove listeners.\r\n            const listeners = [...this.listeners_[eventType]];\r\n            for (let i = 0; i < listeners.length; i++) {\r\n                listeners[i].callback.apply(listeners[i].context, varArgs);\r\n            }\r\n        }\r\n    }\r\n    on(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        this.listeners_[eventType] = this.listeners_[eventType] || [];\r\n        this.listeners_[eventType].push({ callback, context });\r\n        const eventData = this.getInitialEvent(eventType);\r\n        if (eventData) {\r\n            callback.apply(context, eventData);\r\n        }\r\n    }\r\n    off(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        const listeners = this.listeners_[eventType] || [];\r\n        for (let i = 0; i < listeners.length; i++) {\r\n            if (listeners[i].callback === callback &&\r\n                (!context || context === listeners[i].context)) {\r\n                listeners.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    validateEventType_(eventType) {\r\n        assert(this.allowedEvents_.find(et => {\r\n            return et === eventType;\r\n        }), 'Unknown event: ' + eventType);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n */\r\nclass OnlineMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['online']);\r\n        this.online_ = true;\r\n        // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\r\n        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\r\n        // It would seem that the 'online' event does not always fire consistently. So we disable it\r\n        // for Cordova.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window.addEventListener !== 'undefined' &&\r\n            !isMobileCordova()) {\r\n            window.addEventListener('online', () => {\r\n                if (!this.online_) {\r\n                    this.online_ = true;\r\n                    this.trigger('online', true);\r\n                }\r\n            }, false);\r\n            window.addEventListener('offline', () => {\r\n                if (this.online_) {\r\n                    this.online_ = false;\r\n                    this.trigger('online', false);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new OnlineMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'online', 'Unknown event type: ' + eventType);\r\n        return [this.online_];\r\n    }\r\n    currentlyOnline() {\r\n        return this.online_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Maximum key depth. */\r\nconst MAX_PATH_DEPTH = 32;\r\n/** Maximum number of (UTF8) bytes in a Firebase path. */\r\nconst MAX_PATH_LENGTH_BYTES = 768;\r\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\r\nclass Path {\r\n    /**\r\n     * @param pathOrString - Path string to parse, or another path, or the raw\r\n     * tokens array\r\n     */\r\n    constructor(pathOrString, pieceNum) {\r\n        if (pieceNum === void 0) {\r\n            this.pieces_ = pathOrString.split('/');\r\n            // Remove empty pieces.\r\n            let copyTo = 0;\r\n            for (let i = 0; i < this.pieces_.length; i++) {\r\n                if (this.pieces_[i].length > 0) {\r\n                    this.pieces_[copyTo] = this.pieces_[i];\r\n                    copyTo++;\r\n                }\r\n            }\r\n            this.pieces_.length = copyTo;\r\n            this.pieceNum_ = 0;\r\n        }\r\n        else {\r\n            this.pieces_ = pathOrString;\r\n            this.pieceNum_ = pieceNum;\r\n        }\r\n    }\r\n    toString() {\r\n        let pathString = '';\r\n        for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            if (this.pieces_[i] !== '') {\r\n                pathString += '/' + this.pieces_[i];\r\n            }\r\n        }\r\n        return pathString || '/';\r\n    }\r\n}\r\nfunction newEmptyPath() {\r\n    return new Path('');\r\n}\r\nfunction pathGetFront(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    return path.pieces_[path.pieceNum_];\r\n}\r\n/**\r\n * @returns The number of segments in this path\r\n */\r\nfunction pathGetLength(path) {\r\n    return path.pieces_.length - path.pieceNum_;\r\n}\r\nfunction pathPopFront(path) {\r\n    let pieceNum = path.pieceNum_;\r\n    if (pieceNum < path.pieces_.length) {\r\n        pieceNum++;\r\n    }\r\n    return new Path(path.pieces_, pieceNum);\r\n}\r\nfunction pathGetBack(path) {\r\n    if (path.pieceNum_ < path.pieces_.length) {\r\n        return path.pieces_[path.pieces_.length - 1];\r\n    }\r\n    return null;\r\n}\r\nfunction pathToUrlEncodedString(path) {\r\n    let pathString = '';\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        if (path.pieces_[i] !== '') {\r\n            pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\r\n        }\r\n    }\r\n    return pathString || '/';\r\n}\r\n/**\r\n * Shallow copy of the parts of the path.\r\n *\r\n */\r\nfunction pathSlice(path, begin = 0) {\r\n    return path.pieces_.slice(path.pieceNum_ + begin);\r\n}\r\nfunction pathParent(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\nfunction pathChild(path, childPathObj) {\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    if (childPathObj instanceof Path) {\r\n        for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\r\n            pieces.push(childPathObj.pieces_[i]);\r\n        }\r\n    }\r\n    else {\r\n        const childPieces = childPathObj.split('/');\r\n        for (let i = 0; i < childPieces.length; i++) {\r\n            if (childPieces[i].length > 0) {\r\n                pieces.push(childPieces[i]);\r\n            }\r\n        }\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\n/**\r\n * @returns True if there are no segments in this path\r\n */\r\nfunction pathIsEmpty(path) {\r\n    return path.pieceNum_ >= path.pieces_.length;\r\n}\r\n/**\r\n * @returns The path from outerPath to innerPath\r\n */\r\nfunction newRelativePath(outerPath, innerPath) {\r\n    const outer = pathGetFront(outerPath), inner = pathGetFront(innerPath);\r\n    if (outer === null) {\r\n        return innerPath;\r\n    }\r\n    else if (outer === inner) {\r\n        return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\r\n    }\r\n    else {\r\n        throw new Error('INTERNAL ERROR: innerPath (' +\r\n            innerPath +\r\n            ') is not within ' +\r\n            'outerPath (' +\r\n            outerPath +\r\n            ')');\r\n    }\r\n}\r\n/**\r\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\r\n */\r\nfunction pathCompare(left, right) {\r\n    const leftKeys = pathSlice(left, 0);\r\n    const rightKeys = pathSlice(right, 0);\r\n    for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\r\n        const cmp = nameCompare(leftKeys[i], rightKeys[i]);\r\n        if (cmp !== 0) {\r\n            return cmp;\r\n        }\r\n    }\r\n    if (leftKeys.length === rightKeys.length) {\r\n        return 0;\r\n    }\r\n    return leftKeys.length < rightKeys.length ? -1 : 1;\r\n}\r\n/**\r\n * @returns true if paths are the same.\r\n */\r\nfunction pathEquals(path, other) {\r\n    if (pathGetLength(path) !== pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    for (let i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * @returns True if this path is a parent (or the same as) other\r\n */\r\nfunction pathContains(path, other) {\r\n    let i = path.pieceNum_;\r\n    let j = other.pieceNum_;\r\n    if (pathGetLength(path) > pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    while (i < path.pieces_.length) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n        ++i;\r\n        ++j;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\r\nclass ValidationPath {\r\n    /**\r\n     * @param path - Initial Path.\r\n     * @param errorPrefix_ - Prefix for any error messages.\r\n     */\r\n    constructor(path, errorPrefix_) {\r\n        this.errorPrefix_ = errorPrefix_;\r\n        this.parts_ = pathSlice(path, 0);\r\n        /** Initialize to number of '/' chars needed in path. */\r\n        this.byteLength_ = Math.max(1, this.parts_.length);\r\n        for (let i = 0; i < this.parts_.length; i++) {\r\n            this.byteLength_ += stringLength(this.parts_[i]);\r\n        }\r\n        validationPathCheckValid(this);\r\n    }\r\n}\r\nfunction validationPathPush(validationPath, child) {\r\n    // Count the needed '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ += 1;\r\n    }\r\n    validationPath.parts_.push(child);\r\n    validationPath.byteLength_ += stringLength(child);\r\n    validationPathCheckValid(validationPath);\r\n}\r\nfunction validationPathPop(validationPath) {\r\n    const last = validationPath.parts_.pop();\r\n    validationPath.byteLength_ -= stringLength(last);\r\n    // Un-count the previous '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ -= 1;\r\n    }\r\n}\r\nfunction validationPathCheckValid(validationPath) {\r\n    if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'has a key path longer than ' +\r\n            MAX_PATH_LENGTH_BYTES +\r\n            ' bytes (' +\r\n            validationPath.byteLength_ +\r\n            ').');\r\n    }\r\n    if (validationPath.parts_.length > MAX_PATH_DEPTH) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'path specified exceeds the maximum depth that can be written (' +\r\n            MAX_PATH_DEPTH +\r\n            ') or object contains a cycle ' +\r\n            validationPathToErrorString(validationPath));\r\n    }\r\n}\r\n/**\r\n * String for use in error messages - uses '.' notation for path.\r\n */\r\nfunction validationPathToErrorString(validationPath) {\r\n    if (validationPath.parts_.length === 0) {\r\n        return '';\r\n    }\r\n    return \"in property '\" + validationPath.parts_.join('.') + \"'\";\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass VisibilityMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['visible']);\r\n        let hidden;\r\n        let visibilityChange;\r\n        if (typeof document !== 'undefined' &&\r\n            typeof document.addEventListener !== 'undefined') {\r\n            if (typeof document['hidden'] !== 'undefined') {\r\n                // Opera 12.10 and Firefox 18 and later support\r\n                visibilityChange = 'visibilitychange';\r\n                hidden = 'hidden';\r\n            }\r\n            else if (typeof document['mozHidden'] !== 'undefined') {\r\n                visibilityChange = 'mozvisibilitychange';\r\n                hidden = 'mozHidden';\r\n            }\r\n            else if (typeof document['msHidden'] !== 'undefined') {\r\n                visibilityChange = 'msvisibilitychange';\r\n                hidden = 'msHidden';\r\n            }\r\n            else if (typeof document['webkitHidden'] !== 'undefined') {\r\n                visibilityChange = 'webkitvisibilitychange';\r\n                hidden = 'webkitHidden';\r\n            }\r\n        }\r\n        // Initially, we always assume we are visible. This ensures that in browsers\r\n        // without page visibility support or in cases where we are never visible\r\n        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\r\n        // reconnects\r\n        this.visible_ = true;\r\n        if (visibilityChange) {\r\n            document.addEventListener(visibilityChange, () => {\r\n                const visible = !document[hidden];\r\n                if (visible !== this.visible_) {\r\n                    this.visible_ = visible;\r\n                    this.trigger('visible', visible);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new VisibilityMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'visible', 'Unknown event type: ' + eventType);\r\n        return [this.visible_];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst RECONNECT_MIN_DELAY = 1000;\r\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\r\nconst GET_CONNECT_TIMEOUT = 3 * 1000;\r\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\r\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\r\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\r\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\r\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\r\nconst INVALID_TOKEN_THRESHOLD = 3;\r\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\r\nclass PersistentConnection extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param applicationId_ - The Firebase App ID for this project\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.onConnectStatus_ = onConnectStatus_;\r\n        this.onServerInfoUpdate_ = onServerInfoUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        this.authOverride_ = authOverride_;\r\n        // Used for diagnostic logging.\r\n        this.id = PersistentConnection.nextPersistentConnectionId_++;\r\n        this.log_ = logWrapper('p:' + this.id + ':');\r\n        this.interruptReasons_ = {};\r\n        this.listens = new Map();\r\n        this.outstandingPuts_ = [];\r\n        this.outstandingGets_ = [];\r\n        this.outstandingPutCount_ = 0;\r\n        this.outstandingGetCount_ = 0;\r\n        this.onDisconnectRequestQueue_ = [];\r\n        this.connected_ = false;\r\n        this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n        this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\r\n        this.securityDebugCallback_ = null;\r\n        this.lastSessionId = null;\r\n        this.establishConnectionTimer_ = null;\r\n        this.visible_ = false;\r\n        // Before we get connected, we keep a queue of pending messages to send.\r\n        this.requestCBHash_ = {};\r\n        this.requestNumber_ = 0;\r\n        this.realtime_ = null;\r\n        this.authToken_ = null;\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = false;\r\n        this.invalidAuthTokenCount_ = 0;\r\n        this.invalidAppCheckTokenCount_ = 0;\r\n        this.firstConnection_ = true;\r\n        this.lastConnectionAttemptTime_ = null;\r\n        this.lastConnectionEstablishedTime_ = null;\r\n        if (authOverride_ && !isNodeSdk()) {\r\n            throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\r\n        }\r\n        VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\r\n        if (repoInfo_.host.indexOf('fblocal') === -1) {\r\n            OnlineMonitor.getInstance().on('online', this.onOnline_, this);\r\n        }\r\n    }\r\n    sendRequest(action, body, onResponse) {\r\n        const curReqNum = ++this.requestNumber_;\r\n        const msg = { r: curReqNum, a: action, b: body };\r\n        this.log_(stringify(msg));\r\n        assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\r\n        this.realtime_.sendRequest(msg);\r\n        if (onResponse) {\r\n            this.requestCBHash_[curReqNum] = onResponse;\r\n        }\r\n    }\r\n    get(query) {\r\n        this.initConnection_();\r\n        const deferred = new Deferred();\r\n        const request = {\r\n            p: query._path.toString(),\r\n            q: query._queryObject\r\n        };\r\n        const outstandingGet = {\r\n            action: 'g',\r\n            request,\r\n            onComplete: (message) => {\r\n                const payload = message['d'];\r\n                if (message['s'] === 'ok') {\r\n                    this.onDataUpdate_(request['p'], payload, \r\n                    /*isMerge*/ false, \r\n                    /*tag*/ null);\r\n                    deferred.resolve(payload);\r\n                }\r\n                else {\r\n                    deferred.reject(payload);\r\n                }\r\n            }\r\n        };\r\n        this.outstandingGets_.push(outstandingGet);\r\n        this.outstandingGetCount_++;\r\n        const index = this.outstandingGets_.length - 1;\r\n        if (!this.connected_) {\r\n            setTimeout(() => {\r\n                const get = this.outstandingGets_[index];\r\n                if (get === undefined || outstandingGet !== get) {\r\n                    return;\r\n                }\r\n                delete this.outstandingGets_[index];\r\n                this.outstandingGetCount_--;\r\n                if (this.outstandingGetCount_ === 0) {\r\n                    this.outstandingGets_ = [];\r\n                }\r\n                this.log_('get ' + index + ' timed out on connection');\r\n                deferred.reject(new Error('Client is offline.'));\r\n            }, GET_CONNECT_TIMEOUT);\r\n        }\r\n        if (this.connected_) {\r\n            this.sendGet_(index);\r\n        }\r\n        return deferred.promise;\r\n    }\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        this.initConnection_();\r\n        const queryId = query._queryIdentifier;\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + queryId);\r\n        if (!this.listens.has(pathString)) {\r\n            this.listens.set(pathString, new Map());\r\n        }\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');\r\n        assert(!this.listens.get(pathString).has(queryId), 'listen() called twice for same path/queryId.');\r\n        const listenSpec = {\r\n            onComplete,\r\n            hashFn: currentHashFn,\r\n            query,\r\n            tag\r\n        };\r\n        this.listens.get(pathString).set(queryId, listenSpec);\r\n        if (this.connected_) {\r\n            this.sendListen_(listenSpec);\r\n        }\r\n    }\r\n    sendGet_(index) {\r\n        const get = this.outstandingGets_[index];\r\n        this.sendRequest('g', get.request, (message) => {\r\n            delete this.outstandingGets_[index];\r\n            this.outstandingGetCount_--;\r\n            if (this.outstandingGetCount_ === 0) {\r\n                this.outstandingGets_ = [];\r\n            }\r\n            if (get.onComplete) {\r\n                get.onComplete(message);\r\n            }\r\n        });\r\n    }\r\n    sendListen_(listenSpec) {\r\n        const query = listenSpec.query;\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Listen on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'q';\r\n        // Only bother to send query if it's non-default.\r\n        if (listenSpec.tag) {\r\n            req['q'] = query._queryObject;\r\n            req['t'] = listenSpec.tag;\r\n        }\r\n        req[ /*hash*/'h'] = listenSpec.hashFn();\r\n        this.sendRequest(action, req, (message) => {\r\n            const payload = message[ /*data*/'d'];\r\n            const status = message[ /*status*/'s'];\r\n            // print warnings in any case...\r\n            PersistentConnection.warnOnListenWarnings_(payload, query);\r\n            const currentListenSpec = this.listens.get(pathString) &&\r\n                this.listens.get(pathString).get(queryId);\r\n            // only trigger actions if the listen hasn't been removed and readded\r\n            if (currentListenSpec === listenSpec) {\r\n                this.log_('listen response', message);\r\n                if (status !== 'ok') {\r\n                    this.removeListen_(pathString, queryId);\r\n                }\r\n                if (listenSpec.onComplete) {\r\n                    listenSpec.onComplete(status, payload);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    static warnOnListenWarnings_(payload, query) {\r\n        if (payload && typeof payload === 'object' && contains(payload, 'w')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const warnings = safeGet(payload, 'w');\r\n            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\r\n                const indexSpec = '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\r\n                const indexPath = query._path.toString();\r\n                warn(`Using an unspecified index. Your data will be downloaded and ` +\r\n                    `filtered on the client. Consider adding ${indexSpec} at ` +\r\n                    `${indexPath} to your security rules for better performance.`);\r\n            }\r\n        }\r\n    }\r\n    refreshAuthToken(token) {\r\n        this.authToken_ = token;\r\n        this.log_('Auth token refreshed');\r\n        if (this.authToken_) {\r\n            this.tryAuth();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\r\n            //the credential so we dont become authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unauth', {}, () => { });\r\n            }\r\n        }\r\n        this.reduceReconnectDelayIfAdminCredential_(token);\r\n    }\r\n    reduceReconnectDelayIfAdminCredential_(credential) {\r\n        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\r\n        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\r\n        const isFirebaseSecret = credential && credential.length === 40;\r\n        if (isFirebaseSecret || isAdmin(credential)) {\r\n            this.log_('Admin auth credential detected.  Reducing max reconnect time.');\r\n            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n        }\r\n    }\r\n    refreshAppCheckToken(token) {\r\n        this.appCheckToken_ = token;\r\n        this.log_('App check token refreshed');\r\n        if (this.appCheckToken_) {\r\n            this.tryAppCheck();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us.\r\n            //If we're not connected, simply delete the credential so we dont become\r\n            // authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unappeck', {}, () => { });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n     * a auth revoked (the connection is closed).\r\n     */\r\n    tryAuth() {\r\n        if (this.connected_ && this.authToken_) {\r\n            const token = this.authToken_;\r\n            const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\r\n            const requestData = { cred: token };\r\n            if (this.authOverride_ === null) {\r\n                requestData['noauth'] = true;\r\n            }\r\n            else if (typeof this.authOverride_ === 'object') {\r\n                requestData['authvar'] = this.authOverride_;\r\n            }\r\n            this.sendRequest(authMethod, requestData, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (this.authToken_ === token) {\r\n                    if (status === 'ok') {\r\n                        this.invalidAuthTokenCount_ = 0;\r\n                    }\r\n                    else {\r\n                        // Triggers reconnect and force refresh for auth token\r\n                        this.onAuthRevoked_(status, data);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given token. If the authentication\r\n     * attempt fails, it's triggered like the token was revoked (the connection is\r\n     * closed).\r\n     */\r\n    tryAppCheck() {\r\n        if (this.connected_ && this.appCheckToken_) {\r\n            this.sendRequest('appcheck', { 'token': this.appCheckToken_ }, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (status === 'ok') {\r\n                    this.invalidAppCheckTokenCount_ = 0;\r\n                }\r\n                else {\r\n                    this.onAppCheckRevoked_(status, data);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    unlisten(query, tag) {\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Unlisten called for ' + pathString + ' ' + queryId);\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && this.connected_) {\r\n            this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\r\n        }\r\n    }\r\n    sendUnlisten_(pathString, queryId, queryObj, tag) {\r\n        this.log_('Unlisten on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'n';\r\n        // Only bother sending queryId if it's non-default.\r\n        if (tag) {\r\n            req['q'] = queryObj;\r\n            req['t'] = tag;\r\n        }\r\n        this.sendRequest(action, req);\r\n    }\r\n    onDisconnectPut(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('o', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'o',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectMerge(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('om', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'om',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectCancel(pathString, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('oc', pathString, null, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'oc',\r\n                data: null,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    sendOnDisconnect_(action, pathString, data, onComplete) {\r\n        const request = { /*path*/ p: pathString, /*data*/ d: data };\r\n        this.log_('onDisconnect ' + action, request);\r\n        this.sendRequest(action, request, (response) => {\r\n            if (onComplete) {\r\n                setTimeout(() => {\r\n                    onComplete(response[ /*status*/'s'], response[ /* data */'d']);\r\n                }, Math.floor(0));\r\n            }\r\n        });\r\n    }\r\n    put(pathString, data, onComplete, hash) {\r\n        this.putInternal('p', pathString, data, onComplete, hash);\r\n    }\r\n    merge(pathString, data, onComplete, hash) {\r\n        this.putInternal('m', pathString, data, onComplete, hash);\r\n    }\r\n    putInternal(action, pathString, data, onComplete, hash) {\r\n        this.initConnection_();\r\n        const request = {\r\n            /*path*/ p: pathString,\r\n            /*data*/ d: data\r\n        };\r\n        if (hash !== undefined) {\r\n            request[ /*hash*/'h'] = hash;\r\n        }\r\n        // TODO: Only keep track of the most recent put for a given path?\r\n        this.outstandingPuts_.push({\r\n            action,\r\n            request,\r\n            onComplete\r\n        });\r\n        this.outstandingPutCount_++;\r\n        const index = this.outstandingPuts_.length - 1;\r\n        if (this.connected_) {\r\n            this.sendPut_(index);\r\n        }\r\n        else {\r\n            this.log_('Buffering put: ' + pathString);\r\n        }\r\n    }\r\n    sendPut_(index) {\r\n        const action = this.outstandingPuts_[index].action;\r\n        const request = this.outstandingPuts_[index].request;\r\n        const onComplete = this.outstandingPuts_[index].onComplete;\r\n        this.outstandingPuts_[index].queued = this.connected_;\r\n        this.sendRequest(action, request, (message) => {\r\n            this.log_(action + ' response', message);\r\n            delete this.outstandingPuts_[index];\r\n            this.outstandingPutCount_--;\r\n            // Clean up array occasionally.\r\n            if (this.outstandingPutCount_ === 0) {\r\n                this.outstandingPuts_ = [];\r\n            }\r\n            if (onComplete) {\r\n                onComplete(message[ /*status*/'s'], message[ /* data */'d']);\r\n            }\r\n        });\r\n    }\r\n    reportStats(stats) {\r\n        // If we're not connected, we just drop the stats.\r\n        if (this.connected_) {\r\n            const request = { /*counters*/ c: stats };\r\n            this.log_('reportStats', request);\r\n            this.sendRequest(/*stats*/ 's', request, result => {\r\n                const status = result[ /*status*/'s'];\r\n                if (status !== 'ok') {\r\n                    const errorReason = result[ /* data */'d'];\r\n                    this.log_('reportStats', 'Error sending stats: ' + errorReason);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        if ('r' in message) {\r\n            // this is a response\r\n            this.log_('from server: ' + stringify(message));\r\n            const reqNum = message['r'];\r\n            const onResponse = this.requestCBHash_[reqNum];\r\n            if (onResponse) {\r\n                delete this.requestCBHash_[reqNum];\r\n                onResponse(message[ /*body*/'b']);\r\n            }\r\n        }\r\n        else if ('error' in message) {\r\n            throw 'A server-side error has occurred: ' + message['error'];\r\n        }\r\n        else if ('a' in message) {\r\n            // a and b are action and body, respectively\r\n            this.onDataPush_(message['a'], message['b']);\r\n        }\r\n    }\r\n    onDataPush_(action, body) {\r\n        this.log_('handleServerMessage', action, body);\r\n        if (action === 'd') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge*/ false, body['t']);\r\n        }\r\n        else if (action === 'm') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge=*/ true, body['t']);\r\n        }\r\n        else if (action === 'c') {\r\n            this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);\r\n        }\r\n        else if (action === 'ac') {\r\n            this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'apc') {\r\n            this.onAppCheckRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'sd') {\r\n            this.onSecurityDebugPacket_(body);\r\n        }\r\n        else {\r\n            error('Unrecognized action received from server: ' +\r\n                stringify(action) +\r\n                '\\nAre you using the latest client?');\r\n        }\r\n    }\r\n    onReady_(timestamp, sessionId) {\r\n        this.log_('connection ready');\r\n        this.connected_ = true;\r\n        this.lastConnectionEstablishedTime_ = new Date().getTime();\r\n        this.handleTimestamp_(timestamp);\r\n        this.lastSessionId = sessionId;\r\n        if (this.firstConnection_) {\r\n            this.sendConnectStats_();\r\n        }\r\n        this.restoreState_();\r\n        this.firstConnection_ = false;\r\n        this.onConnectStatus_(true);\r\n    }\r\n    scheduleConnect_(timeout) {\r\n        assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\r\n        if (this.establishConnectionTimer_) {\r\n            clearTimeout(this.establishConnectionTimer_);\r\n        }\r\n        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\r\n        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\r\n        this.establishConnectionTimer_ = setTimeout(() => {\r\n            this.establishConnectionTimer_ = null;\r\n            this.establishConnection_();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(timeout));\r\n    }\r\n    initConnection_() {\r\n        if (!this.realtime_ && this.firstConnection_) {\r\n            this.scheduleConnect_(0);\r\n        }\r\n    }\r\n    onVisible_(visible) {\r\n        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\r\n        if (visible &&\r\n            !this.visible_ &&\r\n            this.reconnectDelay_ === this.maxReconnectDelay_) {\r\n            this.log_('Window became visible.  Reducing delay.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        this.visible_ = visible;\r\n    }\r\n    onOnline_(online) {\r\n        if (online) {\r\n            this.log_('Browser went online.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        else {\r\n            this.log_('Browser went offline.  Killing connection.');\r\n            if (this.realtime_) {\r\n                this.realtime_.close();\r\n            }\r\n        }\r\n    }\r\n    onRealtimeDisconnect_() {\r\n        this.log_('data client disconnected');\r\n        this.connected_ = false;\r\n        this.realtime_ = null;\r\n        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\r\n        this.cancelSentTransactions_();\r\n        // Clear out the pending requests.\r\n        this.requestCBHash_ = {};\r\n        if (this.shouldReconnect_()) {\r\n            if (!this.visible_) {\r\n                this.log_(\"Window isn't visible.  Delaying reconnect.\");\r\n                this.reconnectDelay_ = this.maxReconnectDelay_;\r\n                this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            }\r\n            else if (this.lastConnectionEstablishedTime_) {\r\n                // If we've been connected long enough, reset reconnect delay to minimum.\r\n                const timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\r\n                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\r\n                    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n                }\r\n                this.lastConnectionEstablishedTime_ = null;\r\n            }\r\n            const timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\r\n            let reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\r\n            reconnectDelay = Math.random() * reconnectDelay;\r\n            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\r\n            this.scheduleConnect_(reconnectDelay);\r\n            // Adjust reconnect delay for next time.\r\n            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\r\n        }\r\n        this.onConnectStatus_(false);\r\n    }\r\n    async establishConnection_() {\r\n        if (this.shouldReconnect_()) {\r\n            this.log_('Making a connection attempt');\r\n            this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            this.lastConnectionEstablishedTime_ = null;\r\n            const onDataMessage = this.onDataMessage_.bind(this);\r\n            const onReady = this.onReady_.bind(this);\r\n            const onDisconnect = this.onRealtimeDisconnect_.bind(this);\r\n            const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\r\n            const lastSessionId = this.lastSessionId;\r\n            let canceled = false;\r\n            let connection = null;\r\n            const closeFn = function () {\r\n                if (connection) {\r\n                    connection.close();\r\n                }\r\n                else {\r\n                    canceled = true;\r\n                    onDisconnect();\r\n                }\r\n            };\r\n            const sendRequestFn = function (msg) {\r\n                assert(connection, \"sendRequest call when we're not connected not allowed.\");\r\n                connection.sendRequest(msg);\r\n            };\r\n            this.realtime_ = {\r\n                close: closeFn,\r\n                sendRequest: sendRequestFn\r\n            };\r\n            const forceRefresh = this.forceTokenRefresh_;\r\n            this.forceTokenRefresh_ = false;\r\n            try {\r\n                // First fetch auth and app check token, and establish connection after\r\n                // fetching the token was successful\r\n                const [authToken, appCheckToken] = await Promise.all([\r\n                    this.authTokenProvider_.getToken(forceRefresh),\r\n                    this.appCheckTokenProvider_.getToken(forceRefresh)\r\n                ]);\r\n                if (!canceled) {\r\n                    log('getToken() completed. Creating connection.');\r\n                    this.authToken_ = authToken && authToken.accessToken;\r\n                    this.appCheckToken_ = appCheckToken && appCheckToken.token;\r\n                    connection = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect, \r\n                    /* onKill= */ reason => {\r\n                        warn(reason + ' (' + this.repoInfo_.toString() + ')');\r\n                        this.interrupt(SERVER_KILL_INTERRUPT_REASON);\r\n                    }, lastSessionId);\r\n                }\r\n                else {\r\n                    log('getToken() completed but was canceled');\r\n                }\r\n            }\r\n            catch (error) {\r\n                this.log_('Failed to get token: ' + error);\r\n                if (!canceled) {\r\n                    if (this.repoInfo_.nodeAdmin) {\r\n                        // This may be a critical error for the Admin Node.js SDK, so log a warning.\r\n                        // But getToken() may also just have temporarily failed, so we still want to\r\n                        // continue retrying.\r\n                        warn(error);\r\n                    }\r\n                    closeFn();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    interrupt(reason) {\r\n        log('Interrupting connection for reason: ' + reason);\r\n        this.interruptReasons_[reason] = true;\r\n        if (this.realtime_) {\r\n            this.realtime_.close();\r\n        }\r\n        else {\r\n            if (this.establishConnectionTimer_) {\r\n                clearTimeout(this.establishConnectionTimer_);\r\n                this.establishConnectionTimer_ = null;\r\n            }\r\n            if (this.connected_) {\r\n                this.onRealtimeDisconnect_();\r\n            }\r\n        }\r\n    }\r\n    resume(reason) {\r\n        log('Resuming connection for reason: ' + reason);\r\n        delete this.interruptReasons_[reason];\r\n        if (isEmpty(this.interruptReasons_)) {\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n    }\r\n    handleTimestamp_(timestamp) {\r\n        const delta = timestamp - new Date().getTime();\r\n        this.onServerInfoUpdate_({ serverTimeOffset: delta });\r\n    }\r\n    cancelSentTransactions_() {\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            const put = this.outstandingPuts_[i];\r\n            if (put && /*hash*/ 'h' in put.request && put.queued) {\r\n                if (put.onComplete) {\r\n                    put.onComplete('disconnect');\r\n                }\r\n                delete this.outstandingPuts_[i];\r\n                this.outstandingPutCount_--;\r\n            }\r\n        }\r\n        // Clean up array occasionally.\r\n        if (this.outstandingPutCount_ === 0) {\r\n            this.outstandingPuts_ = [];\r\n        }\r\n    }\r\n    onListenRevoked_(pathString, query) {\r\n        // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\r\n        let queryId;\r\n        if (!query) {\r\n            queryId = 'default';\r\n        }\r\n        else {\r\n            queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\r\n        }\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && listen.onComplete) {\r\n            listen.onComplete('permission_denied');\r\n        }\r\n    }\r\n    removeListen_(pathString, queryId) {\r\n        const normalizedPathString = new Path(pathString).toString(); // normalize path.\r\n        let listen;\r\n        if (this.listens.has(normalizedPathString)) {\r\n            const map = this.listens.get(normalizedPathString);\r\n            listen = map.get(queryId);\r\n            map.delete(queryId);\r\n            if (map.size === 0) {\r\n                this.listens.delete(normalizedPathString);\r\n            }\r\n        }\r\n        else {\r\n            // all listens for this path has already been removed\r\n            listen = undefined;\r\n        }\r\n        return listen;\r\n    }\r\n    onAuthRevoked_(statusCode, explanation) {\r\n        log('Auth token revoked: ' + statusCode + '/' + explanation);\r\n        this.authToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        this.realtime_.close();\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAuthTokenCount_++;\r\n            if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                // Set a long reconnect delay because recovery is unlikely\r\n                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n                // Notify the auth token provider that the token is invalid, which will log\r\n                // a warning\r\n                this.authTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onAppCheckRevoked_(statusCode, explanation) {\r\n        log('App check token revoked: ' + statusCode + '/' + explanation);\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        // Note: We don't close the connection as the developer may not have\r\n        // enforcement enabled. The backend closes connections with enforcements.\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAppCheckTokenCount_++;\r\n            if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                this.appCheckTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onSecurityDebugPacket_(body) {\r\n        if (this.securityDebugCallback_) {\r\n            this.securityDebugCallback_(body);\r\n        }\r\n        else {\r\n            if ('msg' in body) {\r\n                console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\r\n            }\r\n        }\r\n    }\r\n    restoreState_() {\r\n        //Re-authenticate ourselves if we have a credential stored.\r\n        this.tryAuth();\r\n        this.tryAppCheck();\r\n        // Puts depend on having received the corresponding data update from the server before they complete, so we must\r\n        // make sure to send listens before puts.\r\n        for (const queries of this.listens.values()) {\r\n            for (const listenSpec of queries.values()) {\r\n                this.sendListen_(listenSpec);\r\n            }\r\n        }\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            if (this.outstandingPuts_[i]) {\r\n                this.sendPut_(i);\r\n            }\r\n        }\r\n        while (this.onDisconnectRequestQueue_.length) {\r\n            const request = this.onDisconnectRequestQueue_.shift();\r\n            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\r\n        }\r\n        for (let i = 0; i < this.outstandingGets_.length; i++) {\r\n            if (this.outstandingGets_[i]) {\r\n                this.sendGet_(i);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sends client stats for first connection\r\n     */\r\n    sendConnectStats_() {\r\n        const stats = {};\r\n        let clientName = 'js';\r\n        if (isNodeSdk()) {\r\n            if (this.repoInfo_.nodeAdmin) {\r\n                clientName = 'admin_node';\r\n            }\r\n            else {\r\n                clientName = 'node';\r\n            }\r\n        }\r\n        stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\r\n        if (isMobileCordova()) {\r\n            stats['framework.cordova'] = 1;\r\n        }\r\n        else if (isReactNative()) {\r\n            stats['framework.reactnative'] = 1;\r\n        }\r\n        this.reportStats(stats);\r\n    }\r\n    shouldReconnect_() {\r\n        const online = OnlineMonitor.getInstance().currentlyOnline();\r\n        return isEmpty(this.interruptReasons_) && online;\r\n    }\r\n}\r\nPersistentConnection.nextPersistentConnectionId_ = 0;\r\n/**\r\n * Counter for number of connections created. Mainly used for tagging in the logs\r\n */\r\nPersistentConnection.nextConnectionId_ = 0;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass NamedNode {\r\n    constructor(name, node) {\r\n        this.name = name;\r\n        this.node = node;\r\n    }\r\n    static Wrap(name, node) {\r\n        return new NamedNode(name, node);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Index {\r\n    /**\r\n     * @returns A standalone comparison function for\r\n     * this index\r\n     */\r\n    getCompare() {\r\n        return this.compare.bind(this);\r\n    }\r\n    /**\r\n     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n     *\r\n     *\r\n     * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n     */\r\n    indexedValueChanged(oldNode, newNode) {\r\n        const oldWrapped = new NamedNode(MIN_NAME, oldNode);\r\n        const newWrapped = new NamedNode(MIN_NAME, newNode);\r\n        return this.compare(oldWrapped, newWrapped) !== 0;\r\n    }\r\n    /**\r\n     * @returns a node wrapper that will sort equal to or less than\r\n     * any other node wrapper, using this index\r\n     */\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __EMPTY_NODE;\r\nclass KeyIndex extends Index {\r\n    static get __EMPTY_NODE() {\r\n        return __EMPTY_NODE;\r\n    }\r\n    static set __EMPTY_NODE(val) {\r\n        __EMPTY_NODE = val;\r\n    }\r\n    compare(a, b) {\r\n        return nameCompare(a.name, b.name);\r\n    }\r\n    isDefinedOn(node) {\r\n        // We could probably return true here (since every node has a key), but it's never called\r\n        // so just leaving unimplemented for now.\r\n        throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return false; // The key for a node never changes.\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // TODO: This should really be created once and cached in a static property, but\r\n        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\r\n        return new NamedNode(MAX_NAME, __EMPTY_NODE);\r\n    }\r\n    makePost(indexValue, name) {\r\n        assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\r\n        // We just use empty node, but it'll never be compared, since our comparator only looks at name.\r\n        return new NamedNode(indexValue, __EMPTY_NODE);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.key';\r\n    }\r\n}\r\nconst KEY_INDEX = new KeyIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An iterator over an LLRBNode.\r\n */\r\nclass SortedMapIterator {\r\n    /**\r\n     * @param node - Node to iterate.\r\n     * @param isReverse_ - Whether or not to iterate in reverse\r\n     */\r\n    constructor(node, startKey, comparator, isReverse_, resultGenerator_ = null) {\r\n        this.isReverse_ = isReverse_;\r\n        this.resultGenerator_ = resultGenerator_;\r\n        this.nodeStack_ = [];\r\n        let cmp = 1;\r\n        while (!node.isEmpty()) {\r\n            node = node;\r\n            cmp = startKey ? comparator(node.key, startKey) : 1;\r\n            // flip the comparison if we're going in reverse\r\n            if (isReverse_) {\r\n                cmp *= -1;\r\n            }\r\n            if (cmp < 0) {\r\n                // This node is less than our start key. ignore it\r\n                if (this.isReverse_) {\r\n                    node = node.left;\r\n                }\r\n                else {\r\n                    node = node.right;\r\n                }\r\n            }\r\n            else if (cmp === 0) {\r\n                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\r\n                this.nodeStack_.push(node);\r\n                break;\r\n            }\r\n            else {\r\n                // This node is greater than our start key, add it to the stack and move to the next one\r\n                this.nodeStack_.push(node);\r\n                if (this.isReverse_) {\r\n                    node = node.right;\r\n                }\r\n                else {\r\n                    node = node.left;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getNext() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        let node = this.nodeStack_.pop();\r\n        let result;\r\n        if (this.resultGenerator_) {\r\n            result = this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            result = { key: node.key, value: node.value };\r\n        }\r\n        if (this.isReverse_) {\r\n            node = node.left;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.right;\r\n            }\r\n        }\r\n        else {\r\n            node = node.right;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.left;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    hasNext() {\r\n        return this.nodeStack_.length > 0;\r\n    }\r\n    peek() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        const node = this.nodeStack_[this.nodeStack_.length - 1];\r\n        if (this.resultGenerator_) {\r\n            return this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            return { key: node.key, value: node.value };\r\n        }\r\n    }\r\n}\r\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\r\nclass LLRBNode {\r\n    /**\r\n     * @param key - Key associated with this node.\r\n     * @param value - Value associated with this node.\r\n     * @param color - Whether this node is red.\r\n     * @param left - Left child.\r\n     * @param right - Right child.\r\n     */\r\n    constructor(key, value, color, left, right) {\r\n        this.key = key;\r\n        this.value = value;\r\n        this.color = color != null ? color : LLRBNode.RED;\r\n        this.left =\r\n            left != null ? left : SortedMap.EMPTY_NODE;\r\n        this.right =\r\n            right != null ? right : SortedMap.EMPTY_NODE;\r\n    }\r\n    /**\r\n     * Returns a copy of the current node, optionally replacing pieces of it.\r\n     *\r\n     * @param key - New key for the node, or null.\r\n     * @param value - New value for the node, or null.\r\n     * @param color - New color for the node, or null.\r\n     * @param left - New left child for the node, or null.\r\n     * @param right - New right child for the node, or null.\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return this.left.count() + 1 + this.right.count();\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     *   node.  If it returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return (this.left.inorderTraversal(action) ||\r\n            !!action(this.key, this.value) ||\r\n            this.right.inorderTraversal(action));\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return (this.right.reverseTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.left.reverseTraversal(action));\r\n    }\r\n    /**\r\n     * @returns The minimum node in the tree.\r\n     */\r\n    min_() {\r\n        if (this.left.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            return this.left.min_();\r\n        }\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    minKey() {\r\n        return this.min_().key;\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    maxKey() {\r\n        if (this.right.isEmpty()) {\r\n            return this.key;\r\n        }\r\n        else {\r\n            return this.right.maxKey();\r\n        }\r\n    }\r\n    /**\r\n     * @param key - Key to insert.\r\n     * @param value - Value to insert.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the key/value added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        let n = this;\r\n        const cmp = comparator(key, n.key);\r\n        if (cmp < 0) {\r\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\r\n        }\r\n        else if (cmp === 0) {\r\n            n = n.copy(null, value, null, null, null);\r\n        }\r\n        else {\r\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns New tree, with the minimum key removed.\r\n     */\r\n    removeMin_() {\r\n        if (this.left.isEmpty()) {\r\n            return SortedMap.EMPTY_NODE;\r\n        }\r\n        let n = this;\r\n        if (!n.left.isRed_() && !n.left.left.isRed_()) {\r\n            n = n.moveRedLeft_();\r\n        }\r\n        n = n.copy(null, null, null, n.left.removeMin_(), null);\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @param key - The key of the item to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the specified item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        let n, smallest;\r\n        n = this;\r\n        if (comparator(key, n.key) < 0) {\r\n            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\r\n                n = n.moveRedLeft_();\r\n            }\r\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\r\n        }\r\n        else {\r\n            if (n.left.isRed_()) {\r\n                n = n.rotateRight_();\r\n            }\r\n            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\r\n                n = n.moveRedRight_();\r\n            }\r\n            if (comparator(key, n.key) === 0) {\r\n                if (n.right.isEmpty()) {\r\n                    return SortedMap.EMPTY_NODE;\r\n                }\r\n                else {\r\n                    smallest = n.right.min_();\r\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\r\n                }\r\n            }\r\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns Whether this is a RED node.\r\n     */\r\n    isRed_() {\r\n        return this.color;\r\n    }\r\n    /**\r\n     * @returns New tree after performing any needed rotations.\r\n     */\r\n    fixUp_() {\r\n        let n = this;\r\n        if (n.right.isRed_() && !n.left.isRed_()) {\r\n            n = n.rotateLeft_();\r\n        }\r\n        if (n.left.isRed_() && n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n        }\r\n        if (n.left.isRed_() && n.right.isRed_()) {\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedLeft.\r\n     */\r\n    moveRedLeft_() {\r\n        let n = this.colorFlip_();\r\n        if (n.right.left.isRed_()) {\r\n            n = n.copy(null, null, null, null, n.right.rotateRight_());\r\n            n = n.rotateLeft_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedRight.\r\n     */\r\n    moveRedRight_() {\r\n        let n = this.colorFlip_();\r\n        if (n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateLeft.\r\n     */\r\n    rotateLeft_() {\r\n        const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\r\n        return this.right.copy(null, null, this.color, nl, null);\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateRight.\r\n     */\r\n    rotateRight_() {\r\n        const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\r\n        return this.left.copy(null, null, this.color, null, nr);\r\n    }\r\n    /**\r\n     * @returns Newt ree, after colorFlip.\r\n     */\r\n    colorFlip_() {\r\n        const left = this.left.copy(null, null, !this.left.color, null, null);\r\n        const right = this.right.copy(null, null, !this.right.color, null, null);\r\n        return this.copy(null, null, !this.color, left, right);\r\n    }\r\n    /**\r\n     * For testing.\r\n     *\r\n     * @returns True if all is well.\r\n     */\r\n    checkMaxDepth_() {\r\n        const blackDepth = this.check_();\r\n        return Math.pow(2.0, blackDepth) <= this.count() + 1;\r\n    }\r\n    check_() {\r\n        if (this.isRed_() && this.left.isRed_()) {\r\n            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\r\n        }\r\n        if (this.right.isRed_()) {\r\n            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\r\n        }\r\n        const blackDepth = this.left.check_();\r\n        if (blackDepth !== this.right.check_()) {\r\n            throw new Error('Black depths differ');\r\n        }\r\n        else {\r\n            return blackDepth + (this.isRed_() ? 0 : 1);\r\n        }\r\n    }\r\n}\r\nLLRBNode.RED = true;\r\nLLRBNode.BLACK = false;\r\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\r\nclass LLRBEmptyNode {\r\n    /**\r\n     * Returns a copy of the current node.\r\n     *\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key/value added.\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        return new LLRBNode(key, value, null);\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        return this;\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return true;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    inorderTraversal(action) {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return false;\r\n    }\r\n    minKey() {\r\n        return null;\r\n    }\r\n    maxKey() {\r\n        return null;\r\n    }\r\n    check_() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns Whether this node is red.\r\n     */\r\n    isRed_() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\r\nclass SortedMap {\r\n    /**\r\n     * @param comparator_ - Key comparator.\r\n     * @param root_ - Optional root node for the map.\r\n     */\r\n    constructor(comparator_, root_ = SortedMap.EMPTY_NODE) {\r\n        this.comparator_ = comparator_;\r\n        this.root_ = root_;\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key/value added or replaced.\r\n     * (TODO: We should perhaps rename this method to 'put')\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @returns New map, with item added.\r\n     */\r\n    insert(key, value) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .insert(key, value, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @returns New map, with item removed.\r\n     */\r\n    remove(key) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .remove(key, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns the value of the node with the given key, or null.\r\n     *\r\n     * @param key - The key to look up.\r\n     * @returns The value of the node with the given key, or null if the\r\n     * key doesn't exist.\r\n     */\r\n    get(key) {\r\n        let cmp;\r\n        let node = this.root_;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                return node.value;\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                node = node.right;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n     * @param key - The key to find the predecessor of\r\n     * @returns The predecessor key.\r\n     */\r\n    getPredecessorKey(key) {\r\n        let cmp, node = this.root_, rightParent = null;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                if (!node.left.isEmpty()) {\r\n                    node = node.left;\r\n                    while (!node.right.isEmpty()) {\r\n                        node = node.right;\r\n                    }\r\n                    return node.key;\r\n                }\r\n                else if (rightParent) {\r\n                    return rightParent.key;\r\n                }\r\n                else {\r\n                    return null; // first item.\r\n                }\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                rightParent = node;\r\n                node = node.right;\r\n            }\r\n        }\r\n        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\r\n    }\r\n    /**\r\n     * @returns True if the map is empty.\r\n     */\r\n    isEmpty() {\r\n        return this.root_.isEmpty();\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the map.\r\n     */\r\n    count() {\r\n        return this.root_.count();\r\n    }\r\n    /**\r\n     * @returns The minimum key in the map.\r\n     */\r\n    minKey() {\r\n        return this.root_.minKey();\r\n    }\r\n    /**\r\n     * @returns The maximum key in the map.\r\n     */\r\n    maxKey() {\r\n        return this.root_.maxKey();\r\n    }\r\n    /**\r\n     * Traverses the map in key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return this.root_.inorderTraversal(action);\r\n    }\r\n    /**\r\n     * Traverses the map in reverse key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns True if the traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return this.root_.reverseTraversal(action);\r\n    }\r\n    /**\r\n     * Returns an iterator over the SortedMap.\r\n     * @returns The iterator.\r\n     */\r\n    getIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\r\n    }\r\n    getIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\r\n    }\r\n    getReverseIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\r\n    }\r\n    getReverseIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\r\n    }\r\n}\r\n/**\r\n * Always use the same empty node, to reduce memory.\r\n */\r\nSortedMap.EMPTY_NODE = new LLRBEmptyNode();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction NAME_ONLY_COMPARATOR(left, right) {\r\n    return nameCompare(left.name, right.name);\r\n}\r\nfunction NAME_COMPARATOR(left, right) {\r\n    return nameCompare(left, right);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet MAX_NODE$2;\r\nfunction setMaxNode$1(val) {\r\n    MAX_NODE$2 = val;\r\n}\r\nconst priorityHashText = function (priority) {\r\n    if (typeof priority === 'number') {\r\n        return 'number:' + doubleToIEEE754String(priority);\r\n    }\r\n    else {\r\n        return 'string:' + priority;\r\n    }\r\n};\r\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n */\r\nconst validatePriorityNode = function (priorityNode) {\r\n    if (priorityNode.isLeafNode()) {\r\n        const val = priorityNode.val();\r\n        assert(typeof val === 'string' ||\r\n            typeof val === 'number' ||\r\n            (typeof val === 'object' && contains(val, '.sv')), 'Priority must be a string or number.');\r\n    }\r\n    else {\r\n        assert(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');\r\n    }\r\n    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\r\n    assert(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __childrenNodeConstructor;\r\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\r\nclass LeafNode {\r\n    /**\r\n     * @param value_ - The value to store in this leaf node. The object type is\r\n     * possible in the event of a deferred value\r\n     * @param priorityNode_ - The priority of this node.\r\n     */\r\n    constructor(value_, priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n        this.value_ = value_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.lazyHash_ = null;\r\n        assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\r\n        validatePriorityNode(this.priorityNode_);\r\n    }\r\n    static set __childrenNodeConstructor(val) {\r\n        __childrenNodeConstructor = val;\r\n    }\r\n    static get __childrenNodeConstructor() {\r\n        return __childrenNodeConstructor;\r\n    }\r\n    /** @inheritDoc */\r\n    isLeafNode() {\r\n        return true;\r\n    }\r\n    /** @inheritDoc */\r\n    getPriority() {\r\n        return this.priorityNode_;\r\n    }\r\n    /** @inheritDoc */\r\n    updatePriority(newPriorityNode) {\r\n        return new LeafNode(this.value_, newPriorityNode);\r\n    }\r\n    /** @inheritDoc */\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getChild(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this;\r\n        }\r\n        else if (pathGetFront(path) === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    hasChild() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    getPredecessorChildName(childName, childNode) {\r\n        return null;\r\n    }\r\n    /** @inheritDoc */\r\n    updateImmediateChild(childName, newChildNode) {\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else if (newChildNode.isEmpty() && childName !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else if (newChildNode.isEmpty() && front !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            assert(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    numChildren() {\r\n        return 0;\r\n    }\r\n    /** @inheritDoc */\r\n    forEachChild(index, action) {\r\n        return false;\r\n    }\r\n    val(exportFormat) {\r\n        if (exportFormat && !this.getPriority().isEmpty()) {\r\n            return {\r\n                '.value': this.getValue(),\r\n                '.priority': this.getPriority().val()\r\n            };\r\n        }\r\n        else {\r\n            return this.getValue();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.priorityNode_.isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.priorityNode_.val()) +\r\n                        ':';\r\n            }\r\n            const type = typeof this.value_;\r\n            toHash += type + ':';\r\n            if (type === 'number') {\r\n                toHash += doubleToIEEE754String(this.value_);\r\n            }\r\n            else {\r\n                toHash += this.value_;\r\n            }\r\n            this.lazyHash_ = sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /**\r\n     * Returns the value of the leaf node.\r\n     * @returns The value of the node.\r\n     */\r\n    getValue() {\r\n        return this.value_;\r\n    }\r\n    compareTo(other) {\r\n        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n            return 1;\r\n        }\r\n        else if (other instanceof LeafNode.__childrenNodeConstructor) {\r\n            return -1;\r\n        }\r\n        else {\r\n            assert(other.isLeafNode(), 'Unknown node type');\r\n            return this.compareToLeafNode_(other);\r\n        }\r\n    }\r\n    /**\r\n     * Comparison specifically for two leaf nodes\r\n     */\r\n    compareToLeafNode_(otherLeaf) {\r\n        const otherLeafType = typeof otherLeaf.value_;\r\n        const thisLeafType = typeof this.value_;\r\n        const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\r\n        const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\r\n        assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\r\n        assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\r\n        if (otherIndex === thisIndex) {\r\n            // Same type, compare values\r\n            if (thisLeafType === 'object') {\r\n                // Deferred value nodes are all equal, but we should also never get to this point...\r\n                return 0;\r\n            }\r\n            else {\r\n                // Note that this works because true > false, all others are number or string comparisons\r\n                if (this.value_ < otherLeaf.value_) {\r\n                    return -1;\r\n                }\r\n                else if (this.value_ === otherLeaf.value_) {\r\n                    return 0;\r\n                }\r\n                else {\r\n                    return 1;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return thisIndex - otherIndex;\r\n        }\r\n    }\r\n    withIndex() {\r\n        return this;\r\n    }\r\n    isIndexed() {\r\n        return true;\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            const otherLeaf = other;\r\n            return (this.value_ === otherLeaf.value_ &&\r\n                this.priorityNode_.equals(otherLeaf.priorityNode_));\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n/**\r\n * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n * the same type, the comparison falls back to their value\r\n */\r\nLeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet nodeFromJSON$1;\r\nlet MAX_NODE$1;\r\nfunction setNodeFromJSON(val) {\r\n    nodeFromJSON$1 = val;\r\n}\r\nfunction setMaxNode(val) {\r\n    MAX_NODE$1 = val;\r\n}\r\nclass PriorityIndex extends Index {\r\n    compare(a, b) {\r\n        const aPriority = a.node.getPriority();\r\n        const bPriority = b.node.getPriority();\r\n        const indexCmp = aPriority.compareTo(bPriority);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getPriority().isEmpty();\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.getPriority().equals(newNode.getPriority());\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\r\n    }\r\n    makePost(indexValue, name) {\r\n        const priorityNode = nodeFromJSON$1(indexValue);\r\n        return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.priority';\r\n    }\r\n}\r\nconst PRIORITY_INDEX = new PriorityIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst LOG_2 = Math.log(2);\r\nclass Base12Num {\r\n    constructor(length) {\r\n        const logBase2 = (num) => \r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        parseInt((Math.log(num) / LOG_2), 10);\r\n        const bitMask = (bits) => parseInt(Array(bits + 1).join('1'), 2);\r\n        this.count = logBase2(length + 1);\r\n        this.current_ = this.count - 1;\r\n        const mask = bitMask(this.count);\r\n        this.bits_ = (length + 1) & mask;\r\n    }\r\n    nextBitIsOne() {\r\n        //noinspection JSBitwiseOperatorUsage\r\n        const result = !(this.bits_ & (0x1 << this.current_));\r\n        this.current_--;\r\n        return result;\r\n    }\r\n}\r\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @param childList - Unsorted list of children\r\n * @param cmp - The comparison method to be used\r\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\r\n * type is not NamedNode\r\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\r\n */\r\nconst buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\r\n    childList.sort(cmp);\r\n    const buildBalancedTree = function (low, high) {\r\n        const length = high - low;\r\n        let namedNode;\r\n        let key;\r\n        if (length === 0) {\r\n            return null;\r\n        }\r\n        else if (length === 1) {\r\n            namedNode = childList[low];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\r\n        }\r\n        else {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const middle = parseInt((length / 2), 10) + low;\r\n            const left = buildBalancedTree(low, middle);\r\n            const right = buildBalancedTree(middle + 1, high);\r\n            namedNode = childList[middle];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\r\n        }\r\n    };\r\n    const buildFrom12Array = function (base12) {\r\n        let node = null;\r\n        let root = null;\r\n        let index = childList.length;\r\n        const buildPennant = function (chunkSize, color) {\r\n            const low = index - chunkSize;\r\n            const high = index;\r\n            index -= chunkSize;\r\n            const childTree = buildBalancedTree(low + 1, high);\r\n            const namedNode = childList[low];\r\n            const key = keyFn ? keyFn(namedNode) : namedNode;\r\n            attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\r\n        };\r\n        const attachPennant = function (pennant) {\r\n            if (node) {\r\n                node.left = pennant;\r\n                node = pennant;\r\n            }\r\n            else {\r\n                root = pennant;\r\n                node = pennant;\r\n            }\r\n        };\r\n        for (let i = 0; i < base12.count; ++i) {\r\n            const isOne = base12.nextBitIsOne();\r\n            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\r\n            const chunkSize = Math.pow(2, base12.count - (i + 1));\r\n            if (isOne) {\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n            }\r\n            else {\r\n                // current == 2\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n                buildPennant(chunkSize, LLRBNode.RED);\r\n            }\r\n        }\r\n        return root;\r\n    };\r\n    const base12 = new Base12Num(childList.length);\r\n    const root = buildFrom12Array(base12);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    return new SortedMap(mapSortFn || cmp, root);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet _defaultIndexMap;\r\nconst fallbackObject = {};\r\nclass IndexMap {\r\n    constructor(indexes_, indexSet_) {\r\n        this.indexes_ = indexes_;\r\n        this.indexSet_ = indexSet_;\r\n    }\r\n    /**\r\n     * The default IndexMap for nodes without a priority\r\n     */\r\n    static get Default() {\r\n        assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\r\n        _defaultIndexMap =\r\n            _defaultIndexMap ||\r\n                new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });\r\n        return _defaultIndexMap;\r\n    }\r\n    get(indexKey) {\r\n        const sortedMap = safeGet(this.indexes_, indexKey);\r\n        if (!sortedMap) {\r\n            throw new Error('No index defined for ' + indexKey);\r\n        }\r\n        if (sortedMap instanceof SortedMap) {\r\n            return sortedMap;\r\n        }\r\n        else {\r\n            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\r\n            // regular child map\r\n            return null;\r\n        }\r\n    }\r\n    hasIndex(indexDefinition) {\r\n        return contains(this.indexSet_, indexDefinition.toString());\r\n    }\r\n    addIndex(indexDefinition, existingChildren) {\r\n        assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\r\n        const childList = [];\r\n        let sawIndexedValue = false;\r\n        const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n        let next = iter.getNext();\r\n        while (next) {\r\n            sawIndexedValue =\r\n                sawIndexedValue || indexDefinition.isDefinedOn(next.node);\r\n            childList.push(next);\r\n            next = iter.getNext();\r\n        }\r\n        let newIndex;\r\n        if (sawIndexedValue) {\r\n            newIndex = buildChildSet(childList, indexDefinition.getCompare());\r\n        }\r\n        else {\r\n            newIndex = fallbackObject;\r\n        }\r\n        const indexName = indexDefinition.toString();\r\n        const newIndexSet = Object.assign({}, this.indexSet_);\r\n        newIndexSet[indexName] = indexDefinition;\r\n        const newIndexes = Object.assign({}, this.indexes_);\r\n        newIndexes[indexName] = newIndex;\r\n        return new IndexMap(newIndexes, newIndexSet);\r\n    }\r\n    /**\r\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n     */\r\n    addToIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren, indexName) => {\r\n            const index = safeGet(this.indexSet_, indexName);\r\n            assert(index, 'Missing index implementation for ' + indexName);\r\n            if (indexedChildren === fallbackObject) {\r\n                // Check to see if we need to index everything\r\n                if (index.isDefinedOn(namedNode.node)) {\r\n                    // We need to build this index\r\n                    const childList = [];\r\n                    const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n                    let next = iter.getNext();\r\n                    while (next) {\r\n                        if (next.name !== namedNode.name) {\r\n                            childList.push(next);\r\n                        }\r\n                        next = iter.getNext();\r\n                    }\r\n                    childList.push(namedNode);\r\n                    return buildChildSet(childList, index.getCompare());\r\n                }\r\n                else {\r\n                    // No change, this remains a fallback\r\n                    return fallbackObject;\r\n                }\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                let newChildren = indexedChildren;\r\n                if (existingSnap) {\r\n                    newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                return newChildren.insert(namedNode, namedNode.node);\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n    /**\r\n     * Create a new IndexMap instance with the given value removed\r\n     */\r\n    removeFromIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren) => {\r\n            if (indexedChildren === fallbackObject) {\r\n                // This is the fallback. Just return it, nothing to do in this case\r\n                return indexedChildren;\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                if (existingSnap) {\r\n                    return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                else {\r\n                    // No record of this child\r\n                    return indexedChildren;\r\n                }\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\r\nlet EMPTY_NODE;\r\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n */\r\nclass ChildrenNode {\r\n    /**\r\n     * @param children_ - List of children of this node..\r\n     * @param priorityNode_ - The priority of this node (as a snapshot node).\r\n     */\r\n    constructor(children_, priorityNode_, indexMap_) {\r\n        this.children_ = children_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.indexMap_ = indexMap_;\r\n        this.lazyHash_ = null;\r\n        /**\r\n         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n         * class instead of an empty ChildrenNode.\r\n         */\r\n        if (this.priorityNode_) {\r\n            validatePriorityNode(this.priorityNode_);\r\n        }\r\n        if (this.children_.isEmpty()) {\r\n            assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\r\n        }\r\n    }\r\n    static get EMPTY_NODE() {\r\n        return (EMPTY_NODE ||\r\n            (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));\r\n    }\r\n    /** @inheritDoc */\r\n    isLeafNode() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    getPriority() {\r\n        return this.priorityNode_ || EMPTY_NODE;\r\n    }\r\n    /** @inheritDoc */\r\n    updatePriority(newPriorityNode) {\r\n        if (this.children_.isEmpty()) {\r\n            // Don't allow priorities on empty nodes\r\n            return this;\r\n        }\r\n        else {\r\n            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.getPriority();\r\n        }\r\n        else {\r\n            const child = this.children_.get(childName);\r\n            return child === null ? EMPTY_NODE : child;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getChild(path) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return this;\r\n        }\r\n        return this.getImmediateChild(front).getChild(pathPopFront(path));\r\n    }\r\n    /** @inheritDoc */\r\n    hasChild(childName) {\r\n        return this.children_.get(childName) !== null;\r\n    }\r\n    /** @inheritDoc */\r\n    updateImmediateChild(childName, newChildNode) {\r\n        assert(newChildNode, 'We should always be passing snapshot nodes');\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else {\r\n            const namedNode = new NamedNode(childName, newChildNode);\r\n            let newChildren, newIndexMap;\r\n            if (newChildNode.isEmpty()) {\r\n                newChildren = this.children_.remove(childName);\r\n                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\r\n            }\r\n            else {\r\n                newChildren = this.children_.insert(childName, newChildNode);\r\n                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\r\n            }\r\n            const newPriority = newChildren.isEmpty()\r\n                ? EMPTY_NODE\r\n                : this.priorityNode_;\r\n            return new ChildrenNode(newChildren, newPriority, newIndexMap);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else {\r\n            assert(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            const newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);\r\n            return this.updateImmediateChild(front, newImmediateChild);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    isEmpty() {\r\n        return this.children_.isEmpty();\r\n    }\r\n    /** @inheritDoc */\r\n    numChildren() {\r\n        return this.children_.count();\r\n    }\r\n    /** @inheritDoc */\r\n    val(exportFormat) {\r\n        if (this.isEmpty()) {\r\n            return null;\r\n        }\r\n        const obj = {};\r\n        let numKeys = 0, maxKey = 0, allIntegerKeys = true;\r\n        this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            obj[key] = childNode.val(exportFormat);\r\n            numKeys++;\r\n            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\r\n                maxKey = Math.max(maxKey, Number(key));\r\n            }\r\n            else {\r\n                allIntegerKeys = false;\r\n            }\r\n        });\r\n        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\r\n            // convert to array.\r\n            const array = [];\r\n            // eslint-disable-next-line guard-for-in\r\n            for (const key in obj) {\r\n                array[key] = obj[key];\r\n            }\r\n            return array;\r\n        }\r\n        else {\r\n            if (exportFormat && !this.getPriority().isEmpty()) {\r\n                obj['.priority'] = this.getPriority().val();\r\n            }\r\n            return obj;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.getPriority().isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.getPriority().val()) +\r\n                        ':';\r\n            }\r\n            this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                const childHash = childNode.hash();\r\n                if (childHash !== '') {\r\n                    toHash += ':' + key + ':' + childHash;\r\n                }\r\n            });\r\n            this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /** @inheritDoc */\r\n    getPredecessorChildName(childName, childNode, index) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            const predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\r\n            return predecessor ? predecessor.name : null;\r\n        }\r\n        else {\r\n            return this.children_.getPredecessorKey(childName);\r\n        }\r\n    }\r\n    getFirstChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const minKey = idx.minKey();\r\n            return minKey && minKey.name;\r\n        }\r\n        else {\r\n            return this.children_.minKey();\r\n        }\r\n    }\r\n    getFirstChild(indexDefinition) {\r\n        const minKey = this.getFirstChildName(indexDefinition);\r\n        if (minKey) {\r\n            return new NamedNode(minKey, this.children_.get(minKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Given an index, return the key name of the largest value we have, according to that index\r\n     */\r\n    getLastChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const maxKey = idx.maxKey();\r\n            return maxKey && maxKey.name;\r\n        }\r\n        else {\r\n            return this.children_.maxKey();\r\n        }\r\n    }\r\n    getLastChild(indexDefinition) {\r\n        const maxKey = this.getLastChildName(indexDefinition);\r\n        if (maxKey) {\r\n            return new NamedNode(maxKey, this.children_.get(maxKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    forEachChild(index, action) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            return idx.inorderTraversal(wrappedNode => {\r\n                return action(wrappedNode.name, wrappedNode.node);\r\n            });\r\n        }\r\n        else {\r\n            return this.children_.inorderTraversal(action);\r\n        }\r\n    }\r\n    getIterator(indexDefinition) {\r\n        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\r\n    }\r\n    getIteratorFrom(startPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getIteratorFrom(startPost, key => key);\r\n        }\r\n        else {\r\n            const iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, startPost) < 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    getReverseIterator(indexDefinition) {\r\n        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\r\n    }\r\n    getReverseIteratorFrom(endPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getReverseIteratorFrom(endPost, key => {\r\n                return key;\r\n            });\r\n        }\r\n        else {\r\n            const iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, endPost) > 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    compareTo(other) {\r\n        if (this.isEmpty()) {\r\n            if (other.isEmpty()) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (other.isLeafNode() || other.isEmpty()) {\r\n            return 1;\r\n        }\r\n        else if (other === MAX_NODE) {\r\n            return -1;\r\n        }\r\n        else {\r\n            // Must be another node with children.\r\n            return 0;\r\n        }\r\n    }\r\n    withIndex(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX ||\r\n            this.indexMap_.hasIndex(indexDefinition)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\r\n            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\r\n        }\r\n    }\r\n    isIndexed(index) {\r\n        return index === KEY_INDEX || this.indexMap_.hasIndex(index);\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            const otherChildrenNode = other;\r\n            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\r\n                return false;\r\n            }\r\n            else if (this.children_.count() === otherChildrenNode.children_.count()) {\r\n                const thisIter = this.getIterator(PRIORITY_INDEX);\r\n                const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\r\n                let thisCurrent = thisIter.getNext();\r\n                let otherCurrent = otherIter.getNext();\r\n                while (thisCurrent && otherCurrent) {\r\n                    if (thisCurrent.name !== otherCurrent.name ||\r\n                        !thisCurrent.node.equals(otherCurrent.node)) {\r\n                        return false;\r\n                    }\r\n                    thisCurrent = thisIter.getNext();\r\n                    otherCurrent = otherIter.getNext();\r\n                }\r\n                return thisCurrent === null && otherCurrent === null;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n     * instead.\r\n     *\r\n     */\r\n    resolveIndex_(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX) {\r\n            return null;\r\n        }\r\n        else {\r\n            return this.indexMap_.get(indexDefinition.toString());\r\n        }\r\n    }\r\n}\r\nChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\r\nclass MaxNode extends ChildrenNode {\r\n    constructor() {\r\n        super(new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default);\r\n    }\r\n    compareTo(other) {\r\n        if (other === this) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    }\r\n    equals(other) {\r\n        // Not that we every compare it, but MAX_NODE is only ever equal to itself\r\n        return other === this;\r\n    }\r\n    getPriority() {\r\n        return this;\r\n    }\r\n    getImmediateChild(childName) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n */\r\nconst MAX_NODE = new MaxNode();\r\nObject.defineProperties(NamedNode, {\r\n    MIN: {\r\n        value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\r\n    },\r\n    MAX: {\r\n        value: new NamedNode(MAX_NAME, MAX_NODE)\r\n    }\r\n});\r\n/**\r\n * Reference Extensions\r\n */\r\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\r\nLeafNode.__childrenNodeConstructor = ChildrenNode;\r\nsetMaxNode$1(MAX_NODE);\r\nsetMaxNode(MAX_NODE);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst USE_HINZE = true;\r\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param json - JSON to create a node for.\r\n * @param priority - Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n */\r\nfunction nodeFromJSON(json, priority = null) {\r\n    if (json === null) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    if (typeof json === 'object' && '.priority' in json) {\r\n        priority = json['.priority'];\r\n    }\r\n    assert(priority === null ||\r\n        typeof priority === 'string' ||\r\n        typeof priority === 'number' ||\r\n        (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);\r\n    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\r\n        json = json['.value'];\r\n    }\r\n    // Valid leaf nodes include non-objects or server-value wrapper objects\r\n    if (typeof json !== 'object' || '.sv' in json) {\r\n        const jsonLeaf = json;\r\n        return new LeafNode(jsonLeaf, nodeFromJSON(priority));\r\n    }\r\n    if (!(json instanceof Array) && USE_HINZE) {\r\n        const children = [];\r\n        let childrenHavePriority = false;\r\n        const hinzeJsonObj = json;\r\n        each(hinzeJsonObj, (key, child) => {\r\n            if (key.substring(0, 1) !== '.') {\r\n                // Ignore metadata nodes\r\n                const childNode = nodeFromJSON(child);\r\n                if (!childNode.isEmpty()) {\r\n                    childrenHavePriority =\r\n                        childrenHavePriority || !childNode.getPriority().isEmpty();\r\n                    children.push(new NamedNode(key, childNode));\r\n                }\r\n            }\r\n        });\r\n        if (children.length === 0) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        const childSet = buildChildSet(children, NAME_ONLY_COMPARATOR, namedNode => namedNode.name, NAME_COMPARATOR);\r\n        if (childrenHavePriority) {\r\n            const sortedChildSet = buildChildSet(children, PRIORITY_INDEX.getCompare());\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));\r\n        }\r\n        else {\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);\r\n        }\r\n    }\r\n    else {\r\n        let node = ChildrenNode.EMPTY_NODE;\r\n        each(json, (key, childData) => {\r\n            if (contains(json, key)) {\r\n                if (key.substring(0, 1) !== '.') {\r\n                    // ignore metadata nodes.\r\n                    const childNode = nodeFromJSON(childData);\r\n                    if (childNode.isLeafNode() || !childNode.isEmpty()) {\r\n                        node = node.updateImmediateChild(key, childNode);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return node.updatePriority(nodeFromJSON(priority));\r\n    }\r\n}\r\nsetNodeFromJSON(nodeFromJSON);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PathIndex extends Index {\r\n    constructor(indexPath_) {\r\n        super();\r\n        this.indexPath_ = indexPath_;\r\n        assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\r\n    }\r\n    extractChild(snap) {\r\n        return snap.getChild(this.indexPath_);\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getChild(this.indexPath_).isEmpty();\r\n    }\r\n    compare(a, b) {\r\n        const aChild = this.extractChild(a.node);\r\n        const bChild = this.extractChild(b.node);\r\n        const indexCmp = aChild.compareTo(bChild);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\r\n        return new NamedNode(name, node);\r\n    }\r\n    maxPost() {\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\r\n        return new NamedNode(MAX_NAME, node);\r\n    }\r\n    toString() {\r\n        return pathSlice(this.indexPath_, 0).join('/');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ValueIndex extends Index {\r\n    compare(a, b) {\r\n        const indexCmp = a.node.compareTo(b.node);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return true;\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.equals(newNode);\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MAX;\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        return new NamedNode(name, valueNode);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.value';\r\n    }\r\n}\r\nconst VALUE_INDEX = new ValueIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Modeled after base64 web-safe chars, but ordered by ASCII.\r\nconst PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\r\nconst MIN_PUSH_CHAR = '-';\r\nconst MAX_PUSH_CHAR = 'z';\r\nconst MAX_KEY_LEN = 786;\r\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\r\nconst nextPushId = (function () {\r\n    // Timestamp of last push, used to prevent local collisions if you push twice\r\n    // in one ms.\r\n    let lastPushTime = 0;\r\n    // We generate 72-bits of randomness which get turned into 12 characters and\r\n    // appended to the timestamp to prevent collisions with other clients. We\r\n    // store the last characters we generated because in the event of a collision,\r\n    // we'll use those same characters except \"incremented\" by one.\r\n    const lastRandChars = [];\r\n    return function (now) {\r\n        const duplicateTime = now === lastPushTime;\r\n        lastPushTime = now;\r\n        let i;\r\n        const timeStampChars = new Array(8);\r\n        for (i = 7; i >= 0; i--) {\r\n            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\r\n            // NOTE: Can't use << here because javascript will convert to int and lose\r\n            // the upper bits.\r\n            now = Math.floor(now / 64);\r\n        }\r\n        assert(now === 0, 'Cannot push at time == 0');\r\n        let id = timeStampChars.join('');\r\n        if (!duplicateTime) {\r\n            for (i = 0; i < 12; i++) {\r\n                lastRandChars[i] = Math.floor(Math.random() * 64);\r\n            }\r\n        }\r\n        else {\r\n            // If the timestamp hasn't changed since last push, use the same random\r\n            // number, except incremented by 1.\r\n            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\r\n                lastRandChars[i] = 0;\r\n            }\r\n            lastRandChars[i]++;\r\n        }\r\n        for (i = 0; i < 12; i++) {\r\n            id += PUSH_CHARS.charAt(lastRandChars[i]);\r\n        }\r\n        assert(id.length === 20, 'nextPushId: Length should be 20.');\r\n        return id;\r\n    };\r\n})();\r\nconst successor = function (key) {\r\n    if (key === '' + INTEGER_32_MAX) {\r\n        // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\r\n        return MIN_PUSH_CHAR;\r\n    }\r\n    const keyAsInt = tryParseInt(key);\r\n    if (keyAsInt != null) {\r\n        return '' + (keyAsInt + 1);\r\n    }\r\n    const next = new Array(key.length);\r\n    for (let i = 0; i < next.length; i++) {\r\n        next[i] = key.charAt(i);\r\n    }\r\n    if (next.length < MAX_KEY_LEN) {\r\n        next.push(MIN_PUSH_CHAR);\r\n        return next.join('');\r\n    }\r\n    let i = next.length - 1;\r\n    while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\r\n        i--;\r\n    }\r\n    // `successor` was called on the largest possible key, so return the\r\n    // MAX_NAME, which sorts larger than all keys.\r\n    if (i === -1) {\r\n        return MAX_NAME;\r\n    }\r\n    const source = next[i];\r\n    const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\r\n    next[i] = sourcePlusOne;\r\n    return next.slice(0, i + 1).join('');\r\n};\r\n// `key` is assumed to be non-empty.\r\nconst predecessor = function (key) {\r\n    if (key === '' + INTEGER_32_MIN) {\r\n        return MIN_NAME;\r\n    }\r\n    const keyAsInt = tryParseInt(key);\r\n    if (keyAsInt != null) {\r\n        return '' + (keyAsInt - 1);\r\n    }\r\n    const next = new Array(key.length);\r\n    for (let i = 0; i < next.length; i++) {\r\n        next[i] = key.charAt(i);\r\n    }\r\n    // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\r\n    // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\r\n    // than that, `predecessor(predecessor(key))`, is\r\n    //\r\n    // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\r\n    //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\r\n    //\r\n    // analogous to increment/decrement for base-10 integers.\r\n    //\r\n    // This works because lexigographic comparison works character-by-character,\r\n    // using length as a tie-breaker if one key is a prefix of the other.\r\n    if (next[next.length - 1] === MIN_PUSH_CHAR) {\r\n        if (next.length === 1) {\r\n            // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\r\n            return '' + INTEGER_32_MAX;\r\n        }\r\n        delete next[next.length - 1];\r\n        return next.join('');\r\n    }\r\n    // Replace the last character with it's immediate predecessor, and\r\n    // fill the suffix of the key with MAX_PUSH_CHAR. This is the\r\n    // lexicographically largest possible key smaller than `key`.\r\n    next[next.length - 1] = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(next[next.length - 1]) - 1);\r\n    return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction changeValue(snapshotNode) {\r\n    return { type: \"value\" /* VALUE */, snapshotNode };\r\n}\r\nfunction changeChildAdded(childName, snapshotNode) {\r\n    return { type: \"child_added\" /* CHILD_ADDED */, snapshotNode, childName };\r\n}\r\nfunction changeChildRemoved(childName, snapshotNode) {\r\n    return { type: \"child_removed\" /* CHILD_REMOVED */, snapshotNode, childName };\r\n}\r\nfunction changeChildChanged(childName, snapshotNode, oldSnap) {\r\n    return {\r\n        type: \"child_changed\" /* CHILD_CHANGED */,\r\n        snapshotNode,\r\n        childName,\r\n        oldSnap\r\n    };\r\n}\r\nfunction changeChildMoved(childName, snapshotNode) {\r\n    return { type: \"child_moved\" /* CHILD_MOVED */, snapshotNode, childName };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n */\r\nclass IndexedFilter {\r\n    constructor(index_) {\r\n        this.index_ = index_;\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\r\n        const oldChild = snap.getImmediateChild(key);\r\n        // Check if anything actually changed.\r\n        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\r\n            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\r\n            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\r\n            // to avoid treating these cases as \"nothing changed.\"\r\n            if (oldChild.isEmpty() === newChild.isEmpty()) {\r\n                // Nothing changed.\r\n                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\r\n                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\r\n                return snap;\r\n            }\r\n        }\r\n        if (optChangeAccumulator != null) {\r\n            if (newChild.isEmpty()) {\r\n                if (snap.hasChild(key)) {\r\n                    optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));\r\n                }\r\n                else {\r\n                    assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\r\n                }\r\n            }\r\n            else if (oldChild.isEmpty()) {\r\n                optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\r\n            }\r\n            else {\r\n                optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));\r\n            }\r\n        }\r\n        if (snap.isLeafNode() && newChild.isEmpty()) {\r\n            return snap;\r\n        }\r\n        else {\r\n            // Make sure the node is indexed\r\n            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (optChangeAccumulator != null) {\r\n            if (!oldSnap.isLeafNode()) {\r\n                oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (!newSnap.hasChild(key)) {\r\n                        optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n            if (!newSnap.isLeafNode()) {\r\n                newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (oldSnap.hasChild(key)) {\r\n                        const oldChild = oldSnap.getImmediateChild(key);\r\n                        if (!oldChild.equals(childNode)) {\r\n                            optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));\r\n                        }\r\n                    }\r\n                    else {\r\n                        optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return newSnap.withIndex(this.index_);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        if (oldSnap.isEmpty()) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        else {\r\n            return oldSnap.updatePriority(newPriority);\r\n        }\r\n    }\r\n    filtersNodes() {\r\n        return false;\r\n    }\r\n    getIndexedFilter() {\r\n        return this;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n */\r\nclass RangedFilter {\r\n    constructor(params) {\r\n        this.indexedFilter_ = new IndexedFilter(params.getIndex());\r\n        this.index_ = params.getIndex();\r\n        this.startPost_ = RangedFilter.getStartPost_(params);\r\n        this.endPost_ = RangedFilter.getEndPost_(params);\r\n    }\r\n    getStartPost() {\r\n        return this.startPost_;\r\n    }\r\n    getEndPost() {\r\n        return this.endPost_;\r\n    }\r\n    matches(node) {\r\n        return (this.index_.compare(this.getStartPost(), node) <= 0 &&\r\n            this.index_.compare(node, this.getEndPost()) <= 0);\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (newSnap.isLeafNode()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            newSnap = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        let filtered = newSnap.withIndex(this.index_);\r\n        // Don't support priorities on queries\r\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n        const self = this;\r\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            if (!self.matches(new NamedNode(key, childNode))) {\r\n                filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\r\n            }\r\n        });\r\n        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.indexedFilter_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    static getStartPost_(params) {\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            return params.getIndex().makePost(params.getIndexStartValue(), startName);\r\n        }\r\n        else {\r\n            return params.getIndex().minPost();\r\n        }\r\n    }\r\n    static getEndPost_(params) {\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            return params.getIndex().makePost(params.getIndexEndValue(), endName);\r\n        }\r\n        else {\r\n            return params.getIndex().maxPost();\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n */\r\nclass LimitedFilter {\r\n    constructor(params) {\r\n        this.rangedFilter_ = new RangedFilter(params);\r\n        this.index_ = params.getIndex();\r\n        this.limit_ = params.getLimit();\r\n        this.reverse_ = !params.isViewFromLeft();\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        if (snap.getImmediateChild(key).equals(newChild)) {\r\n            // No change\r\n            return snap;\r\n        }\r\n        else if (snap.numChildren() < this.limit_) {\r\n            return this.rangedFilter_\r\n                .getIndexedFilter()\r\n                .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n        }\r\n        else {\r\n            return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        let filtered;\r\n        if (newSnap.isLeafNode() || newSnap.isEmpty()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n        }\r\n        else {\r\n            if (this.limit_ * 2 < newSnap.numChildren() &&\r\n                newSnap.isIndexed(this.index_)) {\r\n                // Easier to build up a snapshot, since what we're given has more than twice the elements we want\r\n                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n                // anchor to the startPost, endPost, or last element as appropriate\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\r\n                }\r\n                else {\r\n                    iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\r\n                }\r\n                let count = 0;\r\n                while (iterator.hasNext() && count < this.limit_) {\r\n                    const next = iterator.getNext();\r\n                    let inRange;\r\n                    if (this.reverse_) {\r\n                        inRange =\r\n                            this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\r\n                    }\r\n                    else {\r\n                        inRange =\r\n                            this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\r\n                    }\r\n                    if (inRange) {\r\n                        filtered = filtered.updateImmediateChild(next.name, next.node);\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        // if we have reached the end post, we cannot keep adding elemments\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\r\n                filtered = newSnap.withIndex(this.index_);\r\n                // Don't support priorities on queries\r\n                filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n                let startPost;\r\n                let endPost;\r\n                let cmp;\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = filtered.getReverseIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getEndPost();\r\n                    endPost = this.rangedFilter_.getStartPost();\r\n                    const indexCompare = this.index_.getCompare();\r\n                    cmp = (a, b) => indexCompare(b, a);\r\n                }\r\n                else {\r\n                    iterator = filtered.getIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getStartPost();\r\n                    endPost = this.rangedFilter_.getEndPost();\r\n                    cmp = this.index_.getCompare();\r\n                }\r\n                let count = 0;\r\n                let foundStartPost = false;\r\n                while (iterator.hasNext()) {\r\n                    const next = iterator.getNext();\r\n                    if (!foundStartPost && cmp(startPost, next) <= 0) {\r\n                        // start adding\r\n                        foundStartPost = true;\r\n                    }\r\n                    const inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\r\n                    if (inRange) {\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return this.rangedFilter_\r\n            .getIndexedFilter()\r\n            .updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.rangedFilter_.getIndexedFilter();\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    fullLimitUpdateChild_(snap, childKey, childSnap, source, changeAccumulator) {\r\n        // TODO: rename all cache stuff etc to general snap terminology\r\n        let cmp;\r\n        if (this.reverse_) {\r\n            const indexCmp = this.index_.getCompare();\r\n            cmp = (a, b) => indexCmp(b, a);\r\n        }\r\n        else {\r\n            cmp = this.index_.getCompare();\r\n        }\r\n        const oldEventCache = snap;\r\n        assert(oldEventCache.numChildren() === this.limit_, '');\r\n        const newChildNamedNode = new NamedNode(childKey, childSnap);\r\n        const windowBoundary = this.reverse_\r\n            ? oldEventCache.getFirstChild(this.index_)\r\n            : oldEventCache.getLastChild(this.index_);\r\n        const inRange = this.rangedFilter_.matches(newChildNamedNode);\r\n        if (oldEventCache.hasChild(childKey)) {\r\n            const oldChildSnap = oldEventCache.getImmediateChild(childKey);\r\n            let nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\r\n            while (nextChild != null &&\r\n                (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\r\n                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\r\n                // been applied to the limited filter yet. Ignore this next child which will be updated later in\r\n                // the limited filter...\r\n                nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\r\n            }\r\n            const compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\r\n            const remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\r\n            if (remainsInWindow) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));\r\n                }\r\n                return oldEventCache.updateImmediateChild(childKey, childSnap);\r\n            }\r\n            else {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));\r\n                }\r\n                const newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\r\n                const nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\r\n                if (nextChildInRange) {\r\n                    if (changeAccumulator != null) {\r\n                        changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));\r\n                    }\r\n                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\r\n                }\r\n                else {\r\n                    return newEventCache;\r\n                }\r\n            }\r\n        }\r\n        else if (childSnap.isEmpty()) {\r\n            // we're deleting a node, but it was not in the window, so ignore it\r\n            return snap;\r\n        }\r\n        else if (inRange) {\r\n            if (cmp(windowBoundary, newChildNamedNode) >= 0) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));\r\n                    changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));\r\n                }\r\n                return oldEventCache\r\n                    .updateImmediateChild(childKey, childSnap)\r\n                    .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\r\n            }\r\n            else {\r\n                return snap;\r\n            }\r\n        }\r\n        else {\r\n            return snap;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n *\r\n * @internal\r\n */\r\nclass QueryParams {\r\n    constructor() {\r\n        this.limitSet_ = false;\r\n        this.startSet_ = false;\r\n        this.startNameSet_ = false;\r\n        this.startAfterSet_ = false;\r\n        this.endSet_ = false;\r\n        this.endNameSet_ = false;\r\n        this.endBeforeSet_ = false;\r\n        this.limit_ = 0;\r\n        this.viewFrom_ = '';\r\n        this.indexStartValue_ = null;\r\n        this.indexStartName_ = '';\r\n        this.indexEndValue_ = null;\r\n        this.indexEndName_ = '';\r\n        this.index_ = PRIORITY_INDEX;\r\n    }\r\n    hasStart() {\r\n        return this.startSet_;\r\n    }\r\n    hasStartAfter() {\r\n        return this.startAfterSet_;\r\n    }\r\n    hasEndBefore() {\r\n        return this.endBeforeSet_;\r\n    }\r\n    /**\r\n     * @returns True if it would return from left.\r\n     */\r\n    isViewFromLeft() {\r\n        if (this.viewFrom_ === '') {\r\n            // limit(), rather than limitToFirst or limitToLast was called.\r\n            // This means that only one of startSet_ and endSet_ is true. Use them\r\n            // to calculate which side of the view to anchor to. If neither is set,\r\n            // anchor to the end.\r\n            return this.startSet_;\r\n        }\r\n        else {\r\n            return this.viewFrom_ === \"l\" /* VIEW_FROM_LEFT */;\r\n        }\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true\r\n     */\r\n    getIndexStartValue() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        return this.indexStartValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true.\r\n     * Returns the starting key name for the range defined by these query parameters\r\n     */\r\n    getIndexStartName() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        if (this.startNameSet_) {\r\n            return this.indexStartName_;\r\n        }\r\n        else {\r\n            return MIN_NAME;\r\n        }\r\n    }\r\n    hasEnd() {\r\n        return this.endSet_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     */\r\n    getIndexEndValue() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        return this.indexEndValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * Returns the end key name for the range defined by these query parameters\r\n     */\r\n    getIndexEndName() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        if (this.endNameSet_) {\r\n            return this.indexEndName_;\r\n        }\r\n        else {\r\n            return MAX_NAME;\r\n        }\r\n    }\r\n    hasLimit() {\r\n        return this.limitSet_;\r\n    }\r\n    /**\r\n     * @returns True if a limit has been set and it has been explicitly anchored\r\n     */\r\n    hasAnchoredLimit() {\r\n        return this.limitSet_ && this.viewFrom_ !== '';\r\n    }\r\n    /**\r\n     * Only valid to call if hasLimit() returns true\r\n     */\r\n    getLimit() {\r\n        assert(this.limitSet_, 'Only valid if limit has been set');\r\n        return this.limit_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    loadsAllData() {\r\n        return !(this.startSet_ || this.endSet_ || this.limitSet_);\r\n    }\r\n    isDefault() {\r\n        return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\r\n    }\r\n    copy() {\r\n        const copy = new QueryParams();\r\n        copy.limitSet_ = this.limitSet_;\r\n        copy.limit_ = this.limit_;\r\n        copy.startSet_ = this.startSet_;\r\n        copy.indexStartValue_ = this.indexStartValue_;\r\n        copy.startNameSet_ = this.startNameSet_;\r\n        copy.indexStartName_ = this.indexStartName_;\r\n        copy.endSet_ = this.endSet_;\r\n        copy.indexEndValue_ = this.indexEndValue_;\r\n        copy.endNameSet_ = this.endNameSet_;\r\n        copy.indexEndName_ = this.indexEndName_;\r\n        copy.index_ = this.index_;\r\n        copy.viewFrom_ = this.viewFrom_;\r\n        return copy;\r\n    }\r\n}\r\nfunction queryParamsGetNodeFilter(queryParams) {\r\n    if (queryParams.loadsAllData()) {\r\n        return new IndexedFilter(queryParams.getIndex());\r\n    }\r\n    else if (queryParams.hasLimit()) {\r\n        return new LimitedFilter(queryParams);\r\n    }\r\n    else {\r\n        return new RangedFilter(queryParams);\r\n    }\r\n}\r\nfunction queryParamsLimitToFirst(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"l\" /* VIEW_FROM_LEFT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsLimitToLast(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"r\" /* VIEW_FROM_RIGHT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.startSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexStartValue_ = indexValue;\r\n    if (key != null) {\r\n        newParams.startNameSet_ = true;\r\n        newParams.indexStartName_ = key;\r\n    }\r\n    else {\r\n        newParams.startNameSet_ = false;\r\n        newParams.indexStartName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAfter(queryParams, indexValue, key) {\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX) {\r\n        if (typeof indexValue === 'string') {\r\n            indexValue = successor(indexValue);\r\n        }\r\n        params = queryParamsStartAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        let childKey;\r\n        if (key == null) {\r\n            childKey = MAX_NAME;\r\n        }\r\n        else {\r\n            childKey = successor(key);\r\n        }\r\n        params = queryParamsStartAt(queryParams, indexValue, childKey);\r\n    }\r\n    params.startAfterSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsEndAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.endSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexEndValue_ = indexValue;\r\n    if (key !== undefined) {\r\n        newParams.endNameSet_ = true;\r\n        newParams.indexEndName_ = key;\r\n    }\r\n    else {\r\n        newParams.endNameSet_ = false;\r\n        newParams.indexEndName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsEndBefore(queryParams, indexValue, key) {\r\n    let childKey;\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX) {\r\n        if (typeof indexValue === 'string') {\r\n            indexValue = predecessor(indexValue);\r\n        }\r\n        params = queryParamsEndAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        if (key == null) {\r\n            childKey = MIN_NAME;\r\n        }\r\n        else {\r\n            childKey = predecessor(key);\r\n        }\r\n        params = queryParamsEndAt(queryParams, indexValue, childKey);\r\n    }\r\n    params.endBeforeSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsOrderBy(queryParams, index) {\r\n    const newParams = queryParams.copy();\r\n    newParams.index_ = index;\r\n    return newParams;\r\n}\r\n/**\r\n * Returns a set of REST query string parameters representing this query.\r\n *\r\n * @returns query string parameters\r\n */\r\nfunction queryParamsToRestQueryStringParameters(queryParams) {\r\n    const qs = {};\r\n    if (queryParams.isDefault()) {\r\n        return qs;\r\n    }\r\n    let orderBy;\r\n    if (queryParams.index_ === PRIORITY_INDEX) {\r\n        orderBy = \"$priority\" /* PRIORITY_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === VALUE_INDEX) {\r\n        orderBy = \"$value\" /* VALUE_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === KEY_INDEX) {\r\n        orderBy = \"$key\" /* KEY_INDEX */;\r\n    }\r\n    else {\r\n        assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\r\n        orderBy = queryParams.index_.toString();\r\n    }\r\n    qs[\"orderBy\" /* ORDER_BY */] = stringify(orderBy);\r\n    if (queryParams.startSet_) {\r\n        qs[\"startAt\" /* START_AT */] = stringify(queryParams.indexStartValue_);\r\n        if (queryParams.startNameSet_) {\r\n            qs[\"startAt\" /* START_AT */] +=\r\n                ',' + stringify(queryParams.indexStartName_);\r\n        }\r\n    }\r\n    if (queryParams.endSet_) {\r\n        qs[\"endAt\" /* END_AT */] = stringify(queryParams.indexEndValue_);\r\n        if (queryParams.endNameSet_) {\r\n            qs[\"endAt\" /* END_AT */] +=\r\n                ',' + stringify(queryParams.indexEndName_);\r\n        }\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        if (queryParams.isViewFromLeft()) {\r\n            qs[\"limitToFirst\" /* LIMIT_TO_FIRST */] = queryParams.limit_;\r\n        }\r\n        else {\r\n            qs[\"limitToLast\" /* LIMIT_TO_LAST */] = queryParams.limit_;\r\n        }\r\n    }\r\n    return qs;\r\n}\r\nfunction queryParamsGetQueryObject(queryParams) {\r\n    const obj = {};\r\n    if (queryParams.startSet_) {\r\n        obj[\"sp\" /* INDEX_START_VALUE */] =\r\n            queryParams.indexStartValue_;\r\n        if (queryParams.startNameSet_) {\r\n            obj[\"sn\" /* INDEX_START_NAME */] =\r\n                queryParams.indexStartName_;\r\n        }\r\n    }\r\n    if (queryParams.endSet_) {\r\n        obj[\"ep\" /* INDEX_END_VALUE */] = queryParams.indexEndValue_;\r\n        if (queryParams.endNameSet_) {\r\n            obj[\"en\" /* INDEX_END_NAME */] = queryParams.indexEndName_;\r\n        }\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        obj[\"l\" /* LIMIT */] = queryParams.limit_;\r\n        let viewFrom = queryParams.viewFrom_;\r\n        if (viewFrom === '') {\r\n            if (queryParams.isViewFromLeft()) {\r\n                viewFrom = \"l\" /* VIEW_FROM_LEFT */;\r\n            }\r\n            else {\r\n                viewFrom = \"r\" /* VIEW_FROM_RIGHT */;\r\n            }\r\n        }\r\n        obj[\"vf\" /* VIEW_FROM */] = viewFrom;\r\n    }\r\n    // For now, priority index is the default, so we only specify if it's some other index\r\n    if (queryParams.index_ !== PRIORITY_INDEX) {\r\n        obj[\"i\" /* INDEX */] = queryParams.index_.toString();\r\n    }\r\n    return obj;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\r\nclass ReadonlyRestClient extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        /** @private {function(...[*])} */\r\n        this.log_ = logWrapper('p:rest:');\r\n        /**\r\n         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n         * that's been removed. :-/\r\n         */\r\n        this.listens_ = {};\r\n    }\r\n    reportStats(stats) {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    static getListenId_(query, tag) {\r\n        if (tag !== undefined) {\r\n            return 'tag$' + tag;\r\n        }\r\n        else {\r\n            assert(query._queryParams.isDefault(), \"should have a tag if it's not a default query.\");\r\n            return query._path.toString();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\r\n        // Mark this listener so we can tell if it's removed.\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        const thisListen = {};\r\n        this.listens_[listenId] = thisListen;\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\r\n            }\r\n            if (safeGet(this.listens_, listenId) === thisListen) {\r\n                let status;\r\n                if (!error) {\r\n                    status = 'ok';\r\n                }\r\n                else if (error === 401) {\r\n                    status = 'permission_denied';\r\n                }\r\n                else {\r\n                    status = 'rest_error:' + error;\r\n                }\r\n                onComplete(status, null);\r\n            }\r\n        });\r\n    }\r\n    /** @inheritDoc */\r\n    unlisten(query, tag) {\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        delete this.listens_[listenId];\r\n    }\r\n    get(query) {\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        const pathString = query._path.toString();\r\n        const deferred = new Deferred();\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, \r\n                /*isMerge=*/ false, \r\n                /*tag=*/ null);\r\n                deferred.resolve(data);\r\n            }\r\n            else {\r\n                deferred.reject(new Error(data));\r\n            }\r\n        });\r\n        return deferred.promise;\r\n    }\r\n    /** @inheritDoc */\r\n    refreshAuthToken(token) {\r\n        // no-op since we just always call getToken.\r\n    }\r\n    /**\r\n     * Performs a REST request to the given path, with the provided query string parameters,\r\n     * and any auth credentials we have.\r\n     */\r\n    restRequest_(pathString, queryStringParameters = {}, callback) {\r\n        queryStringParameters['format'] = 'export';\r\n        return Promise.all([\r\n            this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\r\n            this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\r\n        ]).then(([authToken, appCheckToken]) => {\r\n            if (authToken && authToken.accessToken) {\r\n                queryStringParameters['auth'] = authToken.accessToken;\r\n            }\r\n            if (appCheckToken && appCheckToken.token) {\r\n                queryStringParameters['ac'] = appCheckToken.token;\r\n            }\r\n            const url = (this.repoInfo_.secure ? 'https://' : 'http://') +\r\n                this.repoInfo_.host +\r\n                pathString +\r\n                '?' +\r\n                'ns=' +\r\n                this.repoInfo_.namespace +\r\n                querystring(queryStringParameters);\r\n            this.log_('Sending REST request for ' + url);\r\n            const xhr = new XMLHttpRequest();\r\n            xhr.onreadystatechange = () => {\r\n                if (callback && xhr.readyState === 4) {\r\n                    this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\r\n                    let res = null;\r\n                    if (xhr.status >= 200 && xhr.status < 300) {\r\n                        try {\r\n                            res = jsonEval(xhr.responseText);\r\n                        }\r\n                        catch (e) {\r\n                            warn('Failed to parse JSON response for ' +\r\n                                url +\r\n                                ': ' +\r\n                                xhr.responseText);\r\n                        }\r\n                        callback(null, res);\r\n                    }\r\n                    else {\r\n                        // 401 and 404 are expected.\r\n                        if (xhr.status !== 401 && xhr.status !== 404) {\r\n                            warn('Got unsuccessful REST response for ' +\r\n                                url +\r\n                                ' Status: ' +\r\n                                xhr.status);\r\n                        }\r\n                        callback(xhr.status);\r\n                    }\r\n                    callback = null;\r\n                }\r\n            };\r\n            xhr.open('GET', url, /*asynchronous=*/ true);\r\n            xhr.send();\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n */\r\nclass SnapshotHolder {\r\n    constructor() {\r\n        this.rootNode_ = ChildrenNode.EMPTY_NODE;\r\n    }\r\n    getNode(path) {\r\n        return this.rootNode_.getChild(path);\r\n    }\r\n    updateSnapshot(path, newSnapshotNode) {\r\n        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newSparseSnapshotTree() {\r\n    return {\r\n        value: null,\r\n        children: new Map()\r\n    };\r\n}\r\n/**\r\n * Stores the given node at the specified path. If there is already a node\r\n * at a shallower path, it merges the new data into that snapshot node.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @param data - The new data, or null.\r\n */\r\nfunction sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = data;\r\n        sparseSnapshotTree.children.clear();\r\n    }\r\n    else if (sparseSnapshotTree.value !== null) {\r\n        sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(path);\r\n        if (!sparseSnapshotTree.children.has(childKey)) {\r\n            sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\r\n        }\r\n        const child = sparseSnapshotTree.children.get(childKey);\r\n        path = pathPopFront(path);\r\n        sparseSnapshotTreeRemember(child, path, data);\r\n    }\r\n}\r\n/**\r\n * Purge the data at path from the cache.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @returns True if this node should now be removed.\r\n */\r\nfunction sparseSnapshotTreeForget(sparseSnapshotTree, path) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = null;\r\n        sparseSnapshotTree.children.clear();\r\n        return true;\r\n    }\r\n    else {\r\n        if (sparseSnapshotTree.value !== null) {\r\n            if (sparseSnapshotTree.value.isLeafNode()) {\r\n                // We're trying to forget a node that doesn't exist\r\n                return false;\r\n            }\r\n            else {\r\n                const value = sparseSnapshotTree.value;\r\n                sparseSnapshotTree.value = null;\r\n                value.forEachChild(PRIORITY_INDEX, (key, tree) => {\r\n                    sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\r\n                });\r\n                return sparseSnapshotTreeForget(sparseSnapshotTree, path);\r\n            }\r\n        }\r\n        else if (sparseSnapshotTree.children.size > 0) {\r\n            const childKey = pathGetFront(path);\r\n            path = pathPopFront(path);\r\n            if (sparseSnapshotTree.children.has(childKey)) {\r\n                const safeToRemove = sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);\r\n                if (safeToRemove) {\r\n                    sparseSnapshotTree.children.delete(childKey);\r\n                }\r\n            }\r\n            return sparseSnapshotTree.children.size === 0;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Recursively iterates through all of the stored tree and calls the\r\n * callback on each one.\r\n *\r\n * @param prefixPath - Path to look up node for.\r\n * @param func - The function to invoke for each tree.\r\n */\r\nfunction sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {\r\n    if (sparseSnapshotTree.value !== null) {\r\n        func(prefixPath, sparseSnapshotTree.value);\r\n    }\r\n    else {\r\n        sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\r\n            const path = new Path(prefixPath.toString() + '/' + key);\r\n            sparseSnapshotTreeForEachTree(tree, path, func);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Iterates through each immediate child and triggers the callback.\r\n * Only seems to be used in tests.\r\n *\r\n * @param func - The function to invoke for each child.\r\n */\r\nfunction sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {\r\n    sparseSnapshotTree.children.forEach((tree, key) => {\r\n        func(key, tree);\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ - The collection to \"listen\" to.\r\n */\r\nclass StatsListener {\r\n    constructor(collection_) {\r\n        this.collection_ = collection_;\r\n        this.last_ = null;\r\n    }\r\n    get() {\r\n        const newStats = this.collection_.get();\r\n        const delta = Object.assign({}, newStats);\r\n        if (this.last_) {\r\n            each(this.last_, (stat, value) => {\r\n                delta[stat] = delta[stat] - value;\r\n            });\r\n        }\r\n        this.last_ = newStats;\r\n        return delta;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\r\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\r\n// seconds to try to ensure the Firebase connection is established / settled.\r\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\r\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\r\n// We'll continue to report stats on average every 5 minutes.\r\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\r\nclass StatsReporter {\r\n    constructor(collection, server_) {\r\n        this.server_ = server_;\r\n        this.statsToReport_ = {};\r\n        this.statsListener_ = new StatsListener(collection);\r\n        const timeout = FIRST_STATS_MIN_TIME +\r\n            (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\r\n    }\r\n    reportStats_() {\r\n        const stats = this.statsListener_.get();\r\n        const reportedStats = {};\r\n        let haveStatsToReport = false;\r\n        each(stats, (stat, value) => {\r\n            if (value > 0 && contains(this.statsToReport_, stat)) {\r\n                reportedStats[stat] = value;\r\n                haveStatsToReport = true;\r\n            }\r\n        });\r\n        if (haveStatsToReport) {\r\n            this.server_.reportStats(reportedStats);\r\n        }\r\n        // queue our next run.\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @enum\r\n */\r\nvar OperationType;\r\n(function (OperationType) {\r\n    OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\r\n    OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\r\n    OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\r\n    OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\r\n})(OperationType || (OperationType = {}));\r\nfunction newOperationSourceUser() {\r\n    return {\r\n        fromUser: true,\r\n        fromServer: false,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServer() {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServerTaggedQuery(queryId) {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId,\r\n        tagged: true\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass AckUserWrite {\r\n    /**\r\n     * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\r\n     */\r\n    constructor(\r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ affectedTree, \r\n    /** @inheritDoc */ revert) {\r\n        this.path = path;\r\n        this.affectedTree = affectedTree;\r\n        this.revert = revert;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.ACK_USER_WRITE;\r\n        /** @inheritDoc */\r\n        this.source = newOperationSourceUser();\r\n    }\r\n    operationForChild(childName) {\r\n        if (!pathIsEmpty(this.path)) {\r\n            assert(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');\r\n            return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);\r\n        }\r\n        else if (this.affectedTree.value != null) {\r\n            assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\r\n            // All child locations are affected as well; just return same operation.\r\n            return this;\r\n        }\r\n        else {\r\n            const childTree = this.affectedTree.subtree(new Path(childName));\r\n            return new AckUserWrite(newEmptyPath(), childTree, this.revert);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ListenComplete {\r\n    constructor(source, path) {\r\n        this.source = source;\r\n        this.path = path;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.LISTEN_COMPLETE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new ListenComplete(this.source, newEmptyPath());\r\n        }\r\n        else {\r\n            return new ListenComplete(this.source, pathPopFront(this.path));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Overwrite {\r\n    constructor(source, path, snap) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.snap = snap;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.OVERWRITE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));\r\n        }\r\n        else {\r\n            return new Overwrite(this.source, pathPopFront(this.path), this.snap);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Merge {\r\n    constructor(\r\n    /** @inheritDoc */ source, \r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ children) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.children = children;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.MERGE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            const childTree = this.children.subtree(new Path(childName));\r\n            if (childTree.isEmpty()) {\r\n                // This child is unaffected\r\n                return null;\r\n            }\r\n            else if (childTree.value) {\r\n                // We have a snapshot for the child in question.  This becomes an overwrite of the child.\r\n                return new Overwrite(this.source, newEmptyPath(), childTree.value);\r\n            }\r\n            else {\r\n                // This is a merge at a deeper level\r\n                return new Merge(this.source, newEmptyPath(), childTree);\r\n            }\r\n        }\r\n        else {\r\n            assert(pathGetFront(this.path) === childName, \"Can't get a merge for a child not on the path of the operation\");\r\n            return new Merge(this.source, pathPopFront(this.path), this.children);\r\n        }\r\n    }\r\n    toString() {\r\n        return ('Operation(' +\r\n            this.path +\r\n            ': ' +\r\n            this.source.toString() +\r\n            ' merge: ' +\r\n            this.children.toString() +\r\n            ')');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\r\nclass CacheNode {\r\n    constructor(node_, fullyInitialized_, filtered_) {\r\n        this.node_ = node_;\r\n        this.fullyInitialized_ = fullyInitialized_;\r\n        this.filtered_ = filtered_;\r\n    }\r\n    /**\r\n     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n     */\r\n    isFullyInitialized() {\r\n        return this.fullyInitialized_;\r\n    }\r\n    /**\r\n     * Returns whether this node is potentially missing children due to a filter applied to the node\r\n     */\r\n    isFiltered() {\r\n        return this.filtered_;\r\n    }\r\n    isCompleteForPath(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this.isFullyInitialized() && !this.filtered_;\r\n        }\r\n        const childKey = pathGetFront(path);\r\n        return this.isCompleteForChild(childKey);\r\n    }\r\n    isCompleteForChild(key) {\r\n        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));\r\n    }\r\n    getNode() {\r\n        return this.node_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n */\r\nclass EventGenerator {\r\n    constructor(query_) {\r\n        this.query_ = query_;\r\n        this.index_ = this.query_._queryParams.getIndex();\r\n    }\r\n}\r\n/**\r\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n *\r\n * Notes:\r\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n *    our index.\r\n *  - prevName will be calculated based on the index ordering.\r\n */\r\nfunction eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {\r\n    const events = [];\r\n    const moves = [];\r\n    changes.forEach(change => {\r\n        if (change.type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n            eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\r\n            moves.push(changeChildMoved(change.childName, change.snapshotNode));\r\n        }\r\n    });\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_removed\" /* CHILD_REMOVED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_added\" /* CHILD_ADDED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_moved\" /* CHILD_MOVED */, moves, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_changed\" /* CHILD_CHANGED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"value\" /* VALUE */, changes, eventRegistrations, eventCache);\r\n    return events;\r\n}\r\n/**\r\n * Given changes of a single change type, generate the corresponding events.\r\n */\r\nfunction eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {\r\n    const filteredChanges = changes.filter(change => change.type === eventType);\r\n    filteredChanges.sort((a, b) => eventGeneratorCompareChanges(eventGenerator, a, b));\r\n    filteredChanges.forEach(change => {\r\n        const materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);\r\n        registrations.forEach(registration => {\r\n            if (registration.respondsTo(change.type)) {\r\n                events.push(registration.createEvent(materializedChange, eventGenerator.query_));\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {\r\n    if (change.type === 'value' || change.type === 'child_removed') {\r\n        return change;\r\n    }\r\n    else {\r\n        change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);\r\n        return change;\r\n    }\r\n}\r\nfunction eventGeneratorCompareChanges(eventGenerator, a, b) {\r\n    if (a.childName == null || b.childName == null) {\r\n        throw assertionError('Should only compare child_ events.');\r\n    }\r\n    const aWrapped = new NamedNode(a.childName, a.snapshotNode);\r\n    const bWrapped = new NamedNode(b.childName, b.snapshotNode);\r\n    return eventGenerator.index_.compare(aWrapped, bWrapped);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewCache(eventCache, serverCache) {\r\n    return { eventCache, serverCache };\r\n}\r\nfunction viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {\r\n    return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);\r\n}\r\nfunction viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {\r\n    return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));\r\n}\r\nfunction viewCacheGetCompleteEventSnap(viewCache) {\r\n    return viewCache.eventCache.isFullyInitialized()\r\n        ? viewCache.eventCache.getNode()\r\n        : null;\r\n}\r\nfunction viewCacheGetCompleteServerSnap(viewCache) {\r\n    return viewCache.serverCache.isFullyInitialized()\r\n        ? viewCache.serverCache.getNode()\r\n        : null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet emptyChildrenSingleton;\r\n/**\r\n * Singleton empty children collection.\r\n *\r\n */\r\nconst EmptyChildren = () => {\r\n    if (!emptyChildrenSingleton) {\r\n        emptyChildrenSingleton = new SortedMap(stringCompare);\r\n    }\r\n    return emptyChildrenSingleton;\r\n};\r\n/**\r\n * A tree with immutable elements.\r\n */\r\nclass ImmutableTree {\r\n    constructor(value, children = EmptyChildren()) {\r\n        this.value = value;\r\n        this.children = children;\r\n    }\r\n    static fromObject(obj) {\r\n        let tree = new ImmutableTree(null);\r\n        each(obj, (childPath, childSnap) => {\r\n            tree = tree.set(new Path(childPath), childSnap);\r\n        });\r\n        return tree;\r\n    }\r\n    /**\r\n     * True if the value is empty and there are no children\r\n     */\r\n    isEmpty() {\r\n        return this.value === null && this.children.isEmpty();\r\n    }\r\n    /**\r\n     * Given a path and predicate, return the first node and the path to that node\r\n     * where the predicate returns true.\r\n     *\r\n     * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\r\n     * objects on the way back out, it may be better to pass down a pathSoFar obj.\r\n     *\r\n     * @param relativePath - The remainder of the path\r\n     * @param predicate - The predicate to satisfy to return a node\r\n     */\r\n    findRootMostMatchingPathAndValue(relativePath, predicate) {\r\n        if (this.value != null && predicate(this.value)) {\r\n            return { path: newEmptyPath(), value: this.value };\r\n        }\r\n        else {\r\n            if (pathIsEmpty(relativePath)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(relativePath);\r\n                const child = this.children.get(front);\r\n                if (child !== null) {\r\n                    const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);\r\n                    if (childExistingPathAndValue != null) {\r\n                        const fullPath = pathChild(new Path(front), childExistingPathAndValue.path);\r\n                        return { path: fullPath, value: childExistingPathAndValue.value };\r\n                    }\r\n                    else {\r\n                        return null;\r\n                    }\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Find, if it exists, the shortest subpath of the given path that points a defined\r\n     * value in the tree\r\n     */\r\n    findRootMostValueAndPath(relativePath) {\r\n        return this.findRootMostMatchingPathAndValue(relativePath, () => true);\r\n    }\r\n    /**\r\n     * @returns The subtree at the given path\r\n     */\r\n    subtree(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const childTree = this.children.get(front);\r\n            if (childTree !== null) {\r\n                return childTree.subtree(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sets a value at the specified path.\r\n     *\r\n     * @param relativePath - Path to set value at.\r\n     * @param toSet - Value to set.\r\n     * @returns Resulting tree.\r\n     */\r\n    set(relativePath, toSet) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return new ImmutableTree(toSet, this.children);\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.set(pathPopFront(relativePath), toSet);\r\n            const newChildren = this.children.insert(front, newChild);\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Removes the value at the specified path.\r\n     *\r\n     * @param relativePath - Path to value to remove.\r\n     * @returns Resulting tree.\r\n     */\r\n    remove(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            if (this.children.isEmpty()) {\r\n                return new ImmutableTree(null);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null, this.children);\r\n            }\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                const newChild = child.remove(pathPopFront(relativePath));\r\n                let newChildren;\r\n                if (newChild.isEmpty()) {\r\n                    newChildren = this.children.remove(front);\r\n                }\r\n                else {\r\n                    newChildren = this.children.insert(front, newChild);\r\n                }\r\n                if (this.value === null && newChildren.isEmpty()) {\r\n                    return new ImmutableTree(null);\r\n                }\r\n                else {\r\n                    return new ImmutableTree(this.value, newChildren);\r\n                }\r\n            }\r\n            else {\r\n                return this;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Gets a value from the tree.\r\n     *\r\n     * @param relativePath - Path to get value for.\r\n     * @returns Value at path, or null.\r\n     */\r\n    get(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this.value;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                return child.get(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Replace the subtree at the specified path with the given new tree.\r\n     *\r\n     * @param relativePath - Path to replace subtree for.\r\n     * @param newTree - New tree.\r\n     * @returns Resulting tree.\r\n     */\r\n    setTree(relativePath, newTree) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return newTree;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.setTree(pathPopFront(relativePath), newTree);\r\n            let newChildren;\r\n            if (newChild.isEmpty()) {\r\n                newChildren = this.children.remove(front);\r\n            }\r\n            else {\r\n                newChildren = this.children.insert(front, newChild);\r\n            }\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Performs a depth first fold on this tree. Transforms a tree into a single\r\n     * value, given a function that operates on the path to a node, an optional\r\n     * current value, and a map of child names to folded subtrees\r\n     */\r\n    fold(fn) {\r\n        return this.fold_(newEmptyPath(), fn);\r\n    }\r\n    /**\r\n     * Recursive helper for public-facing fold() method\r\n     */\r\n    fold_(pathSoFar, fn) {\r\n        const accum = {};\r\n        this.children.inorderTraversal((childKey, childTree) => {\r\n            accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\r\n        });\r\n        return fn(pathSoFar, this.value, accum);\r\n    }\r\n    /**\r\n     * Find the first matching value on the given path. Return the result of applying f to it.\r\n     */\r\n    findOnPath(path, f) {\r\n        return this.findOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    findOnPath_(pathToFollow, pathSoFar, f) {\r\n        const result = this.value ? f(pathSoFar, this.value) : false;\r\n        if (result) {\r\n            return result;\r\n        }\r\n        else {\r\n            if (pathIsEmpty(pathToFollow)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(pathToFollow);\r\n                const nextChild = this.children.get(front);\r\n                if (nextChild) {\r\n                    return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    foreachOnPath(path, f) {\r\n        return this.foreachOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    foreachOnPath_(pathToFollow, currentRelativePath, f) {\r\n        if (pathIsEmpty(pathToFollow)) {\r\n            return this;\r\n        }\r\n        else {\r\n            if (this.value) {\r\n                f(currentRelativePath, this.value);\r\n            }\r\n            const front = pathGetFront(pathToFollow);\r\n            const nextChild = this.children.get(front);\r\n            if (nextChild) {\r\n                return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Calls the given function for each node in the tree that has a value.\r\n     *\r\n     * @param f - A function to be called with the path from the root of the tree to\r\n     * a node, and the value at that node. Called in depth-first order.\r\n     */\r\n    foreach(f) {\r\n        this.foreach_(newEmptyPath(), f);\r\n    }\r\n    foreach_(currentRelativePath, f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            childTree.foreach_(pathChild(currentRelativePath, childName), f);\r\n        });\r\n        if (this.value) {\r\n            f(currentRelativePath, this.value);\r\n        }\r\n    }\r\n    foreachChild(f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value) {\r\n                f(childName, childTree.value);\r\n            }\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n */\r\nclass CompoundWrite {\r\n    constructor(writeTree_) {\r\n        this.writeTree_ = writeTree_;\r\n    }\r\n    static empty() {\r\n        return new CompoundWrite(new ImmutableTree(null));\r\n    }\r\n}\r\nfunction compoundWriteAddWrite(compoundWrite, path, node) {\r\n    if (pathIsEmpty(path)) {\r\n        return new CompoundWrite(new ImmutableTree(node));\r\n    }\r\n    else {\r\n        const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n        if (rootmost != null) {\r\n            const rootMostPath = rootmost.path;\r\n            let value = rootmost.value;\r\n            const relativePath = newRelativePath(rootMostPath, path);\r\n            value = value.updateChild(relativePath, node);\r\n            return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));\r\n        }\r\n        else {\r\n            const subtree = new ImmutableTree(node);\r\n            const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\r\n            return new CompoundWrite(newWriteTree);\r\n        }\r\n    }\r\n}\r\nfunction compoundWriteAddWrites(compoundWrite, path, updates) {\r\n    let newWrite = compoundWrite;\r\n    each(updates, (childKey, node) => {\r\n        newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\r\n    });\r\n    return newWrite;\r\n}\r\n/**\r\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n * location, which must be removed by calling this method with that path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to remove.\r\n * @param path - The path at which a write and all deeper writes should be removed\r\n * @returns The new CompoundWrite with the removed path\r\n */\r\nfunction compoundWriteRemoveWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return CompoundWrite.empty();\r\n    }\r\n    else {\r\n        const newWriteTree = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));\r\n        return new CompoundWrite(newWriteTree);\r\n    }\r\n}\r\n/**\r\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n * considered \"complete\".\r\n *\r\n * @param compoundWrite - The CompoundWrite to check.\r\n * @param path - The path to check for\r\n * @returns Whether there is a complete write at that path\r\n */\r\nfunction compoundWriteHasCompleteWrite(compoundWrite, path) {\r\n    return compoundWriteGetCompleteNode(compoundWrite, path) != null;\r\n}\r\n/**\r\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n * writes from deeper paths, but will return child nodes from a more shallow path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get the node from.\r\n * @param path - The path to get a complete write\r\n * @returns The node if complete at that path, or null otherwise.\r\n */\r\nfunction compoundWriteGetCompleteNode(compoundWrite, path) {\r\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n    if (rootmost != null) {\r\n        return compoundWrite.writeTree_\r\n            .get(rootmost.path)\r\n            .getChild(newRelativePath(rootmost.path, path));\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Returns all children that are guaranteed to be a complete overwrite.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get children from.\r\n * @returns A list of all complete children.\r\n */\r\nfunction compoundWriteGetCompleteChildren(compoundWrite) {\r\n    const children = [];\r\n    const node = compoundWrite.writeTree_.value;\r\n    if (node != null) {\r\n        // If it's a leaf node, it has no children; so nothing to do.\r\n        if (!node.isLeafNode()) {\r\n            node.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n                children.push(new NamedNode(childName, childNode));\r\n            });\r\n        }\r\n    }\r\n    else {\r\n        compoundWrite.writeTree_.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value != null) {\r\n                children.push(new NamedNode(childName, childTree.value));\r\n            }\r\n        });\r\n    }\r\n    return children;\r\n}\r\nfunction compoundWriteChildCompoundWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return compoundWrite;\r\n    }\r\n    else {\r\n        const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\r\n        if (shadowingNode != null) {\r\n            return new CompoundWrite(new ImmutableTree(shadowingNode));\r\n        }\r\n        else {\r\n            return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n * @returns Whether this CompoundWrite is empty\r\n */\r\nfunction compoundWriteIsEmpty(compoundWrite) {\r\n    return compoundWrite.writeTree_.isEmpty();\r\n}\r\n/**\r\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n * node\r\n * @param node - The node to apply this CompoundWrite to\r\n * @returns The node with all writes applied\r\n */\r\nfunction compoundWriteApply(compoundWrite, node) {\r\n    return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\r\n}\r\nfunction applySubtreeWrite(relativePath, writeTree, node) {\r\n    if (writeTree.value != null) {\r\n        // Since there a write is always a leaf, we're done here\r\n        return node.updateChild(relativePath, writeTree.value);\r\n    }\r\n    else {\r\n        let priorityWrite = null;\r\n        writeTree.children.inorderTraversal((childKey, childTree) => {\r\n            if (childKey === '.priority') {\r\n                // Apply priorities at the end so we don't update priorities for either empty nodes or forget\r\n                // to apply priorities to empty nodes that are later filled\r\n                assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\r\n                priorityWrite = childTree.value;\r\n            }\r\n            else {\r\n                node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);\r\n            }\r\n        });\r\n        // If there was a priority write, we only apply it if the node is not empty\r\n        if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\r\n            node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite);\r\n        }\r\n        return node;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n *\r\n */\r\nfunction writeTreeChildWrites(writeTree, path) {\r\n    return newWriteTreeRef(path, writeTree);\r\n}\r\n/**\r\n * Record a new overwrite from user code.\r\n *\r\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\r\n */\r\nfunction writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');\r\n    if (visible === undefined) {\r\n        visible = true;\r\n    }\r\n    writeTree.allWrites.push({\r\n        path,\r\n        snap,\r\n        writeId,\r\n        visible\r\n    });\r\n    if (visible) {\r\n        writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);\r\n    }\r\n    writeTree.lastWriteId = writeId;\r\n}\r\n/**\r\n * Record a new merge from user code.\r\n */\r\nfunction writeTreeAddMerge(writeTree, path, changedChildren, writeId) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older merge on top of newer ones');\r\n    writeTree.allWrites.push({\r\n        path,\r\n        children: changedChildren,\r\n        writeId,\r\n        visible: true\r\n    });\r\n    writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);\r\n    writeTree.lastWriteId = writeId;\r\n}\r\nfunction writeTreeGetWrite(writeTree, writeId) {\r\n    for (let i = 0; i < writeTree.allWrites.length; i++) {\r\n        const record = writeTree.allWrites[i];\r\n        if (record.writeId === writeId) {\r\n            return record;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n *\r\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n * events as a result).\r\n */\r\nfunction writeTreeRemoveWrite(writeTree, writeId) {\r\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\r\n    // out of order.\r\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\r\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\r\n    const idx = writeTree.allWrites.findIndex(s => {\r\n        return s.writeId === writeId;\r\n    });\r\n    assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\r\n    const writeToRemove = writeTree.allWrites[idx];\r\n    writeTree.allWrites.splice(idx, 1);\r\n    let removedWriteWasVisible = writeToRemove.visible;\r\n    let removedWriteOverlapsWithOtherWrites = false;\r\n    let i = writeTree.allWrites.length - 1;\r\n    while (removedWriteWasVisible && i >= 0) {\r\n        const currentWrite = writeTree.allWrites[i];\r\n        if (currentWrite.visible) {\r\n            if (i >= idx &&\r\n                writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {\r\n                // The removed write was completely shadowed by a subsequent write.\r\n                removedWriteWasVisible = false;\r\n            }\r\n            else if (pathContains(writeToRemove.path, currentWrite.path)) {\r\n                // Either we're covering some writes or they're covering part of us (depending on which came first).\r\n                removedWriteOverlapsWithOtherWrites = true;\r\n            }\r\n        }\r\n        i--;\r\n    }\r\n    if (!removedWriteWasVisible) {\r\n        return false;\r\n    }\r\n    else if (removedWriteOverlapsWithOtherWrites) {\r\n        // There's some shadowing going on. Just rebuild the visible writes from scratch.\r\n        writeTreeResetTree_(writeTree);\r\n        return true;\r\n    }\r\n    else {\r\n        // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\r\n        if (writeToRemove.snap) {\r\n            writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);\r\n        }\r\n        else {\r\n            const children = writeToRemove.children;\r\n            each(children, (childName) => {\r\n                writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));\r\n            });\r\n        }\r\n        return true;\r\n    }\r\n}\r\nfunction writeTreeRecordContainsPath_(writeRecord, path) {\r\n    if (writeRecord.snap) {\r\n        return pathContains(writeRecord.path, path);\r\n    }\r\n    else {\r\n        for (const childName in writeRecord.children) {\r\n            if (writeRecord.children.hasOwnProperty(childName) &&\r\n                pathContains(pathChild(writeRecord.path, childName), path)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n */\r\nfunction writeTreeResetTree_(writeTree) {\r\n    writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());\r\n    if (writeTree.allWrites.length > 0) {\r\n        writeTree.lastWriteId =\r\n            writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\r\n    }\r\n    else {\r\n        writeTree.lastWriteId = -1;\r\n    }\r\n}\r\n/**\r\n * The default filter used when constructing the tree. Keep everything that's visible.\r\n */\r\nfunction writeTreeDefaultFilter_(write) {\r\n    return write.visible;\r\n}\r\n/**\r\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n * event data at that path.\r\n */\r\nfunction writeTreeLayerTree_(writes, filter, treeRoot) {\r\n    let compoundWrite = CompoundWrite.empty();\r\n    for (let i = 0; i < writes.length; ++i) {\r\n        const write = writes[i];\r\n        // Theory, a later set will either:\r\n        // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\r\n        // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\r\n        if (filter(write)) {\r\n            const writePath = write.path;\r\n            let relativePath;\r\n            if (write.snap) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));\r\n                }\r\n                else ;\r\n            }\r\n            else if (write.children) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    if (pathIsEmpty(relativePath)) {\r\n                        compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);\r\n                    }\r\n                    else {\r\n                        const child = safeGet(write.children, pathGetFront(relativePath));\r\n                        if (child) {\r\n                            // There exists a child in this node that matches the root path\r\n                            const deepNode = child.getChild(pathPopFront(relativePath));\r\n                            compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);\r\n                        }\r\n                    }\r\n                }\r\n                else ;\r\n            }\r\n            else {\r\n                throw assertionError('WriteRecord should have .snap or .children');\r\n            }\r\n        }\r\n    }\r\n    return compoundWrite;\r\n}\r\n/**\r\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n * writes), attempt to calculate a complete snapshot for the given path\r\n *\r\n * @param writeIdsToExclude - An optional set to be excluded\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    if (!writeIdsToExclude && !includeHiddenWrites) {\r\n        const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n        if (shadowingNode != null) {\r\n            return shadowingNode;\r\n        }\r\n        else {\r\n            const subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n            if (compoundWriteIsEmpty(subMerge)) {\r\n                return completeServerCache;\r\n            }\r\n            else if (completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {\r\n                // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\r\n                return null;\r\n            }\r\n            else {\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(subMerge, layeredCache);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\r\n            return completeServerCache;\r\n        }\r\n        else {\r\n            // If the server cache is null, and we don't have a complete cache, we need to return null\r\n            if (!includeHiddenWrites &&\r\n                completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {\r\n                return null;\r\n            }\r\n            else {\r\n                const filter = function (write) {\r\n                    return ((write.visible || includeHiddenWrites) &&\r\n                        (!writeIdsToExclude ||\r\n                            !~writeIdsToExclude.indexOf(write.writeId)) &&\r\n                        (pathContains(write.path, treePath) ||\r\n                            pathContains(treePath, write.path)));\r\n                };\r\n                const mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(mergeAtPath, layeredCache);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n * Used when creating new views, to pre-fill their complete event children snapshot.\r\n */\r\nfunction writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {\r\n    let completeChildren = ChildrenNode.EMPTY_NODE;\r\n    const topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n    if (topLevelSet) {\r\n        if (!topLevelSet.isLeafNode()) {\r\n            // we're shadowing everything. Return the children.\r\n            topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\r\n                completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\r\n            });\r\n        }\r\n        return completeChildren;\r\n    }\r\n    else if (completeServerChildren) {\r\n        // Layer any children we have on top of this\r\n        // We know we don't have a top-level set, so just enumerate existing children\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        completeServerChildren.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const node = compoundWriteApply(compoundWriteChildCompoundWrite(merge, new Path(childName)), childNode);\r\n            completeChildren = completeChildren.updateImmediateChild(childName, node);\r\n        });\r\n        // Add any complete children we have from the set\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n    else {\r\n        // We don't have anything to layer on top of. Layer on any children we have\r\n        // Note that we can return an empty snap if we have a defined delete\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n}\r\n/**\r\n * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n * applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist\r\n */\r\nfunction writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {\r\n    assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\r\n    const path = pathChild(treePath, childPath);\r\n    if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\r\n        // At this point we can probably guarantee that we're in case 2, meaning no events\r\n        // May need to check visibility while doing the findRootMostValueAndPath call\r\n        return null;\r\n    }\r\n    else {\r\n        // No complete shadowing. We're either partially shadowing or not shadowing at all.\r\n        const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n        if (compoundWriteIsEmpty(childMerge)) {\r\n            // We're not shadowing at all. Case 1\r\n            return existingServerSnap.getChild(childPath);\r\n        }\r\n        else {\r\n            // This could be more efficient if the serverNode + updates doesn't change the eventSnap\r\n            // However this is tricky to find out, since user updates don't necessary change the server\r\n            // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\r\n            // adds nodes, but doesn't change any existing writes. It is therefore not enough to\r\n            // only check if the updates change the serverNode.\r\n            // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\r\n            return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {\r\n    const path = pathChild(treePath, childKey);\r\n    const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n    if (shadowingNode != null) {\r\n        return shadowingNode;\r\n    }\r\n    else {\r\n        if (existingServerSnap.isCompleteForChild(childKey)) {\r\n            const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n            return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n */\r\nfunction writeTreeShadowingWrite(writeTree, path) {\r\n    return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window.\r\n */\r\nfunction writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {\r\n    let toIterate;\r\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n    const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\r\n    if (shadowingNode != null) {\r\n        toIterate = shadowingNode;\r\n    }\r\n    else if (completeServerData != null) {\r\n        toIterate = compoundWriteApply(merge, completeServerData);\r\n    }\r\n    else {\r\n        // no children to iterate on\r\n        return [];\r\n    }\r\n    toIterate = toIterate.withIndex(index);\r\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\r\n        const nodes = [];\r\n        const cmp = index.getCompare();\r\n        const iter = reverse\r\n            ? toIterate.getReverseIteratorFrom(startPost, index)\r\n            : toIterate.getIteratorFrom(startPost, index);\r\n        let next = iter.getNext();\r\n        while (next && nodes.length < count) {\r\n            if (cmp(next, startPost) !== 0) {\r\n                nodes.push(next);\r\n            }\r\n            next = iter.getNext();\r\n        }\r\n        return nodes;\r\n    }\r\n    else {\r\n        return [];\r\n    }\r\n}\r\nfunction newWriteTree() {\r\n    return {\r\n        visibleWrites: CompoundWrite.empty(),\r\n        allWrites: [],\r\n        lastWriteId: -1\r\n    };\r\n}\r\n/**\r\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n * can lead to a more expensive calculation.\r\n *\r\n * @param writeIdsToExclude - Optional writes to exclude.\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);\r\n}\r\n/**\r\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n * mix of the given server data and write data.\r\n *\r\n */\r\nfunction writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {\r\n    return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);\r\n}\r\n/**\r\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n * if anything, needs to be applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events should be raised\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n *\r\n *\r\n */\r\nfunction writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {\r\n    return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n *\r\n */\r\nfunction writeTreeRefShadowingWrite(writeTreeRef, path) {\r\n    return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window\r\n */\r\nfunction writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {\r\n    return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {\r\n    return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);\r\n}\r\n/**\r\n * Return a WriteTreeRef for a child.\r\n */\r\nfunction writeTreeRefChild(writeTreeRef, childName) {\r\n    return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);\r\n}\r\nfunction newWriteTreeRef(path, writeTree) {\r\n    return {\r\n        treePath: path,\r\n        writeTree\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ChildChangeAccumulator {\r\n    constructor() {\r\n        this.changeMap = new Map();\r\n    }\r\n    trackChildChange(change) {\r\n        const type = change.type;\r\n        const childKey = change.childName;\r\n        assert(type === \"child_added\" /* CHILD_ADDED */ ||\r\n            type === \"child_changed\" /* CHILD_CHANGED */ ||\r\n            type === \"child_removed\" /* CHILD_REMOVED */, 'Only child changes supported for tracking');\r\n        assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\r\n        const oldChange = this.changeMap.get(childKey);\r\n        if (oldChange) {\r\n            const oldType = oldChange.type;\r\n            if (type === \"child_added\" /* CHILD_ADDED */ &&\r\n                oldType === \"child_removed\" /* CHILD_REMOVED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));\r\n            }\r\n            else if (type === \"child_removed\" /* CHILD_REMOVED */ &&\r\n                oldType === \"child_added\" /* CHILD_ADDED */) {\r\n                this.changeMap.delete(childKey);\r\n            }\r\n            else if (type === \"child_removed\" /* CHILD_REMOVED */ &&\r\n                oldType === \"child_changed\" /* CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));\r\n            }\r\n            else if (type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n                oldType === \"child_added\" /* CHILD_ADDED */) {\r\n                this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));\r\n            }\r\n            else if (type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n                oldType === \"child_changed\" /* CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));\r\n            }\r\n            else {\r\n                throw assertionError('Illegal combination of changes: ' +\r\n                    change +\r\n                    ' occurred after ' +\r\n                    oldChange);\r\n            }\r\n        }\r\n        else {\r\n            this.changeMap.set(childKey, change);\r\n        }\r\n    }\r\n    getChanges() {\r\n        return Array.from(this.changeMap.values());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nclass NoCompleteChildSource_ {\r\n    getCompleteChild(childKey) {\r\n        return null;\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Singleton instance.\r\n */\r\nconst NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\r\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n */\r\nclass WriteTreeCompleteChildSource {\r\n    constructor(writes_, viewCache_, optCompleteServerCache_ = null) {\r\n        this.writes_ = writes_;\r\n        this.viewCache_ = viewCache_;\r\n        this.optCompleteServerCache_ = optCompleteServerCache_;\r\n    }\r\n    getCompleteChild(childKey) {\r\n        const node = this.viewCache_.eventCache;\r\n        if (node.isCompleteForChild(childKey)) {\r\n            return node.getNode().getImmediateChild(childKey);\r\n        }\r\n        else {\r\n            const serverNode = this.optCompleteServerCache_ != null\r\n                ? new CacheNode(this.optCompleteServerCache_, true, false)\r\n                : this.viewCache_.serverCache;\r\n            return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\r\n        }\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        const completeServerData = this.optCompleteServerCache_ != null\r\n            ? this.optCompleteServerCache_\r\n            : viewCacheGetCompleteServerSnap(this.viewCache_);\r\n        const nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);\r\n        if (nodes.length === 0) {\r\n            return null;\r\n        }\r\n        else {\r\n            return nodes[0];\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewProcessor(filter) {\r\n    return { filter };\r\n}\r\nfunction viewProcessorAssertIndexed(viewProcessor, viewCache) {\r\n    assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');\r\n    assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');\r\n}\r\nfunction viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {\r\n    const accumulator = new ChildChangeAccumulator();\r\n    let newViewCache, filterServerNode;\r\n    if (operation.type === OperationType.OVERWRITE) {\r\n        const overwrite = operation;\r\n        if (overwrite.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(overwrite.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered  and the\r\n            // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\r\n            // again\r\n            filterServerNode =\r\n                overwrite.source.tagged ||\r\n                    (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\r\n            newViewCache = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.MERGE) {\r\n        const merge = operation;\r\n        if (merge.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(merge.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered\r\n            filterServerNode =\r\n                merge.source.tagged || oldViewCache.serverCache.isFiltered();\r\n            newViewCache = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.ACK_USER_WRITE) {\r\n        const ackUserWrite = operation;\r\n        if (!ackUserWrite.revert) {\r\n            newViewCache = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            newViewCache = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.LISTEN_COMPLETE) {\r\n        newViewCache = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);\r\n    }\r\n    else {\r\n        throw assertionError('Unknown operation type: ' + operation.type);\r\n    }\r\n    const changes = accumulator.getChanges();\r\n    viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\r\n    return { viewCache: newViewCache, changes };\r\n}\r\nfunction viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, accumulator) {\r\n    const eventSnap = newViewCache.eventCache;\r\n    if (eventSnap.isFullyInitialized()) {\r\n        const isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\r\n        const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\r\n        if (accumulator.length > 0 ||\r\n            !oldViewCache.eventCache.isFullyInitialized() ||\r\n            (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\r\n            !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\r\n            accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));\r\n        }\r\n    }\r\n}\r\nfunction viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {\r\n    const oldEventSnap = viewCache.eventCache;\r\n    if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\r\n        // we have a shadowing write, ignore changes\r\n        return viewCache;\r\n    }\r\n    else {\r\n        let newEventCache, serverNode;\r\n        if (pathIsEmpty(changePath)) {\r\n            // TODO: figure out how this plays with \"sliding ack windows\"\r\n            assert(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');\r\n            if (viewCache.serverCache.isFiltered()) {\r\n                // We need to special case this, because we need to only apply writes to complete children, or\r\n                // we might end up raising events for incomplete children. If the server data is filtered deep\r\n                // writes cannot be guaranteed to be complete\r\n                const serverCache = viewCacheGetCompleteServerSnap(viewCache);\r\n                const completeChildren = serverCache instanceof ChildrenNode\r\n                    ? serverCache\r\n                    : ChildrenNode.EMPTY_NODE;\r\n                const completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);\r\n            }\r\n            else {\r\n                const completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);\r\n            }\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(changePath);\r\n            if (childKey === '.priority') {\r\n                assert(pathGetLength(changePath) === 1, \"Can't have a priority with additional path components\");\r\n                const oldEventNode = oldEventSnap.getNode();\r\n                serverNode = viewCache.serverCache.getNode();\r\n                // we might have overwrites for this priority\r\n                const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);\r\n                if (updatedPriority != null) {\r\n                    newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);\r\n                }\r\n                else {\r\n                    // priority didn't change, keep old node\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n            else {\r\n                const childChangePath = pathPopFront(changePath);\r\n                // update child\r\n                let newEventChild;\r\n                if (oldEventSnap.isCompleteForChild(childKey)) {\r\n                    serverNode = viewCache.serverCache.getNode();\r\n                    const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);\r\n                    if (eventChildUpdate != null) {\r\n                        newEventChild = oldEventSnap\r\n                            .getNode()\r\n                            .getImmediateChild(childKey)\r\n                            .updateChild(childChangePath, eventChildUpdate);\r\n                    }\r\n                    else {\r\n                        // Nothing changed, just keep the old child\r\n                        newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n                    }\r\n                }\r\n                else {\r\n                    newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n                }\r\n                if (newEventChild != null) {\r\n                    newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\r\n                }\r\n                else {\r\n                    // no complete child available or no change\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n        }\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());\r\n    }\r\n}\r\nfunction viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\r\n    const oldServerSnap = oldViewCache.serverCache;\r\n    let newServerCache;\r\n    const serverFilter = filterServerNode\r\n        ? viewProcessor.filter\r\n        : viewProcessor.filter.getIndexedFilter();\r\n    if (pathIsEmpty(changePath)) {\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\r\n    }\r\n    else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\r\n        // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\r\n        const newServerNode = oldServerSnap\r\n            .getNode()\r\n            .updateChild(changePath, changedSnap);\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (!oldServerSnap.isCompleteForPath(changePath) &&\r\n            pathGetLength(changePath) > 1) {\r\n            // We don't update incomplete nodes with updates intended for other listeners\r\n            return oldViewCache;\r\n        }\r\n        const childChangePath = pathPopFront(changePath);\r\n        const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\r\n        const newChildNode = childNode.updateChild(childChangePath, changedSnap);\r\n        if (childKey === '.priority') {\r\n            newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\r\n        }\r\n        else {\r\n            newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\r\n        }\r\n    }\r\n    const newViewCache = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());\r\n    const source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, changePath, writesCache, source, accumulator);\r\n}\r\nfunction viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\r\n    const oldEventSnap = oldViewCache.eventCache;\r\n    let newViewCache, newEventCache;\r\n    const source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\r\n    if (pathIsEmpty(changePath)) {\r\n        newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);\r\n        newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (childKey === '.priority') {\r\n            newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);\r\n            newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\r\n        }\r\n        else {\r\n            const childChangePath = pathPopFront(changePath);\r\n            const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n            let newChild;\r\n            if (pathIsEmpty(childChangePath)) {\r\n                // Child overwrite, we can replace the child\r\n                newChild = changedSnap;\r\n            }\r\n            else {\r\n                const childNode = source.getCompleteChild(childKey);\r\n                if (childNode != null) {\r\n                    if (pathGetBack(childChangePath) === '.priority' &&\r\n                        childNode.getChild(pathParent(childChangePath)).isEmpty()) {\r\n                        // This is a priority update on an empty node. If this node exists on the server, the\r\n                        // server will send down the priority in the update, so ignore for now\r\n                        newChild = childNode;\r\n                    }\r\n                    else {\r\n                        newChild = childNode.updateChild(childChangePath, changedSnap);\r\n                    }\r\n                }\r\n                else {\r\n                    // There is no complete child node available\r\n                    newChild = ChildrenNode.EMPTY_NODE;\r\n                }\r\n            }\r\n            if (!oldChild.equals(newChild)) {\r\n                const newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\r\n                newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());\r\n            }\r\n            else {\r\n                newViewCache = oldViewCache;\r\n            }\r\n        }\r\n    }\r\n    return newViewCache;\r\n}\r\nfunction viewProcessorCacheHasChild(viewCache, childKey) {\r\n    return viewCache.eventCache.isCompleteForChild(childKey);\r\n}\r\nfunction viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorApplyMerge(viewProcessor, node, merge) {\r\n    merge.foreach((relativePath, childNode) => {\r\n        node = node.updateChild(relativePath, childNode);\r\n    });\r\n    return node;\r\n}\r\nfunction viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\r\n    // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\r\n    // wait for the complete data update coming soon.\r\n    if (viewCache.serverCache.getNode().isEmpty() &&\r\n        !viewCache.serverCache.isFullyInitialized()) {\r\n        return viewCache;\r\n    }\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    let viewMergeTree;\r\n    if (pathIsEmpty(path)) {\r\n        viewMergeTree = changedChildren;\r\n    }\r\n    else {\r\n        viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);\r\n    }\r\n    const serverNode = viewCache.serverCache.getNode();\r\n    viewMergeTree.children.inorderTraversal((childKey, childTree) => {\r\n        if (serverNode.hasChild(childKey)) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\r\n        const isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) &&\r\n            childMergeTree.value === undefined;\r\n        if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\r\n    if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\r\n        return viewCache;\r\n    }\r\n    // Only filter server node if it is currently filtered\r\n    const filterServerNode = viewCache.serverCache.isFiltered();\r\n    // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\r\n    // now that it won't be shadowed.\r\n    const serverCache = viewCache.serverCache;\r\n    if (affectedTree.value != null) {\r\n        // This is an overwrite.\r\n        if ((pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\r\n            serverCache.isCompleteForPath(ackPath)) {\r\n            return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else if (pathIsEmpty(ackPath)) {\r\n            // This is a goofy edge case where we are acking data at this location but don't have full data.  We\r\n            // should just re-apply whatever we have in our cache as a merge.\r\n            let changedChildren = new ImmutableTree(null);\r\n            serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\r\n                changedChildren = changedChildren.set(new Path(name), node);\r\n            });\r\n            return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else {\r\n            return viewCache;\r\n        }\r\n    }\r\n    else {\r\n        // This is a merge.\r\n        let changedChildren = new ImmutableTree(null);\r\n        affectedTree.foreach((mergePath, value) => {\r\n            const serverCachePath = pathChild(ackPath, mergePath);\r\n            if (serverCache.isCompleteForPath(serverCachePath)) {\r\n                changedChildren = changedChildren.set(mergePath, serverCache.getNode().getChild(serverCachePath));\r\n            }\r\n        });\r\n        return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n    }\r\n}\r\nfunction viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {\r\n    const oldServerNode = viewCache.serverCache;\r\n    const newViewCache = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\r\n}\r\nfunction viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {\r\n    let complete;\r\n    if (writeTreeRefShadowingWrite(writesCache, path) != null) {\r\n        return viewCache;\r\n    }\r\n    else {\r\n        const source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\r\n        const oldEventCache = viewCache.eventCache.getNode();\r\n        let newEventCache;\r\n        if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\r\n            let newNode;\r\n            if (viewCache.serverCache.isFullyInitialized()) {\r\n                newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n            }\r\n            else {\r\n                const serverChildren = viewCache.serverCache.getNode();\r\n                assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\r\n                newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);\r\n            }\r\n            newNode = newNode;\r\n            newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(path);\r\n            let newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n            if (newChild == null &&\r\n                viewCache.serverCache.isCompleteForChild(childKey)) {\r\n                newChild = oldEventCache.getImmediateChild(childKey);\r\n            }\r\n            if (newChild != null) {\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);\r\n            }\r\n            else if (viewCache.eventCache.getNode().hasChild(childKey)) {\r\n                // No complete child available, delete the existing one, if any\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);\r\n            }\r\n            else {\r\n                newEventCache = oldEventCache;\r\n            }\r\n            if (newEventCache.isEmpty() &&\r\n                viewCache.serverCache.isFullyInitialized()) {\r\n                // We might have reverted all child writes. Maybe the old event was a leaf node\r\n                complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                if (complete.isLeafNode()) {\r\n                    newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);\r\n                }\r\n            }\r\n        }\r\n        complete =\r\n            viewCache.serverCache.isFullyInitialized() ||\r\n                writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n */\r\nclass View {\r\n    constructor(query_, initialViewCache) {\r\n        this.query_ = query_;\r\n        this.eventRegistrations_ = [];\r\n        const params = this.query_._queryParams;\r\n        const indexFilter = new IndexedFilter(params.getIndex());\r\n        const filter = queryParamsGetNodeFilter(params);\r\n        this.processor_ = newViewProcessor(filter);\r\n        const initialServerCache = initialViewCache.serverCache;\r\n        const initialEventCache = initialViewCache.eventCache;\r\n        // Don't filter server node with other filter than index, wait for tagged listen\r\n        const serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\r\n        const eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\r\n        const newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\r\n        const newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\r\n        this.viewCache_ = newViewCache(newEventCache, newServerCache);\r\n        this.eventGenerator_ = new EventGenerator(this.query_);\r\n    }\r\n    get query() {\r\n        return this.query_;\r\n    }\r\n}\r\nfunction viewGetServerCache(view) {\r\n    return view.viewCache_.serverCache.getNode();\r\n}\r\nfunction viewGetCompleteNode(view) {\r\n    return viewCacheGetCompleteEventSnap(view.viewCache_);\r\n}\r\nfunction viewGetCompleteServerCache(view, path) {\r\n    const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\r\n    if (cache) {\r\n        // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\r\n        // we need to see if it contains the child we're interested in.\r\n        if (view.query._queryParams.loadsAllData() ||\r\n            (!pathIsEmpty(path) &&\r\n                !cache.getImmediateChild(pathGetFront(path)).isEmpty())) {\r\n            return cache.getChild(path);\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction viewIsEmpty(view) {\r\n    return view.eventRegistrations_.length === 0;\r\n}\r\nfunction viewAddEventRegistration(view, eventRegistration) {\r\n    view.eventRegistrations_.push(eventRegistration);\r\n}\r\n/**\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction viewRemoveEventRegistration(view, eventRegistration, cancelError) {\r\n    const cancelEvents = [];\r\n    if (cancelError) {\r\n        assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\r\n        const path = view.query._path;\r\n        view.eventRegistrations_.forEach(registration => {\r\n            const maybeEvent = registration.createCancelEvent(cancelError, path);\r\n            if (maybeEvent) {\r\n                cancelEvents.push(maybeEvent);\r\n            }\r\n        });\r\n    }\r\n    if (eventRegistration) {\r\n        let remaining = [];\r\n        for (let i = 0; i < view.eventRegistrations_.length; ++i) {\r\n            const existing = view.eventRegistrations_[i];\r\n            if (!existing.matches(eventRegistration)) {\r\n                remaining.push(existing);\r\n            }\r\n            else if (eventRegistration.hasAnyCallback()) {\r\n                // We're removing just this one\r\n                remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\r\n                break;\r\n            }\r\n        }\r\n        view.eventRegistrations_ = remaining;\r\n    }\r\n    else {\r\n        view.eventRegistrations_ = [];\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n */\r\nfunction viewApplyOperation(view, operation, writesCache, completeServerCache) {\r\n    if (operation.type === OperationType.MERGE &&\r\n        operation.source.queryId !== null) {\r\n        assert(viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');\r\n        assert(viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');\r\n    }\r\n    const oldViewCache = view.viewCache_;\r\n    const result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);\r\n    viewProcessorAssertIndexed(view.processor_, result.viewCache);\r\n    assert(result.viewCache.serverCache.isFullyInitialized() ||\r\n        !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');\r\n    view.viewCache_ = result.viewCache;\r\n    return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);\r\n}\r\nfunction viewGetInitialEvents(view, registration) {\r\n    const eventSnap = view.viewCache_.eventCache;\r\n    const initialChanges = [];\r\n    if (!eventSnap.getNode().isLeafNode()) {\r\n        const eventNode = eventSnap.getNode();\r\n        eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            initialChanges.push(changeChildAdded(key, childNode));\r\n        });\r\n    }\r\n    if (eventSnap.isFullyInitialized()) {\r\n        initialChanges.push(changeValue(eventSnap.getNode()));\r\n    }\r\n    return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);\r\n}\r\nfunction viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {\r\n    const registrations = eventRegistration\r\n        ? [eventRegistration]\r\n        : view.eventRegistrations_;\r\n    return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor$1;\r\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\r\nclass SyncPoint {\r\n    constructor() {\r\n        /**\r\n         * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n         * queryId and the value is the View for that query.\r\n         *\r\n         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n         */\r\n        this.views = new Map();\r\n    }\r\n}\r\nfunction syncPointSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor$1, '__referenceConstructor has already been defined');\r\n    referenceConstructor$1 = val;\r\n}\r\nfunction syncPointGetReferenceConstructor() {\r\n    assert(referenceConstructor$1, 'Reference.ts has not been loaded');\r\n    return referenceConstructor$1;\r\n}\r\nfunction syncPointIsEmpty(syncPoint) {\r\n    return syncPoint.views.size === 0;\r\n}\r\nfunction syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {\r\n    const queryId = operation.source.queryId;\r\n    if (queryId !== null) {\r\n        const view = syncPoint.views.get(queryId);\r\n        assert(view != null, 'SyncTree gave us an op for an invalid query.');\r\n        return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);\r\n    }\r\n    else {\r\n        let events = [];\r\n        for (const view of syncPoint.views.values()) {\r\n            events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Get a view for the specified query.\r\n *\r\n * @param query - The query to return a view for\r\n * @param writesCache\r\n * @param serverCache\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {\r\n    const queryId = query._queryIdentifier;\r\n    const view = syncPoint.views.get(queryId);\r\n    if (!view) {\r\n        // TODO: make writesCache take flag for complete server node\r\n        let eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);\r\n        let eventCacheComplete = false;\r\n        if (eventCache) {\r\n            eventCacheComplete = true;\r\n        }\r\n        else if (serverCache instanceof ChildrenNode) {\r\n            eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);\r\n            eventCacheComplete = false;\r\n        }\r\n        else {\r\n            eventCache = ChildrenNode.EMPTY_NODE;\r\n            eventCacheComplete = false;\r\n        }\r\n        const viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));\r\n        return new View(query, viewCache);\r\n    }\r\n    return view;\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @param query\r\n * @param eventRegistration\r\n * @param writesCache\r\n * @param serverCache - Complete server cache, if we have it.\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);\r\n    if (!syncPoint.views.has(query._queryIdentifier)) {\r\n        syncPoint.views.set(query._queryIdentifier, view);\r\n    }\r\n    // This is guaranteed to exist now, we just created anything that was missing\r\n    viewAddEventRegistration(view, eventRegistration);\r\n    return viewGetInitialEvents(view, eventRegistration);\r\n}\r\n/**\r\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n *\r\n * If query is the default query, we'll check all views for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n *\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns removed queries and any cancel events\r\n */\r\nfunction syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {\r\n    const queryId = query._queryIdentifier;\r\n    const removed = [];\r\n    let cancelEvents = [];\r\n    const hadCompleteView = syncPointHasCompleteView(syncPoint);\r\n    if (queryId === 'default') {\r\n        // When you do ref.off(...), we search all views for the registration to remove.\r\n        for (const [viewQueryId, view] of syncPoint.views.entries()) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(viewQueryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        // remove the callback from the specific view.\r\n        const view = syncPoint.views.get(queryId);\r\n        if (view) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(queryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\r\n        // We removed our last complete view.\r\n        removed.push(new (syncPointGetReferenceConstructor())(query._repo, query._path));\r\n    }\r\n    return { removed, events: cancelEvents };\r\n}\r\nfunction syncPointGetQueryViews(syncPoint) {\r\n    const result = [];\r\n    for (const view of syncPoint.views.values()) {\r\n        if (!view.query._queryParams.loadsAllData()) {\r\n            result.push(view);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * @param path - The path to the desired complete snapshot\r\n * @returns A complete cache, if it exists\r\n */\r\nfunction syncPointGetCompleteServerCache(syncPoint, path) {\r\n    let serverCache = null;\r\n    for (const view of syncPoint.views.values()) {\r\n        serverCache = serverCache || viewGetCompleteServerCache(view, path);\r\n    }\r\n    return serverCache;\r\n}\r\nfunction syncPointViewForQuery(syncPoint, query) {\r\n    const params = query._queryParams;\r\n    if (params.loadsAllData()) {\r\n        return syncPointGetCompleteView(syncPoint);\r\n    }\r\n    else {\r\n        const queryId = query._queryIdentifier;\r\n        return syncPoint.views.get(queryId);\r\n    }\r\n}\r\nfunction syncPointViewExistsForQuery(syncPoint, query) {\r\n    return syncPointViewForQuery(syncPoint, query) != null;\r\n}\r\nfunction syncPointHasCompleteView(syncPoint) {\r\n    return syncPointGetCompleteView(syncPoint) != null;\r\n}\r\nfunction syncPointGetCompleteView(syncPoint) {\r\n    for (const view of syncPoint.views.values()) {\r\n        if (view.query._queryParams.loadsAllData()) {\r\n            return view;\r\n        }\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor;\r\nfunction syncTreeSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor, '__referenceConstructor has already been defined');\r\n    referenceConstructor = val;\r\n}\r\nfunction syncTreeGetReferenceConstructor() {\r\n    assert(referenceConstructor, 'Reference.ts has not been loaded');\r\n    return referenceConstructor;\r\n}\r\n/**\r\n * Static tracker for next query tag.\r\n */\r\nlet syncTreeNextQueryTag_ = 1;\r\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n */\r\nclass SyncTree {\r\n    /**\r\n     * @param listenProvider_ - Used by SyncTree to start / stop listening\r\n     *   to server data.\r\n     */\r\n    constructor(listenProvider_) {\r\n        this.listenProvider_ = listenProvider_;\r\n        /**\r\n         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n         */\r\n        this.syncPointTree_ = new ImmutableTree(null);\r\n        /**\r\n         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n         */\r\n        this.pendingWriteTree_ = newWriteTree();\r\n        this.tagToQueryMap = new Map();\r\n        this.queryToTagMap = new Map();\r\n    }\r\n}\r\n/**\r\n * Apply the data changes for a user-generated set() or transaction() call.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {\r\n    // Record pending write.\r\n    writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);\r\n    if (!visible) {\r\n        return [];\r\n    }\r\n    else {\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));\r\n    }\r\n}\r\n/**\r\n * Apply the data from a user-generated update() call\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {\r\n    // Record pending merge.\r\n    writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));\r\n}\r\n/**\r\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n *\r\n * @param revert - True if the given write failed and needs to be reverted\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAckUserWrite(syncTree, writeId, revert = false) {\r\n    const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\r\n    const needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);\r\n    if (!needToReevaluate) {\r\n        return [];\r\n    }\r\n    else {\r\n        let affectedTree = new ImmutableTree(null);\r\n        if (write.snap != null) {\r\n            // overwrite\r\n            affectedTree = affectedTree.set(newEmptyPath(), true);\r\n        }\r\n        else {\r\n            each(write.children, (pathString) => {\r\n                affectedTree = affectedTree.set(new Path(pathString), true);\r\n            });\r\n        }\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree, revert));\r\n    }\r\n}\r\n/**\r\n * Apply new server data for the specified path..\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerOverwrite(syncTree, path, newData) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));\r\n}\r\n/**\r\n * Apply new server data to be merged in at the specified path.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerMerge(syncTree, path, changedChildren) {\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));\r\n}\r\n/**\r\n * Apply a listen complete for a query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyListenComplete(syncTree, path) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));\r\n}\r\n/**\r\n * Apply a listen complete for a tagged query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedListenComplete(syncTree, path, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Remove event callback(s).\r\n *\r\n * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n *\r\n * @param eventRegistration - If null, all callbacks are removed.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError) {\r\n    // Find the syncPoint first. Then deal with whether or not it has matching listeners\r\n    const path = query._path;\r\n    const maybeSyncPoint = syncTree.syncPointTree_.get(path);\r\n    let cancelEvents = [];\r\n    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\r\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\r\n    // not loadsAllData().\r\n    if (maybeSyncPoint &&\r\n        (query._queryIdentifier === 'default' ||\r\n            syncPointViewExistsForQuery(maybeSyncPoint, query))) {\r\n        const removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);\r\n        if (syncPointIsEmpty(maybeSyncPoint)) {\r\n            syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\r\n        }\r\n        const removed = removedAndEvents.removed;\r\n        cancelEvents = removedAndEvents.events;\r\n        // We may have just removed one of many listeners and can short-circuit this whole process\r\n        // We may also not have removed a default listener, in which case all of the descendant listeners should already be\r\n        // properly set up.\r\n        //\r\n        // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\r\n        // queryId === 'default'\r\n        const removingDefault = -1 !==\r\n            removed.findIndex(query => {\r\n                return query._queryParams.loadsAllData();\r\n            });\r\n        const covered = syncTree.syncPointTree_.findOnPath(path, (relativePath, parentSyncPoint) => syncPointHasCompleteView(parentSyncPoint));\r\n        if (removingDefault && !covered) {\r\n            const subtree = syncTree.syncPointTree_.subtree(path);\r\n            // There are potentially child listeners. Determine what if any listens we need to send before executing the\r\n            // removal\r\n            if (!subtree.isEmpty()) {\r\n                // We need to fold over our subtree and collect the listeners to send\r\n                const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\r\n                // Ok, we've collected all the listens we need. Set them up.\r\n                for (let i = 0; i < newViews.length; ++i) {\r\n                    const view = newViews[i], newQuery = view.query;\r\n                    const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n                    syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery_(syncTree, newQuery), listener.hashFn, listener.onComplete);\r\n                }\r\n            }\r\n        }\r\n        // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\r\n        // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\r\n        // Also, note that if we have a cancelError, it's already been removed at the provider level.\r\n        if (!covered && removed.length > 0 && !cancelError) {\r\n            // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\r\n            // default. Otherwise, we need to iterate through and cancel each individual query\r\n            if (removingDefault) {\r\n                // We don't tag default listeners\r\n                const defaultTag = null;\r\n                syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query), defaultTag);\r\n            }\r\n            else {\r\n                removed.forEach((queryToRemove) => {\r\n                    const tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));\r\n                    syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);\r\n                });\r\n            }\r\n        }\r\n        // Now, clear all of the tags we're tracking for the removed listens\r\n        syncTreeRemoveTags_(syncTree, removed);\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Apply new server data for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey != null) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // Query must have been removed already\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Apply server data to be merged in for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const changeTree = ImmutableTree.fromObject(changedChildren);\r\n        const op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAddEventRegistration(syncTree, query, eventRegistration) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    let foundAncestorDefaultView = false;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(sp);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let serverCacheComplete;\r\n    if (serverCache != null) {\r\n        serverCacheComplete = true;\r\n    }\r\n    else {\r\n        serverCacheComplete = false;\r\n        serverCache = ChildrenNode.EMPTY_NODE;\r\n        const subtree = syncTree.syncPointTree_.subtree(path);\r\n        subtree.foreachChild((childName, childSyncPoint) => {\r\n            const completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());\r\n            if (completeCache) {\r\n                serverCache = serverCache.updateImmediateChild(childName, completeCache);\r\n            }\r\n        });\r\n    }\r\n    const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\r\n    if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\r\n        // We need to track a tag for this query\r\n        const queryKey = syncTreeMakeQueryKey_(query);\r\n        assert(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\r\n        const tag = syncTreeGetNextQueryTag_();\r\n        syncTree.queryToTagMap.set(queryKey, tag);\r\n        syncTree.tagToQueryMap.set(tag, queryKey);\r\n    }\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\r\n    let events = syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);\r\n    if (!viewAlreadyExists && !foundAncestorDefaultView) {\r\n        const view = syncPointViewForQuery(syncPoint, query);\r\n        events = events.concat(syncTreeSetupListener_(syncTree, query, view));\r\n    }\r\n    return events;\r\n}\r\n/**\r\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\r\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\r\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\r\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\r\n *\r\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n *\r\n * @param path - The path to the data we want\r\n * @param writeIdsToExclude - A specific set to be excluded\r\n */\r\nfunction syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {\r\n    const includeHiddenSets = true;\r\n    const writeTree = syncTree.pendingWriteTree_;\r\n    const serverCache = syncTree.syncPointTree_.findOnPath(path, (pathSoFar, syncPoint) => {\r\n        const relativePath = newRelativePath(pathSoFar, path);\r\n        const serverCache = syncPointGetCompleteServerCache(syncPoint, relativePath);\r\n        if (serverCache) {\r\n            return serverCache;\r\n        }\r\n    });\r\n    return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);\r\n}\r\nfunction syncTreeGetServerValue(syncTree, query) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    const serverCacheComplete = serverCache != null;\r\n    const serverCacheNode = serverCacheComplete\r\n        ? new CacheNode(serverCache, true, false)\r\n        : null;\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);\r\n    return viewGetCompleteNode(view);\r\n}\r\n/**\r\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n *\r\n * NOTES:\r\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n *\r\n * - We call applyOperation() on each SyncPoint passing three things:\r\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n *   3. A snapshot Node with cached server data, if we have it.\r\n *\r\n * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n */\r\nfunction syncTreeApplyOperationToSyncPoints_(syncTree, operation) {\r\n    return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_, \r\n    /*serverCache=*/ null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    if (pathIsEmpty(operation.path)) {\r\n        return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\r\n    }\r\n    else {\r\n        const syncPoint = syncPointTree.get(newEmptyPath());\r\n        // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n        if (serverCache == null && syncPoint != null) {\r\n            serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n        }\r\n        let events = [];\r\n        const childName = pathGetFront(operation.path);\r\n        const childOperation = operation.operationForChild(childName);\r\n        const childTree = syncPointTree.children.get(childName);\r\n        if (childTree && childOperation) {\r\n            const childServerCache = serverCache\r\n                ? serverCache.getImmediateChild(childName)\r\n                : null;\r\n            const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n            events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n        if (syncPoint) {\r\n            events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    const syncPoint = syncPointTree.get(newEmptyPath());\r\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n    if (serverCache == null && syncPoint != null) {\r\n        serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let events = [];\r\n    syncPointTree.children.inorderTraversal((childName, childTree) => {\r\n        const childServerCache = serverCache\r\n            ? serverCache.getImmediateChild(childName)\r\n            : null;\r\n        const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n        const childOperation = operation.operationForChild(childName);\r\n        if (childOperation) {\r\n            events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n    });\r\n    if (syncPoint) {\r\n        events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n    }\r\n    return events;\r\n}\r\nfunction syncTreeCreateListenerForView_(syncTree, view) {\r\n    const query = view.query;\r\n    const tag = syncTreeTagForQuery_(syncTree, query);\r\n    return {\r\n        hashFn: () => {\r\n            const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\r\n            return cache.hash();\r\n        },\r\n        onComplete: (status) => {\r\n            if (status === 'ok') {\r\n                if (tag) {\r\n                    return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\r\n                }\r\n                else {\r\n                    return syncTreeApplyListenComplete(syncTree, query._path);\r\n                }\r\n            }\r\n            else {\r\n                // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\r\n                // Note that this may need to be scoped to just this listener if we change permissions on filtered children\r\n                const error = errorForServerCode(status, query);\r\n                return syncTreeRemoveEventRegistration(syncTree, query, \r\n                /*eventRegistration*/ null, error);\r\n            }\r\n        }\r\n    };\r\n}\r\n/**\r\n * Return the tag associated with the given query.\r\n */\r\nfunction syncTreeTagForQuery_(syncTree, query) {\r\n    const queryKey = syncTreeMakeQueryKey_(query);\r\n    return syncTree.queryToTagMap.get(queryKey);\r\n}\r\n/**\r\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n */\r\nfunction syncTreeMakeQueryKey_(query) {\r\n    return query._path.toString() + '$' + query._queryIdentifier;\r\n}\r\n/**\r\n * Return the query associated with the given tag, if we have one\r\n */\r\nfunction syncTreeQueryKeyForTag_(syncTree, tag) {\r\n    return syncTree.tagToQueryMap.get(tag);\r\n}\r\n/**\r\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n */\r\nfunction syncTreeParseQueryKey_(queryKey) {\r\n    const splitIndex = queryKey.indexOf('$');\r\n    assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\r\n    return {\r\n        queryId: queryKey.substr(splitIndex + 1),\r\n        path: new Path(queryKey.substr(0, splitIndex))\r\n    };\r\n}\r\n/**\r\n * A helper method to apply tagged operations\r\n */\r\nfunction syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {\r\n    const syncPoint = syncTree.syncPointTree_.get(queryPath);\r\n    assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);\r\n    return syncPointApplyOperation(syncPoint, operation, writesCache, null);\r\n}\r\n/**\r\n * This collapses multiple unfiltered views into a single view, since we only need a single\r\n * listener for them.\r\n */\r\nfunction syncTreeCollectDistinctViewsForSubTree_(subtree) {\r\n    return subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n        if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n            const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\r\n            return [completeView];\r\n        }\r\n        else {\r\n            // No complete view here, flatten any deeper listens into an array\r\n            let views = [];\r\n            if (maybeChildSyncPoint) {\r\n                views = syncPointGetQueryViews(maybeChildSyncPoint);\r\n            }\r\n            each(childMap, (_key, childViews) => {\r\n                views = views.concat(childViews);\r\n            });\r\n            return views;\r\n        }\r\n    });\r\n}\r\n/**\r\n * Normalizes a query to a query we send the server for listening\r\n *\r\n * @returns The normalized query\r\n */\r\nfunction syncTreeQueryForListening_(query) {\r\n    if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\r\n        // We treat queries that load all data as default queries\r\n        // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\r\n        // from Query\r\n        return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\r\n    }\r\n    else {\r\n        return query;\r\n    }\r\n}\r\nfunction syncTreeRemoveTags_(syncTree, queries) {\r\n    for (let j = 0; j < queries.length; ++j) {\r\n        const removedQuery = queries[j];\r\n        if (!removedQuery._queryParams.loadsAllData()) {\r\n            // We should have a tag for this\r\n            const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\r\n            const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\r\n            syncTree.queryToTagMap.delete(removedQueryKey);\r\n            syncTree.tagToQueryMap.delete(removedQueryTag);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Static accessor for query tags.\r\n */\r\nfunction syncTreeGetNextQueryTag_() {\r\n    return syncTreeNextQueryTag_++;\r\n}\r\n/**\r\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n *\r\n * @returns This method can return events to support synchronous data sources\r\n */\r\nfunction syncTreeSetupListener_(syncTree, query, view) {\r\n    const path = query._path;\r\n    const tag = syncTreeTagForQuery_(syncTree, query);\r\n    const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n    const events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);\r\n    const subtree = syncTree.syncPointTree_.subtree(path);\r\n    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\r\n    // may need to shadow other listens as well.\r\n    if (tag) {\r\n        assert(!syncPointHasCompleteView(subtree.value), \"If we're adding a query, it shouldn't be shadowed\");\r\n    }\r\n    else {\r\n        // Shadow everything at or below this location, this is a default listener.\r\n        const queriesToStop = subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n            if (!pathIsEmpty(relativePath) &&\r\n                maybeChildSyncPoint &&\r\n                syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n                return [syncPointGetCompleteView(maybeChildSyncPoint).query];\r\n            }\r\n            else {\r\n                // No default listener here, flatten any deeper queries into an array\r\n                let queries = [];\r\n                if (maybeChildSyncPoint) {\r\n                    queries = queries.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(view => view.query));\r\n                }\r\n                each(childMap, (_key, childQueries) => {\r\n                    queries = queries.concat(childQueries);\r\n                });\r\n                return queries;\r\n            }\r\n        });\r\n        for (let i = 0; i < queriesToStop.length; ++i) {\r\n            const queryToStop = queriesToStop[i];\r\n            syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery_(syncTree, queryToStop));\r\n        }\r\n    }\r\n    return events;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ExistingValueProvider {\r\n    constructor(node_) {\r\n        this.node_ = node_;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const child = this.node_.getImmediateChild(childName);\r\n        return new ExistingValueProvider(child);\r\n    }\r\n    node() {\r\n        return this.node_;\r\n    }\r\n}\r\nclass DeferredValueProvider {\r\n    constructor(syncTree, path) {\r\n        this.syncTree_ = syncTree;\r\n        this.path_ = path;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const childPath = pathChild(this.path_, childName);\r\n        return new DeferredValueProvider(this.syncTree_, childPath);\r\n    }\r\n    node() {\r\n        return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\r\n    }\r\n}\r\n/**\r\n * Generate placeholders for deferred values.\r\n */\r\nconst generateWithValues = function (values) {\r\n    values = values || {};\r\n    values['timestamp'] = values['timestamp'] || new Date().getTime();\r\n    return values;\r\n};\r\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n */\r\nconst resolveDeferredLeafValue = function (value, existingVal, serverValues) {\r\n    if (!value || typeof value !== 'object') {\r\n        return value;\r\n    }\r\n    assert('.sv' in value, 'Unexpected leaf node or priority contents');\r\n    if (typeof value['.sv'] === 'string') {\r\n        return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\r\n    }\r\n    else if (typeof value['.sv'] === 'object') {\r\n        return resolveComplexDeferredValue(value['.sv'], existingVal);\r\n    }\r\n    else {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\r\n    }\r\n};\r\nconst resolveScalarDeferredValue = function (op, existing, serverValues) {\r\n    switch (op) {\r\n        case 'timestamp':\r\n            return serverValues['timestamp'];\r\n        default:\r\n            assert(false, 'Unexpected server value: ' + op);\r\n    }\r\n};\r\nconst resolveComplexDeferredValue = function (op, existing, unused) {\r\n    if (!op.hasOwnProperty('increment')) {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\r\n    }\r\n    const delta = op['increment'];\r\n    if (typeof delta !== 'number') {\r\n        assert(false, 'Unexpected increment value: ' + delta);\r\n    }\r\n    const existingNode = existing.node();\r\n    assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');\r\n    // Incrementing a non-number sets the value to the incremented amount\r\n    if (!existingNode.isLeafNode()) {\r\n        return delta;\r\n    }\r\n    const leaf = existingNode;\r\n    const existingVal = leaf.getValue();\r\n    if (typeof existingVal !== 'number') {\r\n        return delta;\r\n    }\r\n    // No need to do over/underflow arithmetic here because JS only handles floats under the covers\r\n    return existingVal + delta;\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param path - path to which write is relative\r\n * @param node - new data written at path\r\n * @param syncTree - current data\r\n */\r\nconst resolveDeferredValueTree = function (path, node, syncTree, serverValues) {\r\n    return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n */\r\nconst resolveDeferredValueSnapshot = function (node, existing, serverValues) {\r\n    return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);\r\n};\r\nfunction resolveDeferredValue(node, existingVal, serverValues) {\r\n    const rawPri = node.getPriority().val();\r\n    const priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);\r\n    let newNode;\r\n    if (node.isLeafNode()) {\r\n        const leafNode = node;\r\n        const value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);\r\n        if (value !== leafNode.getValue() ||\r\n            priority !== leafNode.getPriority().val()) {\r\n            return new LeafNode(value, nodeFromJSON(priority));\r\n        }\r\n        else {\r\n            return node;\r\n        }\r\n    }\r\n    else {\r\n        const childrenNode = node;\r\n        newNode = childrenNode;\r\n        if (priority !== childrenNode.getPriority().val()) {\r\n            newNode = newNode.updatePriority(new LeafNode(priority));\r\n        }\r\n        childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);\r\n            if (newChildNode !== childNode) {\r\n                newNode = newNode.updateImmediateChild(childName, newChildNode);\r\n            }\r\n        });\r\n        return newNode;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\r\nclass Tree {\r\n    /**\r\n     * @param name - Optional name of the node.\r\n     * @param parent - Optional parent node.\r\n     * @param node - Optional node to wrap.\r\n     */\r\n    constructor(name = '', parent = null, node = { children: {}, childCount: 0 }) {\r\n        this.name = name;\r\n        this.parent = parent;\r\n        this.node = node;\r\n    }\r\n}\r\n/**\r\n * Returns a sub-Tree for the given path.\r\n *\r\n * @param pathObj - Path to look up.\r\n * @returns Tree for path.\r\n */\r\nfunction treeSubTree(tree, pathObj) {\r\n    // TODO: Require pathObj to be Path?\r\n    let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\r\n    let child = tree, next = pathGetFront(path);\r\n    while (next !== null) {\r\n        const childNode = safeGet(child.node.children, next) || {\r\n            children: {},\r\n            childCount: 0\r\n        };\r\n        child = new Tree(next, child, childNode);\r\n        path = pathPopFront(path);\r\n        next = pathGetFront(path);\r\n    }\r\n    return child;\r\n}\r\n/**\r\n * Returns the data associated with this tree node.\r\n *\r\n * @returns The data or null if no data exists.\r\n */\r\nfunction treeGetValue(tree) {\r\n    return tree.node.value;\r\n}\r\n/**\r\n * Sets data to this tree node.\r\n *\r\n * @param value - Value to set.\r\n */\r\nfunction treeSetValue(tree, value) {\r\n    tree.node.value = value;\r\n    treeUpdateParents(tree);\r\n}\r\n/**\r\n * @returns Whether the tree has any children.\r\n */\r\nfunction treeHasChildren(tree) {\r\n    return tree.node.childCount > 0;\r\n}\r\n/**\r\n * @returns Whethe rthe tree is empty (no value or children).\r\n */\r\nfunction treeIsEmpty(tree) {\r\n    return treeGetValue(tree) === undefined && !treeHasChildren(tree);\r\n}\r\n/**\r\n * Calls action for each child of this tree node.\r\n *\r\n * @param action - Action to be called for each child.\r\n */\r\nfunction treeForEachChild(tree, action) {\r\n    each(tree.node.children, (child, childTree) => {\r\n        action(new Tree(child, tree, childTree));\r\n    });\r\n}\r\n/**\r\n * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n *\r\n * @param action - Action to be called for each child.\r\n * @param includeSelf - Whether to call action on this node as well. Defaults to\r\n *   false.\r\n * @param childrenFirst - Whether to call action on children before calling it on\r\n *   parent.\r\n */\r\nfunction treeForEachDescendant(tree, action, includeSelf, childrenFirst) {\r\n    if (includeSelf && !childrenFirst) {\r\n        action(tree);\r\n    }\r\n    treeForEachChild(tree, child => {\r\n        treeForEachDescendant(child, action, true, childrenFirst);\r\n    });\r\n    if (includeSelf && childrenFirst) {\r\n        action(tree);\r\n    }\r\n}\r\n/**\r\n * Calls action on each ancestor node.\r\n *\r\n * @param action - Action to be called on each parent; return\r\n *   true to abort.\r\n * @param includeSelf - Whether to call action on this node as well.\r\n * @returns true if the action callback returned true.\r\n */\r\nfunction treeForEachAncestor(tree, action, includeSelf) {\r\n    let node = includeSelf ? tree : tree.parent;\r\n    while (node !== null) {\r\n        if (action(node)) {\r\n            return true;\r\n        }\r\n        node = node.parent;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * @returns The path of this tree node, as a Path.\r\n */\r\nfunction treeGetPath(tree) {\r\n    return new Path(tree.parent === null\r\n        ? tree.name\r\n        : treeGetPath(tree.parent) + '/' + tree.name);\r\n}\r\n/**\r\n * Adds or removes this child from its parent based on whether it's empty or not.\r\n */\r\nfunction treeUpdateParents(tree) {\r\n    if (tree.parent !== null) {\r\n        treeUpdateChild(tree.parent, tree.name, tree);\r\n    }\r\n}\r\n/**\r\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n *\r\n * @param childName - The name of the child to update.\r\n * @param child - The child to update.\r\n */\r\nfunction treeUpdateChild(tree, childName, child) {\r\n    const childEmpty = treeIsEmpty(child);\r\n    const childExists = contains(tree.node.children, childName);\r\n    if (childEmpty && childExists) {\r\n        delete tree.node.children[childName];\r\n        tree.node.childCount--;\r\n        treeUpdateParents(tree);\r\n    }\r\n    else if (!childEmpty && !childExists) {\r\n        tree.node.children[childName] = child.node;\r\n        tree.node.childCount++;\r\n        treeUpdateParents(tree);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * True for invalid Firebase keys\r\n */\r\nconst INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n */\r\nconst INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * Maximum number of characters to allow in leaf value\r\n */\r\nconst MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\r\nconst isValidKey = function (key) {\r\n    return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));\r\n};\r\nconst isValidPathString = function (pathString) {\r\n    return (typeof pathString === 'string' &&\r\n        pathString.length !== 0 &&\r\n        !INVALID_PATH_REGEX_.test(pathString));\r\n};\r\nconst isValidRootPathString = function (pathString) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    return isValidPathString(pathString);\r\n};\r\nconst isValidPriority = function (priority) {\r\n    return (priority === null ||\r\n        typeof priority === 'string' ||\r\n        (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\r\n        (priority &&\r\n            typeof priority === 'object' &&\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            contains(priority, '.sv')));\r\n};\r\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n */\r\nconst validateFirebaseDataArg = function (fnName, value, path, optional) {\r\n    if (optional && value === undefined) {\r\n        return;\r\n    }\r\n    validateFirebaseData(errorPrefix(fnName, 'value'), value, path);\r\n};\r\n/**\r\n * Validate a data object client-side before sending to server.\r\n */\r\nconst validateFirebaseData = function (errorPrefix, data, path_) {\r\n    const path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\r\n    if (data === undefined) {\r\n        throw new Error(errorPrefix + 'contains undefined ' + validationPathToErrorString(path));\r\n    }\r\n    if (typeof data === 'function') {\r\n        throw new Error(errorPrefix +\r\n            'contains a function ' +\r\n            validationPathToErrorString(path) +\r\n            ' with contents = ' +\r\n            data.toString());\r\n    }\r\n    if (isInvalidJSONNumber(data)) {\r\n        throw new Error(errorPrefix +\r\n            'contains ' +\r\n            data.toString() +\r\n            ' ' +\r\n            validationPathToErrorString(path));\r\n    }\r\n    // Check max leaf size, but try to avoid the utf8 conversion if we can.\r\n    if (typeof data === 'string' &&\r\n        data.length > MAX_LEAF_SIZE_ / 3 &&\r\n        stringLength(data) > MAX_LEAF_SIZE_) {\r\n        throw new Error(errorPrefix +\r\n            'contains a string greater than ' +\r\n            MAX_LEAF_SIZE_ +\r\n            ' utf8 bytes ' +\r\n            validationPathToErrorString(path) +\r\n            \" ('\" +\r\n            data.substring(0, 50) +\r\n            \"...')\");\r\n    }\r\n    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\r\n    // to save extra walking of large objects.\r\n    if (data && typeof data === 'object') {\r\n        let hasDotValue = false;\r\n        let hasActualChild = false;\r\n        each(data, (key, value) => {\r\n            if (key === '.value') {\r\n                hasDotValue = true;\r\n            }\r\n            else if (key !== '.priority' && key !== '.sv') {\r\n                hasActualChild = true;\r\n                if (!isValidKey(key)) {\r\n                    throw new Error(errorPrefix +\r\n                        ' contains an invalid key (' +\r\n                        key +\r\n                        ') ' +\r\n                        validationPathToErrorString(path) +\r\n                        '.  Keys must be non-empty strings ' +\r\n                        'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n                }\r\n            }\r\n            validationPathPush(path, key);\r\n            validateFirebaseData(errorPrefix, value, path);\r\n            validationPathPop(path);\r\n        });\r\n        if (hasDotValue && hasActualChild) {\r\n            throw new Error(errorPrefix +\r\n                ' contains \".value\" child ' +\r\n                validationPathToErrorString(path) +\r\n                ' in addition to actual children.');\r\n        }\r\n    }\r\n};\r\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n */\r\nconst validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\r\n    let i, curPath;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        const keys = pathSlice(curPath);\r\n        for (let j = 0; j < keys.length; j++) {\r\n            if (keys[j] === '.priority' && j === keys.length - 1) ;\r\n            else if (!isValidKey(keys[j])) {\r\n                throw new Error(errorPrefix +\r\n                    'contains an invalid key (' +\r\n                    keys[j] +\r\n                    ') in path ' +\r\n                    curPath.toString() +\r\n                    '. Keys must be non-empty strings ' +\r\n                    'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n            }\r\n        }\r\n    }\r\n    // Check that update keys are not descendants of each other.\r\n    // We rely on the property that sorting guarantees that ancestors come\r\n    // right before descendants.\r\n    mergePaths.sort(pathCompare);\r\n    let prevPath = null;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        if (prevPath !== null && pathContains(prevPath, curPath)) {\r\n            throw new Error(errorPrefix +\r\n                'contains a path ' +\r\n                prevPath.toString() +\r\n                ' that is ancestor of another path ' +\r\n                curPath.toString());\r\n        }\r\n        prevPath = curPath;\r\n    }\r\n};\r\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n */\r\nconst validateFirebaseMergeDataArg = function (fnName, data, path, optional) {\r\n    if (optional && data === undefined) {\r\n        return;\r\n    }\r\n    const errorPrefix$1 = errorPrefix(fnName, 'values');\r\n    if (!(data && typeof data === 'object') || Array.isArray(data)) {\r\n        throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');\r\n    }\r\n    const mergePaths = [];\r\n    each(data, (key, value) => {\r\n        const curPath = new Path(key);\r\n        validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));\r\n        if (pathGetBack(curPath) === '.priority') {\r\n            if (!isValidPriority(value)) {\r\n                throw new Error(errorPrefix$1 +\r\n                    \"contains an invalid value for '\" +\r\n                    curPath.toString() +\r\n                    \"', which must be a valid \" +\r\n                    'Firebase priority (a string, finite number, server value, or null).');\r\n            }\r\n        }\r\n        mergePaths.push(curPath);\r\n    });\r\n    validateFirebaseMergePaths(errorPrefix$1, mergePaths);\r\n};\r\nconst validatePriority = function (fnName, priority, optional) {\r\n    if (optional && priority === undefined) {\r\n        return;\r\n    }\r\n    if (isInvalidJSONNumber(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'is ' +\r\n            priority.toString() +\r\n            ', but must be a valid Firebase priority (a string, finite number, ' +\r\n            'server value, or null).');\r\n    }\r\n    // Special case to allow importing data with a .sv.\r\n    if (!isValidPriority(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'must be a valid Firebase priority ' +\r\n            '(a string, finite number, server value, or null).');\r\n    }\r\n};\r\nconst validateKey = function (fnName, argumentName, key, optional) {\r\n    if (optional && key === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidKey(key)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid key = \"' +\r\n            key +\r\n            '\".  Firebase keys must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\r\n    }\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst validatePathString = function (fnName, argumentName, pathString, optional) {\r\n    if (optional && pathString === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidPathString(pathString)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid path = \"' +\r\n            pathString +\r\n            '\". Paths must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\r\n    }\r\n};\r\nconst validateRootPathString = function (fnName, argumentName, pathString, optional) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    validatePathString(fnName, argumentName, pathString, optional);\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst validateWritablePath = function (fnName, path) {\r\n    if (pathGetFront(path) === '.info') {\r\n        throw new Error(fnName + \" failed = Can't modify data under /.info/\");\r\n    }\r\n};\r\nconst validateUrl = function (fnName, parsedUrl) {\r\n    // TODO = Validate server better.\r\n    const pathString = parsedUrl.path.toString();\r\n    if (!(typeof parsedUrl.repoInfo.host === 'string') ||\r\n        parsedUrl.repoInfo.host.length === 0 ||\r\n        (!isValidKey(parsedUrl.repoInfo.namespace) &&\r\n            parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\r\n        (pathString.length !== 0 && !isValidRootPathString(pathString))) {\r\n        throw new Error(errorPrefix(fnName, 'url') +\r\n            'must be a valid firebase URL and ' +\r\n            'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\r\n    }\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n */\r\nclass EventQueue {\r\n    constructor() {\r\n        this.eventLists_ = [];\r\n        /**\r\n         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n         */\r\n        this.recursionDepth_ = 0;\r\n    }\r\n}\r\n/**\r\n * @param eventDataList - The new events to queue.\r\n */\r\nfunction eventQueueQueueEvents(eventQueue, eventDataList) {\r\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\r\n    let currList = null;\r\n    for (let i = 0; i < eventDataList.length; i++) {\r\n        const data = eventDataList[i];\r\n        const path = data.getPath();\r\n        if (currList !== null && !pathEquals(path, currList.path)) {\r\n            eventQueue.eventLists_.push(currList);\r\n            currList = null;\r\n        }\r\n        if (currList === null) {\r\n            currList = { events: [], path };\r\n        }\r\n        currList.events.push(data);\r\n    }\r\n    if (currList) {\r\n        eventQueue.eventLists_.push(currList);\r\n    }\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n * for the specified path.\r\n *\r\n * It is assumed that the new events are all for the specified path.\r\n *\r\n * @param path - The path to raise events for.\r\n * @param eventDataList - The new events to raise.\r\n */\r\nfunction eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathEquals(eventPath, path));\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n * locations related to the specified change path (i.e. all ancestors and descendants).\r\n *\r\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n *\r\n * @param changedPath - The path to raise events for.\r\n * @param eventDataList - The events to raise\r\n */\r\nfunction eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathContains(eventPath, changedPath) ||\r\n        pathContains(changedPath, eventPath));\r\n}\r\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {\r\n    eventQueue.recursionDepth_++;\r\n    let sentAll = true;\r\n    for (let i = 0; i < eventQueue.eventLists_.length; i++) {\r\n        const eventList = eventQueue.eventLists_[i];\r\n        if (eventList) {\r\n            const eventPath = eventList.path;\r\n            if (predicate(eventPath)) {\r\n                eventListRaise(eventQueue.eventLists_[i]);\r\n                eventQueue.eventLists_[i] = null;\r\n            }\r\n            else {\r\n                sentAll = false;\r\n            }\r\n        }\r\n    }\r\n    if (sentAll) {\r\n        eventQueue.eventLists_ = [];\r\n    }\r\n    eventQueue.recursionDepth_--;\r\n}\r\n/**\r\n * Iterates through the list and raises each event\r\n */\r\nfunction eventListRaise(eventList) {\r\n    for (let i = 0; i < eventList.events.length; i++) {\r\n        const eventData = eventList.events[i];\r\n        if (eventData !== null) {\r\n            eventList.events[i] = null;\r\n            const eventFn = eventData.getEventRunner();\r\n            if (logger) {\r\n                log('event: ' + eventData.toString());\r\n            }\r\n            exceptionGuard(eventFn);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst INTERRUPT_REASON = 'repo_interrupt';\r\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it. Among other\r\n * things this ensure that if there's ever a bug causing a mismatch between\r\n * client / server hashes for some data, we won't retry indefinitely.\r\n */\r\nconst MAX_TRANSACTION_RETRIES = 25;\r\n/**\r\n * A connection to a single data repository.\r\n */\r\nclass Repo {\r\n    constructor(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {\r\n        this.repoInfo_ = repoInfo_;\r\n        this.forceRestClient_ = forceRestClient_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckProvider_ = appCheckProvider_;\r\n        this.dataUpdateCount = 0;\r\n        this.statsListener_ = null;\r\n        this.eventQueue_ = new EventQueue();\r\n        this.nextWriteId_ = 1;\r\n        this.interceptServerDataCallback_ = null;\r\n        /** A list of data pieces and paths to be set when this client disconnects. */\r\n        this.onDisconnect_ = newSparseSnapshotTree();\r\n        /** Stores queues of outstanding transactions for Firebase locations. */\r\n        this.transactionQueueTree_ = new Tree();\r\n        // TODO: This should be @private but it's used by test_access.js and internal.js\r\n        this.persistentConnection_ = null;\r\n        // This key is intentionally not updated if RepoInfo is later changed or replaced\r\n        this.key = this.repoInfo_.toURLString();\r\n    }\r\n    /**\r\n     * @returns The URL corresponding to the root of this Firebase.\r\n     */\r\n    toString() {\r\n        return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);\r\n    }\r\n}\r\nfunction repoStart(repo, appId, authOverride) {\r\n    repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\r\n    if (repo.forceRestClient_ || beingCrawled()) {\r\n        repo.server_ = new ReadonlyRestClient(repo.repoInfo_, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_);\r\n        // Minor hack: Fire onConnect immediately, since there's no actual connection.\r\n        setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\r\n    }\r\n    else {\r\n        // Validate authOverride\r\n        if (typeof authOverride !== 'undefined' && authOverride !== null) {\r\n            if (typeof authOverride !== 'object') {\r\n                throw new Error('Only objects are supported for option databaseAuthVariableOverride');\r\n            }\r\n            try {\r\n                stringify(authOverride);\r\n            }\r\n            catch (e) {\r\n                throw new Error('Invalid authOverride provided: ' + e);\r\n            }\r\n        }\r\n        repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, (connectStatus) => {\r\n            repoOnConnectStatus(repo, connectStatus);\r\n        }, (updates) => {\r\n            repoOnServerInfoUpdate(repo, updates);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);\r\n        repo.server_ = repo.persistentConnection_;\r\n    }\r\n    repo.authTokenProvider_.addTokenChangeListener(token => {\r\n        repo.server_.refreshAuthToken(token);\r\n    });\r\n    repo.appCheckProvider_.addTokenChangeListener(result => {\r\n        repo.server_.refreshAppCheckToken(result.token);\r\n    });\r\n    // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\r\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\r\n    repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, () => new StatsReporter(repo.stats_, repo.server_));\r\n    // Used for .info.\r\n    repo.infoData_ = new SnapshotHolder();\r\n    repo.infoSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            let infoEvents = [];\r\n            const node = repo.infoData_.getNode(query._path);\r\n            // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\r\n            // on initial data...\r\n            if (!node.isEmpty()) {\r\n                infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);\r\n                setTimeout(() => {\r\n                    onComplete('ok');\r\n                }, 0);\r\n            }\r\n            return infoEvents;\r\n        },\r\n        stopListening: () => { }\r\n    });\r\n    repoUpdateInfo(repo, 'connected', false);\r\n    repo.serverSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            repo.server_.listen(query, currentHashFn, tag, (status, data) => {\r\n                const events = onComplete(status, data);\r\n                eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\r\n            });\r\n            // No synchronous events for network-backed sync trees\r\n            return [];\r\n        },\r\n        stopListening: (query, tag) => {\r\n            repo.server_.unlisten(query, tag);\r\n        }\r\n    });\r\n}\r\n/**\r\n * @returns The time in milliseconds, taking the server offset into account if we have one.\r\n */\r\nfunction repoServerTime(repo) {\r\n    const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\r\n    const offset = offsetNode.val() || 0;\r\n    return new Date().getTime() + offset;\r\n}\r\n/**\r\n * Generate ServerValues using some variables from the repo object.\r\n */\r\nfunction repoGenerateServerValues(repo) {\r\n    return generateWithValues({\r\n        timestamp: repoServerTime(repo)\r\n    });\r\n}\r\n/**\r\n * Called by realtime when we get new messages from the server.\r\n */\r\nfunction repoOnDataUpdate(repo, pathString, data, isMerge, tag) {\r\n    // For testing.\r\n    repo.dataUpdateCount++;\r\n    const path = new Path(pathString);\r\n    data = repo.interceptServerDataCallback_\r\n        ? repo.interceptServerDataCallback_(pathString, data)\r\n        : data;\r\n    let events = [];\r\n    if (tag) {\r\n        if (isMerge) {\r\n            const taggedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n            events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);\r\n        }\r\n        else {\r\n            const taggedSnap = nodeFromJSON(data);\r\n            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);\r\n        }\r\n    }\r\n    else if (isMerge) {\r\n        const changedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n        events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);\r\n    }\r\n    else {\r\n        const snap = nodeFromJSON(data);\r\n        events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\r\n    }\r\n    let affectedPath = path;\r\n    if (events.length > 0) {\r\n        // Since we have a listener outstanding for each transaction, receiving any events\r\n        // is a proxy for some change having occurred.\r\n        affectedPath = repoRerunTransactions(repo, path);\r\n    }\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\r\n}\r\nfunction repoOnConnectStatus(repo, connectStatus) {\r\n    repoUpdateInfo(repo, 'connected', connectStatus);\r\n    if (connectStatus === false) {\r\n        repoRunOnDisconnectEvents(repo);\r\n    }\r\n}\r\nfunction repoOnServerInfoUpdate(repo, updates) {\r\n    each(updates, (key, value) => {\r\n        repoUpdateInfo(repo, key, value);\r\n    });\r\n}\r\nfunction repoUpdateInfo(repo, pathString, value) {\r\n    const path = new Path('/.info/' + pathString);\r\n    const newNode = nodeFromJSON(value);\r\n    repo.infoData_.updateSnapshot(path, newNode);\r\n    const events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n}\r\nfunction repoGetNextWriteId(repo) {\r\n    return repo.nextWriteId_++;\r\n}\r\n/**\r\n * The purpose of `getValue` is to return the latest known value\r\n * satisfying `query`.\r\n *\r\n * This method will first check for in-memory cached values\r\n * belonging to active listeners. If they are found, such values\r\n * are considered to be the most up-to-date.\r\n *\r\n * If the client is not connected, this method will try to\r\n * establish a connection and request the value for `query`. If\r\n * the client is not able to retrieve the query result, it reports\r\n * an error.\r\n *\r\n * @param query - The query to surface a value for.\r\n */\r\nfunction repoGetValue(repo, query) {\r\n    // Only active queries are cached. There is no persisted cache.\r\n    const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\r\n    if (cached != null) {\r\n        return Promise.resolve(cached);\r\n    }\r\n    return repo.server_.get(query).then(payload => {\r\n        const node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());\r\n        const events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);\r\n        eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n        return Promise.resolve(node);\r\n    }, err => {\r\n        repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\r\n        return Promise.reject(new Error(err));\r\n    });\r\n}\r\nfunction repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {\r\n    repoLog(repo, 'set', {\r\n        path: path.toString(),\r\n        value: newVal,\r\n        priority: newPriority\r\n    });\r\n    // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\r\n    // (b) store unresolved paths on JSON parse\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\r\n    const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\r\n    const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\r\n    const writeId = repoGetNextWriteId(repo);\r\n    const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);\r\n    eventQueueQueueEvents(repo.eventQueue_, events);\r\n    repo.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), (status, errorReason) => {\r\n        const success = status === 'ok';\r\n        if (!success) {\r\n            warn('set at ' + path + ' failed: ' + status);\r\n        }\r\n        const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n    const affectedPath = repoAbortTransactions(repo, path);\r\n    repoRerunTransactions(repo, affectedPath);\r\n    // We queued the events above, so just flush the queue here\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\r\n}\r\nfunction repoUpdate(repo, path, childrenToMerge, onComplete) {\r\n    repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\r\n    // Start with our existing data and merge each child into it.\r\n    let empty = true;\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const changedChildren = {};\r\n    each(childrenToMerge, (changedKey, changedValue) => {\r\n        empty = false;\r\n        changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);\r\n    });\r\n    if (!empty) {\r\n        const writeId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId);\r\n        eventQueueQueueEvents(repo.eventQueue_, events);\r\n        repo.server_.merge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n            const success = status === 'ok';\r\n            if (!success) {\r\n                warn('update at ' + path + ' failed: ' + status);\r\n            }\r\n            const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n            const affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);\r\n            repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n        });\r\n        each(childrenToMerge, (changedPath) => {\r\n            const affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));\r\n            repoRerunTransactions(repo, affectedPath);\r\n        });\r\n        // We queued the events above, so just flush the queue here\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\r\n    }\r\n    else {\r\n        log(\"update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n    }\r\n}\r\n/**\r\n * Applies all of the changes stored up in the onDisconnect_ tree.\r\n */\r\nfunction repoRunOnDisconnectEvents(repo) {\r\n    repoLog(repo, 'onDisconnectEvents');\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const resolvedOnDisconnectTree = newSparseSnapshotTree();\r\n    sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), (path, node) => {\r\n        const resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);\r\n        sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\r\n    });\r\n    let events = [];\r\n    sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), (path, snap) => {\r\n        events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));\r\n        const affectedPath = repoAbortTransactions(repo, path);\r\n        repoRerunTransactions(repo, affectedPath);\r\n    });\r\n    repo.onDisconnect_ = newSparseSnapshotTree();\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\r\n}\r\nfunction repoOnDisconnectCancel(repo, path, onComplete) {\r\n    repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeForget(repo.onDisconnect_, path);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSet(repo, path, value, onComplete) {\r\n    const newNode = nodeFromJSON(value);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {\r\n    const newNode = nodeFromJSON(value, priority);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {\r\n    if (isEmpty(childrenToMerge)) {\r\n        log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n        return;\r\n    }\r\n    repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            each(childrenToMerge, (childName, childNode) => {\r\n                const newChildNode = nodeFromJSON(childNode);\r\n                sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);\r\n            });\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoAddEventCallbackForQuery(repo, query, eventRegistration) {\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {\r\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\r\n    // a little bit by handling the return values anyways.\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoInterrupt(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.interrupt(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoResume(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.resume(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoLog(repo, ...varArgs) {\r\n    let prefix = '';\r\n    if (repo.persistentConnection_) {\r\n        prefix = repo.persistentConnection_.id + ':';\r\n    }\r\n    log(prefix, ...varArgs);\r\n}\r\nfunction repoCallOnCompleteCallback(repo, callback, status, errorReason) {\r\n    if (callback) {\r\n        exceptionGuard(() => {\r\n            if (status === 'ok') {\r\n                callback(null);\r\n            }\r\n            else {\r\n                const code = (status || 'error').toUpperCase();\r\n                let message = code;\r\n                if (errorReason) {\r\n                    message += ': ' + errorReason;\r\n                }\r\n                const error = new Error(message);\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                error.code = code;\r\n                callback(error);\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and\r\n * sends it to the server if possible.\r\n *\r\n * @param path - Path at which to do transaction.\r\n * @param transactionUpdate - Update callback.\r\n * @param onComplete - Completion callback.\r\n * @param unwatcher - Function that will be called when the transaction no longer\r\n * need data updates for `path`.\r\n * @param applyLocally - Whether or not to make intermediate results visible\r\n */\r\nfunction repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {\r\n    repoLog(repo, 'transaction on ' + path);\r\n    // Initialize transaction.\r\n    const transaction = {\r\n        path,\r\n        update: transactionUpdate,\r\n        onComplete,\r\n        // One of TransactionStatus enums.\r\n        status: null,\r\n        // Used when combining transactions at different locations to figure out\r\n        // which one goes first.\r\n        order: LUIDGenerator(),\r\n        // Whether to raise local events for this transaction.\r\n        applyLocally,\r\n        // Count of how many times we've retried the transaction.\r\n        retryCount: 0,\r\n        // Function to call to clean up our .on() listener.\r\n        unwatcher,\r\n        // Stores why a transaction was aborted.\r\n        abortReason: null,\r\n        currentWriteId: null,\r\n        currentInputSnapshot: null,\r\n        currentOutputSnapshotRaw: null,\r\n        currentOutputSnapshotResolved: null\r\n    };\r\n    // Run transaction initially.\r\n    const currentState = repoGetLatestState(repo, path, undefined);\r\n    transaction.currentInputSnapshot = currentState;\r\n    const newVal = transaction.update(currentState.val());\r\n    if (newVal === undefined) {\r\n        // Abort transaction.\r\n        transaction.unwatcher();\r\n        transaction.currentOutputSnapshotRaw = null;\r\n        transaction.currentOutputSnapshotResolved = null;\r\n        if (transaction.onComplete) {\r\n            transaction.onComplete(null, false, transaction.currentInputSnapshot);\r\n        }\r\n    }\r\n    else {\r\n        validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\r\n        // Mark as run and add to our queue.\r\n        transaction.status = 0 /* RUN */;\r\n        const queueNode = treeSubTree(repo.transactionQueueTree_, path);\r\n        const nodeQueue = treeGetValue(queueNode) || [];\r\n        nodeQueue.push(transaction);\r\n        treeSetValue(queueNode, nodeQueue);\r\n        // Update visibleData and raise events\r\n        // Note: We intentionally raise events after updating all of our\r\n        // transaction state, since the user could start new transactions from the\r\n        // event callbacks.\r\n        let priorityForNode;\r\n        if (typeof newVal === 'object' &&\r\n            newVal !== null &&\r\n            contains(newVal, '.priority')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            priorityForNode = safeGet(newVal, '.priority');\r\n            assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +\r\n                'Priority must be a valid string, finite number, server value, or null.');\r\n        }\r\n        else {\r\n            const currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\r\n                ChildrenNode.EMPTY_NODE;\r\n            priorityForNode = currentNode.getPriority().val();\r\n        }\r\n        const serverValues = repoGenerateServerValues(repo);\r\n        const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\r\n        const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\r\n        transaction.currentOutputSnapshotRaw = newNodeUnresolved;\r\n        transaction.currentOutputSnapshotResolved = newNode;\r\n        transaction.currentWriteId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n    }\r\n}\r\n/**\r\n * @param excludeSets - A specific set to exclude\r\n */\r\nfunction repoGetLatestState(repo, path, excludeSets) {\r\n    return (syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\r\n        ChildrenNode.EMPTY_NODE);\r\n}\r\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding\r\n * transactions to complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively\r\n * with a particular transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param node - transactionQueueTree node to start at.\r\n */\r\nfunction repoSendReadyTransactions(repo, node = repo.transactionQueueTree_) {\r\n    // Before recursing, make sure any completed transactions are removed.\r\n    if (!node) {\r\n        repoPruneCompletedTransactionsBelowNode(repo, node);\r\n    }\r\n    if (treeGetValue(node)) {\r\n        const queue = repoBuildTransactionQueue(repo, node);\r\n        assert(queue.length > 0, 'Sending zero length transaction queue');\r\n        const allRun = queue.every((transaction) => transaction.status === 0 /* RUN */);\r\n        // If they're all run (and not sent), we can send them.  Else, we must wait.\r\n        if (allRun) {\r\n            repoSendTransactionQueue(repo, treeGetPath(node), queue);\r\n        }\r\n    }\r\n    else if (treeHasChildren(node)) {\r\n        treeForEachChild(node, childNode => {\r\n            repoSendReadyTransactions(repo, childNode);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Given a list of run transactions, send them to the server and then handle\r\n * the result (success or failure).\r\n *\r\n * @param path - The location of the queue.\r\n * @param queue - Queue of transactions under the specified location.\r\n */\r\nfunction repoSendTransactionQueue(repo, path, queue) {\r\n    // Mark transactions as sent and increment retry count!\r\n    const setsToIgnore = queue.map(txn => {\r\n        return txn.currentWriteId;\r\n    });\r\n    const latestState = repoGetLatestState(repo, path, setsToIgnore);\r\n    let snapToSend = latestState;\r\n    const latestHash = latestState.hash();\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const txn = queue[i];\r\n        assert(txn.status === 0 /* RUN */, 'tryToSendTransactionQueue_: items in queue should all be run.');\r\n        txn.status = 1 /* SENT */;\r\n        txn.retryCount++;\r\n        const relativePath = newRelativePath(path, txn.path);\r\n        // If we've gotten to this point, the output snapshot must be defined.\r\n        snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */, txn.currentOutputSnapshotRaw);\r\n    }\r\n    const dataToSend = snapToSend.val(true);\r\n    const pathToSend = path;\r\n    // Send the put.\r\n    repo.server_.put(pathToSend.toString(), dataToSend, (status) => {\r\n        repoLog(repo, 'transaction put response', {\r\n            path: pathToSend.toString(),\r\n            status\r\n        });\r\n        let events = [];\r\n        if (status === 'ok') {\r\n            // Queue up the callbacks and fire them after cleaning up all of our\r\n            // transaction state, since the callback could trigger more\r\n            // transactions or sets.\r\n            const callbacks = [];\r\n            for (let i = 0; i < queue.length; i++) {\r\n                queue[i].status = 2 /* COMPLETED */;\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));\r\n                if (queue[i].onComplete) {\r\n                    // We never unset the output snapshot, and given that this\r\n                    // transaction is complete, it should be set\r\n                    callbacks.push(() => queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved));\r\n                }\r\n                queue[i].unwatcher();\r\n            }\r\n            // Now remove the completed transactions.\r\n            repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path));\r\n            // There may be pending transactions that we can now send.\r\n            repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n            // Finally, trigger onComplete callbacks.\r\n            for (let i = 0; i < callbacks.length; i++) {\r\n                exceptionGuard(callbacks[i]);\r\n            }\r\n        }\r\n        else {\r\n            // transactions are no longer sent.  Update their status appropriately.\r\n            if (status === 'datastale') {\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) {\r\n                        queue[i].status = 4 /* NEEDS_ABORT */;\r\n                    }\r\n                    else {\r\n                        queue[i].status = 0 /* RUN */;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    queue[i].status = 4 /* NEEDS_ABORT */;\r\n                    queue[i].abortReason = status;\r\n                }\r\n            }\r\n            repoRerunTransactions(repo, path);\r\n        }\r\n    }, latestHash);\r\n}\r\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions. This\r\n * is the path at which events need to be raised for.\r\n *\r\n * @param changedPath - The path in mergedData that changed.\r\n * @returns The rootmost path that was affected by rerunning transactions.\r\n */\r\nfunction repoRerunTransactions(repo, changedPath) {\r\n    const rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);\r\n    const path = treeGetPath(rootMostTransactionNode);\r\n    const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\r\n    repoRerunTransactionQueue(repo, queue, path);\r\n    return path;\r\n}\r\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted\r\n * transactions and whatnot).\r\n *\r\n * @param queue - The queue of transactions to run.\r\n * @param path - The path the queue is for.\r\n */\r\nfunction repoRerunTransactionQueue(repo, queue, path) {\r\n    if (queue.length === 0) {\r\n        return; // Nothing to do!\r\n    }\r\n    // Queue up the callbacks and fire them after cleaning up all of our\r\n    // transaction state, since the callback could trigger more transactions or\r\n    // sets.\r\n    const callbacks = [];\r\n    let events = [];\r\n    // Ignore all of the sets we're going to re-run.\r\n    const txnsToRerun = queue.filter(q => {\r\n        return q.status === 0 /* RUN */;\r\n    });\r\n    const setsToIgnore = txnsToRerun.map(q => {\r\n        return q.currentWriteId;\r\n    });\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const transaction = queue[i];\r\n        const relativePath = newRelativePath(path, transaction.path);\r\n        let abortTransaction = false, abortReason;\r\n        assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\r\n        if (transaction.status === 4 /* NEEDS_ABORT */) {\r\n            abortTransaction = true;\r\n            abortReason = transaction.abortReason;\r\n            events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n        }\r\n        else if (transaction.status === 0 /* RUN */) {\r\n            if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\r\n                abortTransaction = true;\r\n                abortReason = 'maxretry';\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n            }\r\n            else {\r\n                // This code reruns a transaction\r\n                const currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);\r\n                transaction.currentInputSnapshot = currentNode;\r\n                const newData = queue[i].update(currentNode.val());\r\n                if (newData !== undefined) {\r\n                    validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\r\n                    let newDataNode = nodeFromJSON(newData);\r\n                    const hasExplicitPriority = typeof newData === 'object' &&\r\n                        newData != null &&\r\n                        contains(newData, '.priority');\r\n                    if (!hasExplicitPriority) {\r\n                        // Keep the old priority if there wasn't a priority explicitly specified.\r\n                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());\r\n                    }\r\n                    const oldWriteId = transaction.currentWriteId;\r\n                    const serverValues = repoGenerateServerValues(repo);\r\n                    const newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\r\n                    transaction.currentOutputSnapshotRaw = newDataNode;\r\n                    transaction.currentOutputSnapshotResolved = newNodeResolved;\r\n                    transaction.currentWriteId = repoGetNextWriteId(repo);\r\n                    // Mutates setsToIgnore in place\r\n                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\r\n                    events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));\r\n                }\r\n                else {\r\n                    abortTransaction = true;\r\n                    abortReason = 'nodata';\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n                }\r\n            }\r\n        }\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        events = [];\r\n        if (abortTransaction) {\r\n            // Abort.\r\n            queue[i].status = 2 /* COMPLETED */;\r\n            // Removing a listener can trigger pruning which can muck with\r\n            // mergedData/visibleData (as it prunes data). So defer the unwatcher\r\n            // until we're done.\r\n            (function (unwatcher) {\r\n                setTimeout(unwatcher, Math.floor(0));\r\n            })(queue[i].unwatcher);\r\n            if (queue[i].onComplete) {\r\n                if (abortReason === 'nodata') {\r\n                    callbacks.push(() => queue[i].onComplete(null, false, queue[i].currentInputSnapshot));\r\n                }\r\n                else {\r\n                    callbacks.push(() => queue[i].onComplete(new Error(abortReason), false, null));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Clean up completed transactions.\r\n    repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\r\n    // Now fire callbacks, now that we're in a good, known state.\r\n    for (let i = 0; i < callbacks.length; i++) {\r\n        exceptionGuard(callbacks[i]);\r\n    }\r\n    // Try to send the transaction result to the server.\r\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n}\r\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending\r\n * transaction on it, or just returns the node for the given path if there are\r\n * no pending transactions on any ancestor.\r\n *\r\n * @param path - The location to start at.\r\n * @returns The rootmost node with a transaction.\r\n */\r\nfunction repoGetAncestorTransactionNode(repo, path) {\r\n    let front;\r\n    // Start at the root and walk deeper into the tree towards path until we\r\n    // find a node with pending transactions.\r\n    let transactionNode = repo.transactionQueueTree_;\r\n    front = pathGetFront(path);\r\n    while (front !== null && treeGetValue(transactionNode) === undefined) {\r\n        transactionNode = treeSubTree(transactionNode, front);\r\n        path = pathPopFront(path);\r\n        front = pathGetFront(path);\r\n    }\r\n    return transactionNode;\r\n}\r\n/**\r\n * Builds the queue of all transactions at or below the specified\r\n * transactionNode.\r\n *\r\n * @param transactionNode\r\n * @returns The generated queue.\r\n */\r\nfunction repoBuildTransactionQueue(repo, transactionNode) {\r\n    // Walk any child transaction queues and aggregate them into a single queue.\r\n    const transactionQueue = [];\r\n    repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue);\r\n    // Sort them by the order the transactions were created.\r\n    transactionQueue.sort((a, b) => a.order - b.order);\r\n    return transactionQueue;\r\n}\r\nfunction repoAggregateTransactionQueuesForNode(repo, node, queue) {\r\n    const nodeQueue = treeGetValue(node);\r\n    if (nodeQueue) {\r\n        for (let i = 0; i < nodeQueue.length; i++) {\r\n            queue.push(nodeQueue[i]);\r\n        }\r\n    }\r\n    treeForEachChild(node, child => {\r\n        repoAggregateTransactionQueuesForNode(repo, child, queue);\r\n    });\r\n}\r\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n */\r\nfunction repoPruneCompletedTransactionsBelowNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        let to = 0;\r\n        for (let from = 0; from < queue.length; from++) {\r\n            if (queue[from].status !== 2 /* COMPLETED */) {\r\n                queue[to] = queue[from];\r\n                to++;\r\n            }\r\n        }\r\n        queue.length = to;\r\n        treeSetValue(node, queue.length > 0 ? queue : undefined);\r\n    }\r\n    treeForEachChild(node, childNode => {\r\n        repoPruneCompletedTransactionsBelowNode(repo, childNode);\r\n    });\r\n}\r\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.\r\n * Called when doing a set() or update() since we consider them incompatible\r\n * with transactions.\r\n *\r\n * @param path - Path for which we want to abort related transactions.\r\n */\r\nfunction repoAbortTransactions(repo, path) {\r\n    const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\r\n    const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\r\n    treeForEachAncestor(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    repoAbortTransactionsOnNode(repo, transactionNode);\r\n    treeForEachDescendant(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    return affectedPath;\r\n}\r\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param node - Node to abort transactions for.\r\n */\r\nfunction repoAbortTransactionsOnNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        // Queue up the callbacks and fire them after cleaning up all of our\r\n        // transaction state, since the callback could trigger more transactions\r\n        // or sets.\r\n        const callbacks = [];\r\n        // Go through queue.  Any already-sent transactions must be marked for\r\n        // abort, while the unsent ones can be immediately aborted and removed.\r\n        let events = [];\r\n        let lastSent = -1;\r\n        for (let i = 0; i < queue.length; i++) {\r\n            if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) ;\r\n            else if (queue[i].status === 1 /* SENT */) {\r\n                assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\r\n                lastSent = i;\r\n                // Mark transaction for abort when it comes back.\r\n                queue[i].status = 3 /* SENT_NEEDS_ABORT */;\r\n                queue[i].abortReason = 'set';\r\n            }\r\n            else {\r\n                assert(queue[i].status === 0 /* RUN */, 'Unexpected transaction status in abort');\r\n                // We can abort it immediately.\r\n                queue[i].unwatcher();\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));\r\n                if (queue[i].onComplete) {\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));\r\n                }\r\n            }\r\n        }\r\n        if (lastSent === -1) {\r\n            // We're not waiting for any sent transactions.  We can clear the queue.\r\n            treeSetValue(node, undefined);\r\n        }\r\n        else {\r\n            // Remove the transactions we aborted.\r\n            queue.length = lastSent + 1;\r\n        }\r\n        // Now fire the callbacks.\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);\r\n        for (let i = 0; i < callbacks.length; i++) {\r\n            exceptionGuard(callbacks[i]);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction decodePath(pathString) {\r\n    let pathStringDecoded = '';\r\n    const pieces = pathString.split('/');\r\n    for (let i = 0; i < pieces.length; i++) {\r\n        if (pieces[i].length > 0) {\r\n            let piece = pieces[i];\r\n            try {\r\n                piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\r\n            }\r\n            catch (e) { }\r\n            pathStringDecoded += '/' + piece;\r\n        }\r\n    }\r\n    return pathStringDecoded;\r\n}\r\n/**\r\n * @returns key value hash\r\n */\r\nfunction decodeQuery(queryString) {\r\n    const results = {};\r\n    if (queryString.charAt(0) === '?') {\r\n        queryString = queryString.substring(1);\r\n    }\r\n    for (const segment of queryString.split('&')) {\r\n        if (segment.length === 0) {\r\n            continue;\r\n        }\r\n        const kv = segment.split('=');\r\n        if (kv.length === 2) {\r\n            results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\r\n        }\r\n        else {\r\n            warn(`Invalid query segment '${segment}' in query '${queryString}'`);\r\n        }\r\n    }\r\n    return results;\r\n}\r\nconst parseRepoInfo = function (dataURL, nodeAdmin) {\r\n    const parsedUrl = parseDatabaseURL(dataURL), namespace = parsedUrl.namespace;\r\n    if (parsedUrl.domain === 'firebase.com') {\r\n        fatal(parsedUrl.host +\r\n            ' is no longer supported. ' +\r\n            'Please use <YOUR FIREBASE>.firebaseio.com instead');\r\n    }\r\n    // Catch common error of uninitialized namespace value.\r\n    if ((!namespace || namespace === 'undefined') &&\r\n        parsedUrl.domain !== 'localhost') {\r\n        fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\r\n    }\r\n    if (!parsedUrl.secure) {\r\n        warnIfPageIsSecure();\r\n    }\r\n    const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\r\n    return {\r\n        repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly, nodeAdmin, \r\n        /*persistenceKey=*/ '', \r\n        /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain),\r\n        path: new Path(parsedUrl.pathString)\r\n    };\r\n};\r\nconst parseDatabaseURL = function (dataURL) {\r\n    // Default to empty strings in the event of a malformed string.\r\n    let host = '', domain = '', subdomain = '', pathString = '', namespace = '';\r\n    // Always default to SSL, unless otherwise specified.\r\n    let secure = true, scheme = 'https', port = 443;\r\n    // Don't do any validation here. The caller is responsible for validating the result of parsing.\r\n    if (typeof dataURL === 'string') {\r\n        // Parse scheme.\r\n        let colonInd = dataURL.indexOf('//');\r\n        if (colonInd >= 0) {\r\n            scheme = dataURL.substring(0, colonInd - 1);\r\n            dataURL = dataURL.substring(colonInd + 2);\r\n        }\r\n        // Parse host, path, and query string.\r\n        let slashInd = dataURL.indexOf('/');\r\n        if (slashInd === -1) {\r\n            slashInd = dataURL.length;\r\n        }\r\n        let questionMarkInd = dataURL.indexOf('?');\r\n        if (questionMarkInd === -1) {\r\n            questionMarkInd = dataURL.length;\r\n        }\r\n        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\r\n        if (slashInd < questionMarkInd) {\r\n            // For pathString, questionMarkInd will always come after slashInd\r\n            pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\r\n        }\r\n        const queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\r\n        // If we have a port, use scheme for determining if it's secure.\r\n        colonInd = host.indexOf(':');\r\n        if (colonInd >= 0) {\r\n            secure = scheme === 'https' || scheme === 'wss';\r\n            port = parseInt(host.substring(colonInd + 1), 10);\r\n        }\r\n        else {\r\n            colonInd = host.length;\r\n        }\r\n        const hostWithoutPort = host.slice(0, colonInd);\r\n        if (hostWithoutPort.toLowerCase() === 'localhost') {\r\n            domain = 'localhost';\r\n        }\r\n        else if (hostWithoutPort.split('.').length <= 2) {\r\n            domain = hostWithoutPort;\r\n        }\r\n        else {\r\n            // Interpret the subdomain of a 3 or more component URL as the namespace name.\r\n            const dotInd = host.indexOf('.');\r\n            subdomain = host.substring(0, dotInd).toLowerCase();\r\n            domain = host.substring(dotInd + 1);\r\n            // Normalize namespaces to lowercase to share storage / connection.\r\n            namespace = subdomain;\r\n        }\r\n        // Always treat the value of the `ns` as the namespace name if it is present.\r\n        if ('ns' in queryParams) {\r\n            namespace = queryParams['ns'];\r\n        }\r\n    }\r\n    return {\r\n        host,\r\n        port,\r\n        domain,\r\n        subdomain,\r\n        secure,\r\n        scheme,\r\n        pathString,\r\n        namespace\r\n    };\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Encapsulates the data needed to raise an event\r\n */\r\nclass DataEvent {\r\n    /**\r\n     * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\r\n     * @param eventRegistration - The function to call to with the event data. User provided\r\n     * @param snapshot - The data backing the event\r\n     * @param prevName - Optional, the name of the previous child for child_* events.\r\n     */\r\n    constructor(eventType, eventRegistration, snapshot, prevName) {\r\n        this.eventType = eventType;\r\n        this.eventRegistration = eventRegistration;\r\n        this.snapshot = snapshot;\r\n        this.prevName = prevName;\r\n    }\r\n    getPath() {\r\n        const ref = this.snapshot.ref;\r\n        if (this.eventType === 'value') {\r\n            return ref._path;\r\n        }\r\n        else {\r\n            return ref.parent._path;\r\n        }\r\n    }\r\n    getEventType() {\r\n        return this.eventType;\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return (this.getPath().toString() +\r\n            ':' +\r\n            this.eventType +\r\n            ':' +\r\n            stringify(this.snapshot.exportVal()));\r\n    }\r\n}\r\nclass CancelEvent {\r\n    constructor(eventRegistration, error, path) {\r\n        this.eventRegistration = eventRegistration;\r\n        this.error = error;\r\n        this.path = path;\r\n    }\r\n    getPath() {\r\n        return this.path;\r\n    }\r\n    getEventType() {\r\n        return 'cancel';\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return this.path.toString() + ':cancel';\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A wrapper class that converts events from the database@exp SDK to the legacy\r\n * Database SDK. Events are not converted directly as event registration relies\r\n * on reference comparison of the original user callback (see `matches()`) and\r\n * relies on equality of the legacy SDK's `context` object.\r\n */\r\nclass CallbackContext {\r\n    constructor(snapshotCallback, cancelCallback) {\r\n        this.snapshotCallback = snapshotCallback;\r\n        this.cancelCallback = cancelCallback;\r\n    }\r\n    onValue(expDataSnapshot, previousChildName) {\r\n        this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\r\n    }\r\n    onCancel(error) {\r\n        assert(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');\r\n        return this.cancelCallback.call(null, error);\r\n    }\r\n    get hasCancelCallback() {\r\n        return !!this.cancelCallback;\r\n    }\r\n    matches(other) {\r\n        return (this.snapshotCallback === other.snapshotCallback ||\r\n            (this.snapshotCallback.userCallback !== undefined &&\r\n                this.snapshotCallback.userCallback ===\r\n                    other.snapshotCallback.userCallback &&\r\n                this.snapshotCallback.context === other.snapshotCallback.context));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The `onDisconnect` class allows you to write or clear data when your client\r\n * disconnects from the Database server. These updates occur whether your\r\n * client disconnects cleanly or not, so you can rely on them to clean up data\r\n * even if a connection is dropped or a client crashes.\r\n *\r\n * The `onDisconnect` class is most commonly used to manage presence in\r\n * applications where it is useful to detect how many clients are connected and\r\n * when other clients disconnect. See\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information.\r\n *\r\n * To avoid problems when a connection is dropped before the requests can be\r\n * transferred to the Database server, these functions should be called before\r\n * writing any data.\r\n *\r\n * Note that `onDisconnect` operations are only triggered once. If you want an\r\n * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n * the `onDisconnect` operations each time you reconnect.\r\n */\r\nclass OnDisconnect {\r\n    /** @hideconstructor */\r\n    constructor(_repo, _path) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n    }\r\n    /**\r\n     * Cancels all previously queued `onDisconnect()` set or update events for this\r\n     * location and all children.\r\n     *\r\n     * If a write has been queued for this location via a `set()` or `update()` at a\r\n     * parent location, the write at this location will be canceled, though writes\r\n     * to sibling locations will still occur.\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    cancel() {\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is deleted when the client is disconnected\r\n     * (due to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    remove() {\r\n        validateWritablePath('OnDisconnect.remove', this._path);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value when the\r\n     * client is disconnected (due to closing the browser, navigating to a new page,\r\n     * or network issues).\r\n     *\r\n     * `set()` is especially useful for implementing \"presence\" systems, where a\r\n     * value should be changed or cleared when a user disconnects so that they\r\n     * appear \"offline\" to other users. See\r\n     * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n     * for more information.\r\n     *\r\n     * Note that `onDisconnect` operations are only triggered once. If you want an\r\n     * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n     * the `onDisconnect` operations each time.\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    set(value) {\r\n        validateWritablePath('OnDisconnect.set', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value and priority\r\n     * when the client is disconnected (due to closing the browser, navigating to a\r\n     * new page, or network issues).\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @param priority - The priority to be written (string, number, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    setWithPriority(value, priority) {\r\n        validateWritablePath('OnDisconnect.setWithPriority', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.setWithPriority', value, this._path, false);\r\n        validatePriority('OnDisconnect.setWithPriority', priority, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Writes multiple values at this location when the client is disconnected (due\r\n     * to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * The `values` argument contains multiple property-value pairs that will be\r\n     * written to the Database together. Each child property can either be a simple\r\n     * property (for example, \"name\") or a relative path (for example, \"name/first\")\r\n     * from the current location to the data to update.\r\n     *\r\n     * As opposed to the `set()` method, `update()` can be use to selectively update\r\n     * only the referenced properties at the current location (instead of replacing\r\n     * all the child properties at the current location).\r\n     *\r\n     * @param values - Object containing multiple values.\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    update(values) {\r\n        validateWritablePath('OnDisconnect.update', this._path);\r\n        validateFirebaseMergeDataArg('OnDisconnect.update', values, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nclass QueryImpl {\r\n    /**\r\n     * @hideconstructor\r\n     */\r\n    constructor(_repo, _path, _queryParams, _orderByCalled) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n        this._queryParams = _queryParams;\r\n        this._orderByCalled = _orderByCalled;\r\n    }\r\n    get key() {\r\n        if (pathIsEmpty(this._path)) {\r\n            return null;\r\n        }\r\n        else {\r\n            return pathGetBack(this._path);\r\n        }\r\n    }\r\n    get ref() {\r\n        return new ReferenceImpl(this._repo, this._path);\r\n    }\r\n    get _queryIdentifier() {\r\n        const obj = queryParamsGetQueryObject(this._queryParams);\r\n        const id = ObjectToUniqueKey(obj);\r\n        return id === '{}' ? 'default' : id;\r\n    }\r\n    /**\r\n     * An object representation of the query parameters used by this Query.\r\n     */\r\n    get _queryObject() {\r\n        return queryParamsGetQueryObject(this._queryParams);\r\n    }\r\n    isEqual(other) {\r\n        other = getModularInstance(other);\r\n        if (!(other instanceof QueryImpl)) {\r\n            return false;\r\n        }\r\n        const sameRepo = this._repo === other._repo;\r\n        const samePath = pathEquals(this._path, other._path);\r\n        const sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;\r\n        return sameRepo && samePath && sameQueryIdentifier;\r\n    }\r\n    toJSON() {\r\n        return this.toString();\r\n    }\r\n    toString() {\r\n        return this._repo.toString() + pathToUrlEncodedString(this._path);\r\n    }\r\n}\r\n/**\r\n * Validates that no other order by call has been made\r\n */\r\nfunction validateNoPreviousOrderByCall(query, fnName) {\r\n    if (query._orderByCalled === true) {\r\n        throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\r\n    }\r\n}\r\n/**\r\n * Validates start/end values for queries.\r\n */\r\nfunction validateQueryEndpoints(params) {\r\n    let startNode = null;\r\n    let endNode = null;\r\n    if (params.hasStart()) {\r\n        startNode = params.getIndexStartValue();\r\n    }\r\n    if (params.hasEnd()) {\r\n        endNode = params.getIndexEndValue();\r\n    }\r\n    if (params.getIndex() === KEY_INDEX) {\r\n        const tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +\r\n            'startAt(), endAt(), or equalTo().';\r\n        const wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\r\n            'endAt(), endBefore(), or equalTo() must be a string.';\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            if (startName !== MIN_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof startNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            if (endName !== MAX_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof endNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n    }\r\n    else if (params.getIndex() === PRIORITY_INDEX) {\r\n        if ((startNode != null && !isValidPriority(startNode)) ||\r\n            (endNode != null && !isValidPriority(endNode))) {\r\n            throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +\r\n                'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\r\n                '(null, a number, or a string).');\r\n        }\r\n    }\r\n    else {\r\n        assert(params.getIndex() instanceof PathIndex ||\r\n            params.getIndex() === VALUE_INDEX, 'unknown index type.');\r\n        if ((startNode != null && typeof startNode === 'object') ||\r\n            (endNode != null && typeof endNode === 'object')) {\r\n            throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\r\n                'equalTo() cannot be an object.');\r\n        }\r\n    }\r\n}\r\n/**\r\n * Validates that limit* has been called with the correct combination of parameters\r\n */\r\nfunction validateLimit(params) {\r\n    if (params.hasStart() &&\r\n        params.hasEnd() &&\r\n        params.hasLimit() &&\r\n        !params.hasAnchoredLimit()) {\r\n        throw new Error(\"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\r\n            'limitToFirst() or limitToLast() instead.');\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass ReferenceImpl extends QueryImpl {\r\n    /** @hideconstructor */\r\n    constructor(repo, path) {\r\n        super(repo, path, new QueryParams(), false);\r\n    }\r\n    get parent() {\r\n        const parentPath = pathParent(this._path);\r\n        return parentPath === null\r\n            ? null\r\n            : new ReferenceImpl(this._repo, parentPath);\r\n    }\r\n    get root() {\r\n        let ref = this;\r\n        while (ref.parent !== null) {\r\n            ref = ref.parent;\r\n        }\r\n        return ref;\r\n    }\r\n}\r\n/**\r\n * A `DataSnapshot` contains data from a Database location.\r\n *\r\n * Any time you read data from the Database, you receive the data as a\r\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\r\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\r\n * JavaScript object by calling the `val()` method. Alternatively, you can\r\n * traverse into the snapshot by calling `child()` to return child snapshots\r\n * (which you could then call `val()` on).\r\n *\r\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\r\n * a Database location. It cannot be modified and will never change (to modify\r\n * data, you always call the `set()` method on a `Reference` directly).\r\n */\r\nclass DataSnapshot {\r\n    /**\r\n     * @param _node - A SnapshotNode to wrap.\r\n     * @param ref - The location this snapshot came from.\r\n     * @param _index - The iteration order for this snapshot\r\n     * @hideconstructor\r\n     */\r\n    constructor(_node, \r\n    /**\r\n     * The location of this DataSnapshot.\r\n     */\r\n    ref, _index) {\r\n        this._node = _node;\r\n        this.ref = ref;\r\n        this._index = _index;\r\n    }\r\n    /**\r\n     * Gets the priority value of the data in this `DataSnapshot`.\r\n     *\r\n     * Applications need not use priority but can order collections by\r\n     * ordinary properties (see\r\n     * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\r\n     * ).\r\n     */\r\n    get priority() {\r\n        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\r\n        return this._node.getPriority().val();\r\n    }\r\n    /**\r\n     * The key (last part of the path) of the location of this `DataSnapshot`.\r\n     *\r\n     * The last token in a Database location is considered its key. For example,\r\n     * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\r\n     * `DataSnapshot` will return the key for the location that generated it.\r\n     * However, accessing the key on the root URL of a Database will return\r\n     * `null`.\r\n     */\r\n    get key() {\r\n        return this.ref.key;\r\n    }\r\n    /** Returns the number of child properties of this `DataSnapshot`. */\r\n    get size() {\r\n        return this._node.numChildren();\r\n    }\r\n    /**\r\n     * Gets another `DataSnapshot` for the location at the specified relative path.\r\n     *\r\n     * Passing a relative path to the `child()` method of a DataSnapshot returns\r\n     * another `DataSnapshot` for the location at the specified relative path. The\r\n     * relative path can either be a simple child name (for example, \"ada\") or a\r\n     * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\r\n     * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\r\n     * whose value is `null`) is returned.\r\n     *\r\n     * @param path - A relative path to the location of child data.\r\n     */\r\n    child(path) {\r\n        const childPath = new Path(path);\r\n        const childRef = child(this.ref, path);\r\n        return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);\r\n    }\r\n    /**\r\n     * Returns true if this `DataSnapshot` contains any data. It is slightly more\r\n     * efficient than using `snapshot.val() !== null`.\r\n     */\r\n    exists() {\r\n        return !this._node.isEmpty();\r\n    }\r\n    /**\r\n     * Exports the entire contents of the DataSnapshot as a JavaScript object.\r\n     *\r\n     * The `exportVal()` method is similar to `val()`, except priority information\r\n     * is included (if available), making it suitable for backing up your data.\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    exportVal() {\r\n        return this._node.val(true);\r\n    }\r\n    /**\r\n     * Enumerates the top-level children in the `DataSnapshot`.\r\n     *\r\n     * Because of the way JavaScript objects work, the ordering of data in the\r\n     * JavaScript object returned by `val()` is not guaranteed to match the\r\n     * ordering on the server nor the ordering of `onChildAdded()` events. That is\r\n     * where `forEach()` comes in handy. It guarantees the children of a\r\n     * `DataSnapshot` will be iterated in their query order.\r\n     *\r\n     * If no explicit `orderBy*()` method is used, results are returned\r\n     * ordered by key (unless priorities are used, in which case, results are\r\n     * returned by priority).\r\n     *\r\n     * @param action - A function that will be called for each child DataSnapshot.\r\n     * The callback can return true to cancel further enumeration.\r\n     * @returns true if enumeration was canceled due to your callback returning\r\n     * true.\r\n     */\r\n    forEach(action) {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        const childrenNode = this._node;\r\n        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\r\n        return !!childrenNode.forEachChild(this._index, (key, node) => {\r\n            return action(new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX));\r\n        });\r\n    }\r\n    /**\r\n     * Returns true if the specified child path has (non-null) data.\r\n     *\r\n     * @param path - A relative path to the location of a potential child.\r\n     * @returns `true` if data exists at the specified child path; else\r\n     *  `false`.\r\n     */\r\n    hasChild(path) {\r\n        const childPath = new Path(path);\r\n        return !this._node.getChild(childPath).isEmpty();\r\n    }\r\n    /**\r\n     * Returns whether or not the `DataSnapshot` has any non-`null` child\r\n     * properties.\r\n     *\r\n     * You can use `hasChildren()` to determine if a `DataSnapshot` has any\r\n     * children. If it does, you can enumerate them using `forEach()`. If it\r\n     * doesn't, then either this snapshot contains a primitive value (which can be\r\n     * retrieved with `val()`) or it is empty (in which case, `val()` will return\r\n     * `null`).\r\n     *\r\n     * @returns true if this snapshot has any children; else false.\r\n     */\r\n    hasChildren() {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return !this._node.isEmpty();\r\n        }\r\n    }\r\n    /**\r\n     * Returns a JSON-serializable representation of this object.\r\n     */\r\n    toJSON() {\r\n        return this.exportVal();\r\n    }\r\n    /**\r\n     * Extracts a JavaScript value from a `DataSnapshot`.\r\n     *\r\n     * Depending on the data in a `DataSnapshot`, the `val()` method may return a\r\n     * scalar type (string, number, or boolean), an array, or an object. It may\r\n     * also return null, indicating that the `DataSnapshot` is empty (contains no\r\n     * data).\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    val() {\r\n        return this._node.val();\r\n    }\r\n}\r\n/**\r\n *\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided path. If no path is provided, the `Reference`\r\n * will point to the root of the Database.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param path - Optional path representing the location the returned\r\n *   `Reference` will point. If not provided, the returned `Reference` will\r\n *   point to the root of the Database.\r\n * @returns If a path is provided, a `Reference`\r\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\r\n *   root of the Database.\r\n */\r\nfunction ref(db, path) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('ref');\r\n    return path !== undefined ? child(db._root, path) : db._root;\r\n}\r\n/**\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided Firebase URL.\r\n *\r\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\r\n * has a different domain than the current `Database` instance.\r\n *\r\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\r\n * and are not applied to the returned `Reference`.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param url - The Firebase URL at which the returned `Reference` will\r\n *   point.\r\n * @returns A `Reference` pointing to the provided\r\n *   Firebase URL.\r\n */\r\nfunction refFromURL(db, url) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('refFromURL');\r\n    const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\r\n    validateUrl('refFromURL', parsedURL);\r\n    const repoInfo = parsedURL.repoInfo;\r\n    if (!db._repo.repoInfo_.isCustomHost() &&\r\n        repoInfo.host !== db._repo.repoInfo_.host) {\r\n        fatal('refFromURL' +\r\n            ': Host name does not match the current database: ' +\r\n            '(found ' +\r\n            repoInfo.host +\r\n            ' but expected ' +\r\n            db._repo.repoInfo_.host +\r\n            ')');\r\n    }\r\n    return ref(db, parsedURL.path.toString());\r\n}\r\n/**\r\n * Gets a `Reference` for the location at the specified relative path.\r\n *\r\n * The relative path can either be a simple child name (for example, \"ada\") or\r\n * a deeper slash-separated path (for example, \"ada/name/first\").\r\n *\r\n * @param parent - The parent location.\r\n * @param path - A relative path from this location to the desired child\r\n *   location.\r\n * @returns The specified child location.\r\n */\r\nfunction child(parent, path) {\r\n    parent = getModularInstance(parent);\r\n    if (pathGetFront(parent._path) === null) {\r\n        validateRootPathString('child', 'path', path, false);\r\n    }\r\n    else {\r\n        validatePathString('child', 'path', path, false);\r\n    }\r\n    return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\r\n}\r\n/**\r\n * Returns an `OnDisconnect` object - see\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information on how to use it.\r\n *\r\n * @param ref - The reference to add OnDisconnect triggers for.\r\n */\r\nfunction onDisconnect(ref) {\r\n    ref = getModularInstance(ref);\r\n    return new OnDisconnect(ref._repo, ref._path);\r\n}\r\n/**\r\n * Generates a new child location using a unique key and returns its\r\n * `Reference`.\r\n *\r\n * This is the most common pattern for adding data to a collection of items.\r\n *\r\n * If you provide a value to `push()`, the value is written to the\r\n * generated location. If you don't pass a value, nothing is written to the\r\n * database and the child remains empty (but you can use the `Reference`\r\n * elsewhere).\r\n *\r\n * The unique keys generated by `push()` are ordered by the current time, so the\r\n * resulting list of items is chronologically sorted. The keys are also\r\n * designed to be unguessable (they contain 72 random bits of entropy).\r\n *\r\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}\r\n * </br>See {@link ttps://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}\r\n *\r\n * @param parent - The parent location.\r\n * @param value - Optional value to be written at the generated location.\r\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\r\n * but can be used immediately as the `Reference` to the child location.\r\n */\r\nfunction push(parent, value) {\r\n    parent = getModularInstance(parent);\r\n    validateWritablePath('push', parent._path);\r\n    validateFirebaseDataArg('push', value, parent._path, true);\r\n    const now = repoServerTime(parent._repo);\r\n    const name = nextPushId(now);\r\n    // push() returns a ThennableReference whose promise is fulfilled with a\r\n    // regular Reference. We use child() to create handles to two different\r\n    // references. The first is turned into a ThennableReference below by adding\r\n    // then() and catch() methods and is used as the return value of push(). The\r\n    // second remains a regular Reference and is used as the fulfilled value of\r\n    // the first ThennableReference.\r\n    const thennablePushRef = child(parent, name);\r\n    const pushRef = child(parent, name);\r\n    let promise;\r\n    if (value != null) {\r\n        promise = set(pushRef, value).then(() => pushRef);\r\n    }\r\n    else {\r\n        promise = Promise.resolve(pushRef);\r\n    }\r\n    thennablePushRef.then = promise.then.bind(promise);\r\n    thennablePushRef.catch = promise.then.bind(promise, undefined);\r\n    return thennablePushRef;\r\n}\r\n/**\r\n * Removes the data at this Database location.\r\n *\r\n * Any data at child locations will also be deleted.\r\n *\r\n * The effect of the remove will be visible immediately and the corresponding\r\n * event 'value' will be triggered. Synchronization of the remove to the\r\n * Firebase servers will also be started, and the returned Promise will resolve\r\n * when complete. If provided, the onComplete callback will be called\r\n * asynchronously after synchronization has finished.\r\n *\r\n * @param ref - The location to remove.\r\n * @returns Resolves when remove on server is complete.\r\n */\r\nfunction remove(ref) {\r\n    validateWritablePath('remove', ref._path);\r\n    return set(ref, null);\r\n}\r\n/**\r\n * Writes data to this Database location.\r\n *\r\n * This will overwrite any data at this location and all child locations.\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\r\n * all data at this location and all child locations will be deleted.\r\n *\r\n * `set()` will remove any priority stored at this location, so if priority is\r\n * meant to be preserved, you need to use `setWithPriority()` instead.\r\n *\r\n * Note that modifying data with `set()` will cancel any pending transactions\r\n * at that location, so extreme care should be taken if mixing `set()` and\r\n * `transaction()` to modify the same data.\r\n *\r\n * A single `set()` will generate a single \"value\" event at the location where\r\n * the `set()` was performed.\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction set(ref, value) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('set', ref._path);\r\n    validateFirebaseDataArg('set', value, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, \r\n    /*priority=*/ null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Sets a priority for the data at this Database location.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setPriority(ref, priority) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('setPriority', ref._path);\r\n    validatePriority('setPriority', priority, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, pathChild(ref._path, '.priority'), priority, null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes data the Database location. Like `set()` but also specifies the\r\n * priority for that data.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setWithPriority(ref, value, priority) {\r\n    validateWritablePath('setWithPriority', ref._path);\r\n    validateFirebaseDataArg('setWithPriority', value, ref._path, false);\r\n    validatePriority('setWithPriority', priority, false);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\r\n    }\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, priority, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes multiple values to the Database at once.\r\n *\r\n * The `values` argument contains multiple property-value pairs that will be\r\n * written to the Database together. Each child property can either be a simple\r\n * property (for example, \"name\") or a relative path (for example,\r\n * \"name/first\") from the current location to the data to update.\r\n *\r\n * As opposed to the `set()` method, `update()` can be use to selectively update\r\n * only the referenced properties at the current location (instead of replacing\r\n * all the child properties at the current location).\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * A single `update()` will generate a single \"value\" event at the location\r\n * where the `update()` was performed, regardless of how many children were\r\n * modified.\r\n *\r\n * Note that modifying data with `update()` will cancel any pending\r\n * transactions at that location, so extreme care should be taken if mixing\r\n * `update()` and `transaction()` to modify the same data.\r\n *\r\n * Passing `null` to `update()` will remove the data at this location.\r\n *\r\n * See\r\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\r\n *\r\n * @param ref - The location to write to.\r\n * @param values - Object containing multiple values.\r\n * @returns Resolves when update on server is complete.\r\n */\r\nfunction update(ref, values) {\r\n    validateFirebaseMergeDataArg('update', values, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoUpdate(ref._repo, ref._path, values, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Gets the most up-to-date result for this query.\r\n *\r\n * @param query - The query to run.\r\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\r\n * available, or rejects if the client is unable to return a value (e.g., if the\r\n * server is unreachable and there is nothing cached).\r\n */\r\nfunction get(query) {\r\n    query = getModularInstance(query);\r\n    return repoGetValue(query._repo, query).then(node => {\r\n        return new DataSnapshot(node, new ReferenceImpl(query._repo, query._path), query._queryParams.getIndex());\r\n    });\r\n}\r\n/**\r\n * Represents registration for 'value' events.\r\n */\r\nclass ValueEventRegistration {\r\n    constructor(callbackContext) {\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        return eventType === 'value';\r\n    }\r\n    createEvent(change, query) {\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, new ReferenceImpl(query._repo, query._path), index));\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, null);\r\n        }\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (!(other instanceof ValueEventRegistration)) {\r\n            return false;\r\n        }\r\n        else if (!other.callbackContext || !this.callbackContext) {\r\n            // If no callback specified, we consider it to match any callback.\r\n            return true;\r\n        }\r\n        else {\r\n            return other.callbackContext.matches(this.callbackContext);\r\n        }\r\n    }\r\n    hasAnyCallback() {\r\n        return this.callbackContext !== null;\r\n    }\r\n}\r\n/**\r\n * Represents the registration of a child_x event.\r\n */\r\nclass ChildEventRegistration {\r\n    constructor(eventType, callbackContext) {\r\n        this.eventType = eventType;\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        let eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\r\n        eventToCheck =\r\n            eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\r\n        return this.eventType === eventToCheck;\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    createEvent(change, query) {\r\n        assert(change.childName != null, 'Child events should have a childName.');\r\n        const childRef = child(new ReferenceImpl(query._repo, query._path), change.childName);\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, childRef, index), change.prevName);\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, eventData.prevName);\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (other instanceof ChildEventRegistration) {\r\n            return (this.eventType === other.eventType &&\r\n                (!this.callbackContext ||\r\n                    !other.callbackContext ||\r\n                    this.callbackContext.matches(other.callbackContext)));\r\n        }\r\n        return false;\r\n    }\r\n    hasAnyCallback() {\r\n        return !!this.callbackContext;\r\n    }\r\n}\r\nfunction addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {\r\n    let cancelCallback;\r\n    if (typeof cancelCallbackOrListenOptions === 'object') {\r\n        cancelCallback = undefined;\r\n        options = cancelCallbackOrListenOptions;\r\n    }\r\n    if (typeof cancelCallbackOrListenOptions === 'function') {\r\n        cancelCallback = cancelCallbackOrListenOptions;\r\n    }\r\n    if (options && options.onlyOnce) {\r\n        const userCallback = callback;\r\n        const onceCallback = (dataSnapshot, previousChildName) => {\r\n            repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n            userCallback(dataSnapshot, previousChildName);\r\n        };\r\n        onceCallback.userCallback = callback.userCallback;\r\n        onceCallback.context = callback.context;\r\n        callback = onceCallback;\r\n    }\r\n    const callbackContext = new CallbackContext(callback, cancelCallback || undefined);\r\n    const container = eventType === 'value'\r\n        ? new ValueEventRegistration(callbackContext)\r\n        : new ChildEventRegistration(eventType, callbackContext);\r\n    repoAddEventCallbackForQuery(query._repo, query, container);\r\n    return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\nfunction onValue(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'value', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildAdded(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_added', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildChanged(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_changed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildMoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_moved', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildRemoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_removed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\n/**\r\n * Detaches a callback previously attached with `on()`.\r\n *\r\n * Detach a callback previously attached with `on()`. Note that if `on()` was\r\n * called multiple times with the same eventType and callback, the callback\r\n * will be called multiple times for each event, and `off()` must be called\r\n * multiple times to remove the callback. Calling `off()` on a parent listener\r\n * will not automatically remove listeners registered on child nodes, `off()`\r\n * must also be called on any child listeners to remove the callback.\r\n *\r\n * If a callback is not specified, all callbacks for the specified eventType\r\n * will be removed. Similarly, if no eventType is specified, all callbacks\r\n * for the `Reference` will be removed.\r\n *\r\n * Individual listeners can also be removed by invoking their unsubscribe\r\n * callbacks.\r\n *\r\n * @param query - The query that the listener was registered with.\r\n * @param eventType - One of the following strings: \"value\", \"child_added\",\r\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\r\n * for the `Reference` will be removed.\r\n * @param callback - The callback function that was passed to `on()` or\r\n * `undefined` to remove all callbacks.\r\n */\r\nfunction off(query, eventType, callback) {\r\n    let container = null;\r\n    const expCallback = callback ? new CallbackContext(callback) : null;\r\n    if (eventType === 'value') {\r\n        container = new ValueEventRegistration(expCallback);\r\n    }\r\n    else if (eventType) {\r\n        container = new ChildEventRegistration(eventType, expCallback);\r\n    }\r\n    repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\n/**\r\n * A `QueryConstraint` is used to narrow the set of documents returned by a\r\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\r\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\r\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\r\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\r\n * {@link orderByValue}  or {@link equalTo} and\r\n * can then be passed to {@link query} to create a new query instance that\r\n * also contains this `QueryConstraint`.\r\n */\r\nclass QueryConstraint {\r\n}\r\nclass QueryEndAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endAt', this._value, query._path, true);\r\n        const newParams = queryParamsEndAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endAt: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name less than or equal\r\n * to the specified key.\r\n *\r\n * You can read more about `endAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to end at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end at, among the children with the previously\r\n * specified priority. This argument is only allowed if ordering by child,\r\n * value, or priority.\r\n */\r\nfunction endAt(value, key) {\r\n    validateKey('endAt', 'key', key, true);\r\n    return new QueryEndAtConstraint(value, key);\r\n}\r\nclass QueryEndBeforeConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endBefore', this._value, query._path, false);\r\n        const newParams = queryParamsEndBefore(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endBefore: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is exclusive. If only a value is provided, children\r\n * with a value less than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value lesss than or equal\r\n * to the specified value and a a key name less than the specified key.\r\n *\r\n * @param value - The value to end before. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end before, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction endBefore(value, key) {\r\n    validateKey('endBefore', 'key', key, true);\r\n    return new QueryEndBeforeConstraint(value, key);\r\n}\r\nclass QueryStartAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAt', this._value, query._path, true);\r\n        const newParams = queryParamsStartAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAt: Starting point was already set (by another call to startAt, ' +\r\n                'startBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name greater than or\r\n * equal to the specified key.\r\n *\r\n * You can read more about `startAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to start at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAt(value = null, key) {\r\n    validateKey('startAt', 'key', key, true);\r\n    return new QueryStartAtConstraint(value, key);\r\n}\r\nclass QueryStartAfterConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAfter', this._value, query._path, false);\r\n        const newParams = queryParamsStartAfter(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAfter: Starting point was already set (by another call to startAt, ' +\r\n                'startAfter, or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is exclusive. If only a value is provided, children\r\n * with a value greater than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value greater than or equal\r\n * to the specified value and a a key name greater than the specified key.\r\n *\r\n * @param value - The value to start after. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start after. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAfter(value, key) {\r\n    validateKey('startAfter', 'key', key, true);\r\n    return new QueryStartAfterConstraint(value, key);\r\n}\r\nclass QueryLimitToFirstConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToFirst: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToFirst(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that if limited to the first specific number\r\n * of children.\r\n *\r\n * The `limitToFirst()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the first 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToFirst()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToFirst(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToFirst: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToFirstConstraint(limit);\r\n}\r\nclass QueryLimitToLastConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToLast: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToLast(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that is limited to return only the last\r\n * specified number of children.\r\n *\r\n * The `limitToLast()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the last 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToLast()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToLast(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToLast: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToLastConstraint(limit);\r\n}\r\nclass QueryOrderByChildConstraint extends QueryConstraint {\r\n    constructor(_path) {\r\n        super();\r\n        this._path = _path;\r\n    }\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByChild');\r\n        const parsedPath = new Path(this._path);\r\n        if (pathIsEmpty(parsedPath)) {\r\n            throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');\r\n        }\r\n        const index = new PathIndex(parsedPath);\r\n        const newParams = queryParamsOrderBy(query._queryParams, index);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the specified child key.\r\n *\r\n * Queries can only order by one key at a time. Calling `orderByChild()`\r\n * multiple times on the same query is an error.\r\n *\r\n * Firebase queries allow you to order your data by any child key on the fly.\r\n * However, if you know in advance what your indexes will be, you can define\r\n * them via the .indexOn rule in your Security Rules for better performance. See\r\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\r\n * rule for more information.\r\n *\r\n * You can read more about `orderByChild()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n *\r\n * @param path - The path to order by.\r\n */\r\nfunction orderByChild(path) {\r\n    if (path === '$key') {\r\n        throw new Error('orderByChild: \"$key\" is invalid.  Use orderByKey() instead.');\r\n    }\r\n    else if (path === '$priority') {\r\n        throw new Error('orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.');\r\n    }\r\n    else if (path === '$value') {\r\n        throw new Error('orderByChild: \"$value\" is invalid.  Use orderByValue() instead.');\r\n    }\r\n    validatePathString('orderByChild', 'path', path, false);\r\n    return new QueryOrderByChildConstraint(path);\r\n}\r\nclass QueryOrderByKeyConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByKey');\r\n        const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the key.\r\n *\r\n * Sorts the results of a query by their (ascending) key values.\r\n *\r\n * You can read more about `orderByKey()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByKey() {\r\n    return new QueryOrderByKeyConstraint();\r\n}\r\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByPriority');\r\n        const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by priority.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\r\n * for alternatives to priority.\r\n */\r\nfunction orderByPriority() {\r\n    return new QueryOrderByPriorityConstraint();\r\n}\r\nclass QueryOrderByValueConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByValue');\r\n        const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by value.\r\n *\r\n * If the children of a query are all scalar values (string, number, or\r\n * boolean), you can order the results by their (ascending) values.\r\n *\r\n * You can read more about `orderByValue()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByValue() {\r\n    return new QueryOrderByValueConstraint();\r\n}\r\nclass QueryEqualToValueConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('equalTo', this._value, query._path, false);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\r\n                'equalTo).');\r\n        }\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\r\n                'equalTo).');\r\n        }\r\n        return new QueryEndAtConstraint(this._value, this._key)._apply(new QueryStartAtConstraint(this._value, this._key)._apply(query));\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` that includes children that match the specified\r\n * value.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The optional key argument can be used to further limit the range of the\r\n * query. If it is specified, then children that have exactly the specified\r\n * value must also have exactly the specified key as their key name. This can be\r\n * used to filter result sets with many matches for the same value.\r\n *\r\n * You can read more about `equalTo()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to match for. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction equalTo(value, key) {\r\n    validateKey('equalTo', 'key', key, true);\r\n    return new QueryEqualToValueConstraint(value, key);\r\n}\r\n/**\r\n * Creates a new immutable instance of `Query` that is extended to also include\r\n * additional query constraints.\r\n *\r\n * @param query - The Query instance to use as a base for the new constraints.\r\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\r\n * @throws if any of the provided query constraints cannot be combined with the\r\n * existing or new constraints.\r\n */\r\nfunction query(query, ...queryConstraints) {\r\n    let queryImpl = getModularInstance(query);\r\n    for (const constraint of queryConstraints) {\r\n        queryImpl = constraint._apply(queryImpl);\r\n    }\r\n    return queryImpl;\r\n}\r\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\r\nsyncPointSetReferenceConstructor(ReferenceImpl);\r\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This variable is also defined in the firebase Node.js Admin SDK. Before\r\n * modifying this definition, consult the definition in:\r\n *\r\n * https://github.com/firebase/firebase-admin-node\r\n *\r\n * and make sure the two are consistent.\r\n */\r\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\r\n/**\r\n * Creates and caches `Repo` instances.\r\n */\r\nconst repos = {};\r\n/**\r\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\r\n */\r\nlet useRestClient = false;\r\n/**\r\n * Update an existing `Repo` in place to point to a new host/port.\r\n */\r\nfunction repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {\r\n    repo.repoInfo_ = new RepoInfo(`${host}:${port}`, \r\n    /* secure= */ false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams);\r\n    if (tokenProvider) {\r\n        repo.authTokenProvider_ = tokenProvider;\r\n    }\r\n}\r\n/**\r\n * This function should only ever be called to CREATE a new database instance.\r\n * @internal\r\n */\r\nfunction repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {\r\n    let dbUrl = url || app.options.databaseURL;\r\n    if (dbUrl === undefined) {\r\n        if (!app.options.projectId) {\r\n            fatal(\"Can't determine Firebase Database URL. Be sure to include \" +\r\n                ' a Project ID when calling firebase.initializeApp().');\r\n        }\r\n        log('Using default host for project ', app.options.projectId);\r\n        dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\r\n    }\r\n    let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n    let repoInfo = parsedUrl.repoInfo;\r\n    let isEmulator;\r\n    let dbEmulatorHost = undefined;\r\n    if (typeof process !== 'undefined' && process.env) {\r\n        dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\r\n    }\r\n    if (dbEmulatorHost) {\r\n        isEmulator = true;\r\n        dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\r\n        parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n        repoInfo = parsedUrl.repoInfo;\r\n    }\r\n    else {\r\n        isEmulator = !parsedUrl.repoInfo.secure;\r\n    }\r\n    const authTokenProvider = nodeAdmin && isEmulator\r\n        ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\r\n        : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\r\n    validateUrl('Invalid Firebase Database URL', parsedUrl);\r\n    if (!pathIsEmpty(parsedUrl.path)) {\r\n        fatal('Database URL must point to the root of a Firebase Database ' +\r\n            '(not including a child path).');\r\n    }\r\n    const repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));\r\n    return new Database(repo, app);\r\n}\r\n/**\r\n * Remove the repo and make sure it is disconnected.\r\n *\r\n */\r\nfunction repoManagerDeleteRepo(repo, appName) {\r\n    const appRepos = repos[appName];\r\n    // This should never happen...\r\n    if (!appRepos || appRepos[repo.key] !== repo) {\r\n        fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\r\n    }\r\n    repoInterrupt(repo);\r\n    delete appRepos[repo.key];\r\n}\r\n/**\r\n * Ensures a repo doesn't already exist and then creates one using the\r\n * provided app.\r\n *\r\n * @param repoInfo - The metadata about the Repo\r\n * @returns The Repo object for the specified server / repoName.\r\n */\r\nfunction repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {\r\n    let appRepos = repos[app.name];\r\n    if (!appRepos) {\r\n        appRepos = {};\r\n        repos[app.name] = appRepos;\r\n    }\r\n    let repo = appRepos[repoInfo.toURLString()];\r\n    if (repo) {\r\n        fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\r\n    }\r\n    repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\r\n    appRepos[repoInfo.toURLString()] = repo;\r\n    return repo;\r\n}\r\n/**\r\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n */\r\nfunction repoManagerForceRestClient(forceRestClient) {\r\n    useRestClient = forceRestClient;\r\n}\r\n/**\r\n * Class representing a Firebase Realtime Database.\r\n */\r\nclass Database {\r\n    /** @hideconstructor */\r\n    constructor(_repoInternal, \r\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\r\n    app) {\r\n        this._repoInternal = _repoInternal;\r\n        this.app = app;\r\n        /** Represents a `Database` instance. */\r\n        this['type'] = 'database';\r\n        /** Track if the instance has been used (root or repo accessed) */\r\n        this._instanceStarted = false;\r\n    }\r\n    get _repo() {\r\n        if (!this._instanceStarted) {\r\n            repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);\r\n            this._instanceStarted = true;\r\n        }\r\n        return this._repoInternal;\r\n    }\r\n    get _root() {\r\n        if (!this._rootInternal) {\r\n            this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\r\n        }\r\n        return this._rootInternal;\r\n    }\r\n    _delete() {\r\n        if (this._rootInternal !== null) {\r\n            repoManagerDeleteRepo(this._repo, this.app.name);\r\n            this._repoInternal = null;\r\n            this._rootInternal = null;\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    _checkNotDeleted(apiName) {\r\n        if (this._rootInternal === null) {\r\n            fatal('Cannot call ' + apiName + ' on a deleted database.');\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns the instance of the Realtime Database SDK that is associated\r\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\r\n * with default settings if no instance exists or if the existing instance uses\r\n * a custom database URL.\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\r\n * Database instance is associated with.\r\n * @param url - The URL of the Realtime Database instance to connect to. If not\r\n * provided, the SDK connects to the default instance of the Firebase App.\r\n * @returns The `Database` instance of the provided app.\r\n */\r\nfunction getDatabase(app = getApp(), url) {\r\n    return _getProvider(app, 'database').getImmediate({\r\n        identifier: url\r\n    });\r\n}\r\n/**\r\n * Modify the provided instance to communicate with the Realtime Database\r\n * emulator.\r\n *\r\n * <p>Note: This method must be called before performing any other operation.\r\n *\r\n * @param db - The instance to modify.\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 8080)\r\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n */\r\nfunction connectDatabaseEmulator(db, host, port, options = {}) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('useEmulator');\r\n    if (db._instanceStarted) {\r\n        fatal('Cannot call useEmulator() after instance has already been initialized.');\r\n    }\r\n    const repo = db._repoInternal;\r\n    let tokenProvider = undefined;\r\n    if (repo.repoInfo_.nodeAdmin) {\r\n        if (options.mockUserToken) {\r\n            fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".');\r\n        }\r\n        tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\r\n    }\r\n    else if (options.mockUserToken) {\r\n        const token = typeof options.mockUserToken === 'string'\r\n            ? options.mockUserToken\r\n            : createMockUserToken(options.mockUserToken, db.app.options.projectId);\r\n        tokenProvider = new EmulatorTokenProvider(token);\r\n    }\r\n    // Modify the repo to apply emulator settings\r\n    repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\r\n}\r\n/**\r\n * Disconnects from the server (all Database operations will be completed\r\n * offline).\r\n *\r\n * The client automatically maintains a persistent connection to the Database\r\n * server, which will remain active indefinitely and reconnect when\r\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\r\n * to control the client connection in cases where a persistent connection is\r\n * undesirable.\r\n *\r\n * While offline, the client will no longer receive data updates from the\r\n * Database. However, all Database operations performed locally will continue to\r\n * immediately fire events, allowing your application to continue behaving\r\n * normally. Additionally, each operation performed locally will automatically\r\n * be queued and retried upon reconnection to the Database server.\r\n *\r\n * To reconnect to the Database and begin receiving remote events, see\r\n * `goOnline()`.\r\n *\r\n * @param db - The instance to disconnect.\r\n */\r\nfunction goOffline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOffline');\r\n    repoInterrupt(db._repo);\r\n}\r\n/**\r\n * Reconnects to the server and synchronizes the offline Database state\r\n * with the server state.\r\n *\r\n * This method should be used after disabling the active connection with\r\n * `goOffline()`. Once reconnected, the client will transmit the proper data\r\n * and fire the appropriate events so that your client \"catches up\"\r\n * automatically.\r\n *\r\n * @param db - The instance to reconnect.\r\n */\r\nfunction goOnline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOnline');\r\n    repoResume(db._repo);\r\n}\r\nfunction enableLogging(logger, persistent) {\r\n    enableLogging$1(logger, persistent);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerDatabase(variant) {\r\n    setSDKVersion(SDK_VERSION$1);\r\n    _registerComponent(new Component('database', (container, { instanceIdentifier: url }) => {\r\n        const app = container.getProvider('app').getImmediate();\r\n        const authProvider = container.getProvider('auth-internal');\r\n        const appCheckProvider = container.getProvider('app-check-internal');\r\n        return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url);\r\n    }, \"PUBLIC\" /* PUBLIC */).setMultipleInstances(true));\r\n    registerVersion(name, version, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst SERVER_TIMESTAMP = {\r\n    '.sv': 'timestamp'\r\n};\r\n/**\r\n * Returns a placeholder value for auto-populating the current timestamp (time\r\n * since the Unix epoch, in milliseconds) as determined by the Firebase\r\n * servers.\r\n */\r\nfunction serverTimestamp() {\r\n    return SERVER_TIMESTAMP;\r\n}\r\n/**\r\n * Returns a placeholder value that can be used to atomically increment the\r\n * current database value by the provided delta.\r\n *\r\n * @param delta - the amount to modify the current value atomically.\r\n * @returns A placeholder value for modifying data atomically server-side.\r\n */\r\nfunction increment(delta) {\r\n    return {\r\n        '.sv': {\r\n            'increment': delta\r\n        }\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A type for the resolve value of {@link runTransaction}.\r\n */\r\nclass TransactionResult {\r\n    /** @hideconstructor */\r\n    constructor(\r\n    /** Whether the transaction was successfully committed. */\r\n    committed, \r\n    /** The resulting data snapshot. */\r\n    snapshot) {\r\n        this.committed = committed;\r\n        this.snapshot = snapshot;\r\n    }\r\n    /** Returns a JSON-serializable representation of this object. */\r\n    toJSON() {\r\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\r\n    }\r\n}\r\n/**\r\n * Atomically modifies the data at this location.\r\n *\r\n * Atomically modify the data at this location. Unlike a normal `set()`, which\r\n * just overwrites the data regardless of its previous value, `runTransaction()` is\r\n * used to modify the existing value to a new value, ensuring there are no\r\n * conflicts with other clients writing to the same location at the same time.\r\n *\r\n * To accomplish this, you pass `runTransaction()` an update function which is\r\n * used to transform the current value into a new value. If another client\r\n * writes to the location before your new value is successfully written, your\r\n * update function will be called again with the new current value, and the\r\n * write will be retried. This will happen repeatedly until your write succeeds\r\n * without conflict or you abort the transaction by not returning a value from\r\n * your update function.\r\n *\r\n * Note: Modifying data with `set()` will cancel any pending transactions at\r\n * that location, so extreme care should be taken if mixing `set()` and\r\n * `runTransaction()` to update the same data.\r\n *\r\n * Note: When using transactions with Security and Firebase Rules in place, be\r\n * aware that a client needs `.read` access in addition to `.write` access in\r\n * order to perform a transaction. This is because the client-side nature of\r\n * transactions requires the client to read the data in order to transactionally\r\n * update it.\r\n *\r\n * @param ref - The location to atomically modify.\r\n * @param transactionUpdate - A developer-supplied function which will be passed\r\n * the current data stored at this location (as a JavaScript object). The\r\n * function should return the new value it would like written (as a JavaScript\r\n * object). If `undefined` is returned (i.e. you return with no arguments) the\r\n * transaction will be aborted and the data at this location will not be\r\n * modified.\r\n * @param options - An options object to configure transactions.\r\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\r\n * callback to handle success and failure.\r\n */\r\nfunction runTransaction(ref, \r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\ntransactionUpdate, options) {\r\n    var _a;\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('Reference.transaction', ref._path);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw ('Reference.transaction failed: ' + ref.key + ' is a read-only object.');\r\n    }\r\n    const applyLocally = (_a = options === null || options === void 0 ? void 0 : options.applyLocally) !== null && _a !== void 0 ? _a : true;\r\n    const deferred = new Deferred();\r\n    const promiseComplete = (error, committed, node) => {\r\n        let dataSnapshot = null;\r\n        if (error) {\r\n            deferred.reject(error);\r\n        }\r\n        else {\r\n            dataSnapshot = new DataSnapshot(node, new ReferenceImpl(ref._repo, ref._path), PRIORITY_INDEX);\r\n            deferred.resolve(new TransactionResult(committed, dataSnapshot));\r\n        }\r\n    };\r\n    // Add a watch to make sure we get server updates.\r\n    const unwatcher = onValue(ref, () => { });\r\n    repoStartTransaction(ref._repo, ref._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);\r\n    return deferred.promise;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nPersistentConnection;\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\r\n    this.sendRequest('q', { p: pathString }, onComplete);\r\n};\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.echo = function (data, onEcho) {\r\n    this.sendRequest('echo', { d: data }, onEcho);\r\n};\r\n// RealTimeConnection properties that we use in tests.\r\nConnection;\r\n/**\r\n * @internal\r\n */\r\nconst hijackHash = function (newHash) {\r\n    const oldPut = PersistentConnection.prototype.put;\r\n    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\r\n        if (hash !== undefined) {\r\n            hash = newHash();\r\n        }\r\n        oldPut.call(this, pathString, data, onComplete, hash);\r\n    };\r\n    return function () {\r\n        PersistentConnection.prototype.put = oldPut;\r\n    };\r\n};\r\nRepoInfo;\r\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n * @internal\r\n */\r\nconst forceRestClient = function (forceRestClient) {\r\n    repoManagerForceRestClient(forceRestClient);\r\n};\n\n/**\r\n * Firebase Realtime Database\r\n *\r\n * @packageDocumentation\r\n */\r\nregisterDatabase();\n\nexport { DataSnapshot, Database, OnDisconnect, QueryConstraint, TransactionResult, QueryImpl as _QueryImpl, QueryParams as _QueryParams, ReferenceImpl as _ReferenceImpl, forceRestClient as _TEST_ACCESS_forceRestClient, hijackHash as _TEST_ACCESS_hijackHash, repoManagerDatabaseFromApp as _repoManagerDatabaseFromApp, setSDKVersion as _setSDKVersion, validatePathString as _validatePathString, validateWritablePath as _validateWritablePath, child, connectDatabaseEmulator, enableLogging, endAt, endBefore, equalTo, get, getDatabase, goOffline, goOnline, increment, limitToFirst, limitToLast, off, onChildAdded, onChildChanged, onChildMoved, onChildRemoved, onDisconnect, onValue, orderByChild, orderByKey, orderByPriority, orderByValue, push, query, ref, refFromURL, remove, runTransaction, serverTimestamp, set, setPriority, setWithPriority, startAfter, startAt, update };\n//# sourceMappingURL=index.esm2017.js.map\n","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader-v16/dist/index.js??ref--1-1!./Tab1.vue?vue&type=style&index=0&id=abddfd5e&lang=css\"","// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,\n// backported and transplited with Babel, with backwards-compat fixes\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  if (path.length === 0) return '.';\n  var code = path.charCodeAt(0);\n  var hasRoot = code === 47 /*/*/;\n  var end = -1;\n  var matchedSlash = true;\n  for (var i = path.length - 1; i >= 1; --i) {\n    code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n\n  if (end === -1) return hasRoot ? '/' : '.';\n  if (hasRoot && end === 1) {\n    // return '//';\n    // Backwards-compat fix:\n    return '/';\n  }\n  return path.slice(0, end);\n};\n\nfunction basename(path) {\n  if (typeof path !== 'string') path = path + '';\n\n  var start = 0;\n  var end = -1;\n  var matchedSlash = true;\n  var i;\n\n  for (i = path.length - 1; i >= 0; --i) {\n    if (path.charCodeAt(i) === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // path component\n      matchedSlash = false;\n      end = i + 1;\n    }\n  }\n\n  if (end === -1) return '';\n  return path.slice(start, end);\n}\n\n// Uses a mixed approach for backwards-compatibility, as ext behavior changed\n// in new Node.js versions, so only basename() above is backported here\nexports.basename = function (path, ext) {\n  var f = basename(path);\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\nexports.extname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  var startDot = -1;\n  var startPart = 0;\n  var end = -1;\n  var matchedSlash = true;\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find\n  var preDotState = 0;\n  for (var i = path.length - 1; i >= 0; --i) {\n    var code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n    if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension\n      matchedSlash = false;\n      end = i + 1;\n    }\n    if (code === 46 /*.*/) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1)\n          startDot = i;\n        else if (preDotState !== 1)\n          preDotState = 1;\n    } else if (startDot !== -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension\n      preDotState = -1;\n    }\n  }\n\n  if (startDot === -1 || end === -1 ||\n      // We saw a non-dot character immediately before the dot\n      preDotState === 0 ||\n      // The (right-most) trimmed path component is exactly '..'\n      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n    return '';\n  }\n  return path.slice(startDot, end);\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n"],"sourceRoot":""}